@using Intellect.UniteERP.MyResources.FAS
@using Intellect.UniteERP.MyResources.Loans
@using Intellect.UniteERP.MyResources.Investments
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@**@
@model Intellect.Unite.WebPackages.VoucherProcessing.Model.DTO.TransactionDTO
@{
    ViewBag.Title = "TransactionReceiptsFirm";

    if (HttpContextAccessor.HttpContext.Request.Query["IsSingleWindow"] != "" && HttpContextAccessor.HttpContext.Request.Query["IsSingleWindow"] == "True")
    {
        Layout = "~/Views/Shared/_SingleWindowLayout.cshtml";
    }
    else if (HttpContextAccessor.HttpContext.Request.Query["isCustomerCentric"] != "" && HttpContextAccessor.HttpContext.Request.Query["isCustomerCentric"] == "True")
    {
        Layout = "~/Views/Shared/_EmptyMenu.cshtml";
    }

    else
    {
        Layout = "~/Views/Shared/_FormsLayout.cshtml";
    }
}

@using (Html.BeginForm("TransactionReceiptsFirm", "TransactionReceiptsFirm"))
{
    <div class="widget">
        <div class="widget-body">
            <div class="row">
                <div class="col-xs-2">
                    @Html.LabelFor(model => model.InvestmentType)<span class="required">*</span>
                    @Html.DropDownListFor(model => model.InvestmentType, ViewBag.lstInvestType as IEnumerable<SelectListItem>, resInvestmentLables.select, new { @class = "form-control input-xs" })
                </div>                
                <div class="col-sm-2">
                    @Html.LabelFor(model => model.AccountNo)
                    @*@Html.TextBoxFor(model => model.AccountNo, new { @class = "form-control input-xs alphanumwithspecchar", @maxlength = "16", @style = "text-align:right" })*@
                    @Html.DropDownListFor(model => Model.AccountNo, ViewBag.lstAccountNo as SelectList, resInvestmentLables.select, new { @class = "form-control input-xs" })
                    @Html.ValidationMessageFor(model => Model.AccountNo)
                    @Html.HiddenFor(model => Model.InvestmentAccToPost)
                    @Html.HiddenFor(model => model.FinancialTransactionType)
                </div>
                <div class="col-sm-2" id="depositname">
                    @Html.LabelFor(model => model.InvestmentDepositType)
                    @Html.TextBoxFor(model => model.InvestmentDepositType, new { @class = "form-control input-xs alphanumwithspecchar", @maxlength = "16", @style = "text-align:right" })                    
                </div>
                <div class="col-sm-2">
                    @Html.LabelFor(model => model.TempAccountNo)
                    @Html.TextBoxFor(model => model.TempAccountNo, new { @class = "form-control input-xs alphanumwithspecchar", @maxlength = "16", @style = "text-align:right" })
                    @*@Html.DropDownListFor(model => Model.TempAccountNo, ViewBag.lstTermpAccNo as SelectList, "--Select--", new { @class = "form-control input-xs" })
                        @Html.ValidationMessageFor(model => Model.TempAccountNo)*@
                </div>
            </div>
            <div class="row" id="IsBankControlesVisible">
                <div class="col-sm-2">
                    @Html.LabelFor(model => Model.InvestmentBankType)<span class="required">*</span>
                    @Html.DropDownListFor(model => Model.InvestmentBankType, ViewBag.ListBankType as SelectList, resInvestmentLables.select, new { @class = "form-control input-xs" })
                    @*@Html.ValidationMessageFor(model => Model.TermInvestments.BankType)*@
                </div>
                <div class="col-sm-2">
                    @Html.LabelFor(model => Model.InvestmentBank)<span class="required">*</span>
                    @Html.DropDownListFor(model => Model.InvestmentBank, ViewBag.lstBankMaster as SelectList, resInvestmentLables.select, new { @class = "form-control input-xs" })
                    @Html.ValidationMessageFor(model => Model.InvestmentBank)
                </div>
                <div class="col-sm-2">
                    @Html.LabelFor(model => Model.InvestmentBankBranch)<span class="required">*</span>
                    @Html.DropDownListFor(model => Model.InvestmentBankBranch, ViewBag.lstBankBranchMaster as SelectList, resInvestmentLables.select, new { @class = "form-control input-xs" })
                    @Html.ValidationMessageFor(model => Model.InvestmentBankBranch)
                </div>
            </div>
        </div>
    </div>

    <div id="ErrostList" class="modal fade" role="dialog">

        <div class="modal-dialog" style="width:1024px">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" accesskey="C" title="Alt+C">&times;</button>
                    <h4 class="modal-title">@resInvestmentLables.IssuesforParticularAccount </h4>

                </div>
                <div class="modal-body">
                    <div style="height:400px;overflow:auto">
                        <table id="tblerrorslist" class="table table-bordered table-hover" style="overflow: scroll; width: 1000px; ">
                            <thead>
                                <tr>
                                    <th style="text-align:center">
                                        @ResLoanLables.SlNo
                                    </th>


                                    <th style="text-align: center">
                                        @ResLoanLables.LoanNo
                                    </th>
                                    <th style="text-align: center">
                                        @resInvestmentLables.ErrorCode
                                    </th>
                                    <th style="text-align: center">
                                        @resInvestmentLables.ErrorDescription
                                    </th>
                                    <th>
                                        @ResLoanLables.ActionType
                                    </th>
                                    <th>
                                        @ResLoanLables.Action
                                    </th>

                                </tr>
                            </thead>
                            <tbody></tbody>

                        </table>

                    </div>

                </div>

                <div class="modal-footer">
                </div>

            </div>

        </div>

    </div>

    <div class="widget">
        <div id="Transferdialog" title="Basic dialog"></div>
        <div class="widget-header bordered-top bordered-palegreen">
            <span class="widget-caption">@resFasLables.TransactionScreenForReceipts</span>
            @*<a href="#divcontrols" data-toggle="modal" data-target="#updatesanctiondetails" id="btnupdatesanctiondetails" style="display:none; text-transform:uppercase;font-family: Verdana, Arial, Helvetica, sans-serif;font-weight: bold; color:orangered" onclick="GetSanctionDetailsForUpdate();">Update Sanction Details  </a>*@
            <a href="#divcontrols" data-toggle="modal" data-target="#ErrostList" id="btnerrordetails" style="display:none; text-transform:uppercase;font-family: Verdana, Arial, Helvetica, sans-serif;font-weight: bold; color: red">@resInvestmentLables.IssuesforParticularAccount</a>
        </div>

        <div class=" widget-body">
            <div class="row">
                <div class="col-sm-2">
                    @Html.HiddenFor(model => model.StorageCodePkeys)
                    @Html.HiddenFor(model => model.XML)
                    @Html.HiddenFor(model => Model.DemandList, new { @id = "DemandList" })
                    @Html.HiddenFor(model => Model.RepaymentType, new { @id = "RepaymentTypeId" })
                    @Html.HiddenFor(model => Model.ProductTypeId, new { @id = "ProductTypeId" })
                    @Html.LabelFor(model => model.TransactionDate)
                    @Html.TextBoxFor(model => model.TransactionDate, "{0:yyyy-MM-dd}", new { @class = "form-control input-xs", @type = "date", @readonly = true, @Tabindex = -1 })
                    @*@Html.TextBoxFor(model => model.Item2.FromDate, new { @class = "form-control input-xs" })*@
                    @*@Html.ValidationMessageFor(model => model.TransactionDate)*@
                    @Html.Hidden("AddmissionPkey")
                    @Html.Hidden("AccountCode")
                    @Html.Hidden("ProductID")
                    @Html.Hidden("fromdate")
                    @Html.Hidden("todate")
                    @Html.Hidden("formid")
                    @Html.Hidden("AccountPkey")
                    @Html.Hidden("saveupdate")
                    @Html.HiddenFor(model => model.CashBalance)
                </div>
                <div class="col-sm-2">
                    @Html.LabelFor(model => model.ValueDate)
                    @Html.TextBoxFor(model => model.ValueDate, "{0:yyyy-MM-dd}", new { @class = "form-control input-xs", @type = "date" })

                    @Html.ValidationMessageFor(model => model.ValueDate)
                </div>
                <div class="col-sm-2">
                    @Html.LabelFor(model => model.Product)<span class="required">*</span>
                    @Html.DropDownListFor(model => model.Product, ViewBag.productlist as IEnumerable<SelectListItem>, resInvestmentLables.select, new { @class = "form-control input-xs" })
                </div>

                @*<div class="col-sm-2">
                        @Html.LabelFor(model => model.InvestmentType)<span class="required">*</span>
                        @Html.DropDownListFor(model => model.InvestmentType, ViewBag.lstInvestType as IEnumerable<SelectListItem>, "-Select-", new { @class = "form-control input-xs" })
                    </div>*@
                <div class="col-sm-2">
                    @Html.LabelFor(model => model.ActivityType)<span class="required">*</span>
                    @Html.DropDownListFor(model => model.ActivityType, ViewBag.ListOfActivity as IEnumerable<SelectListItem>, resInvestmentLables.select, new { @class = "form-control input-xs" })
                </div>

                <div class="col-sm-2">
                    @Html.LabelFor(model => model.VoucherType)<span class="required">*</span>
                    @Html.DropDownListFor(model => model.VoucherType, ViewBag.TransactionTypeList as IEnumerable<SelectListItem>, resInvestmentLables.select, new { @class = "form-control input-xs" })
                </div>

                @*</div>
                    <div class="row">*@

                <div class="col-sm-2" id="collectionamountid">
                    @Html.LabelFor(model => model.CollectonAmount)<span> ( <i class="fa fa-rupee (alias)"></i> )</span>
                    @Html.TextBoxFor(model => model.CollectonAmount, new { @class = "form-control input-xs applydecimal", @maxlength = "16", @style = "text-align:right" })
                    @*@Html.ValidationMessageFor(model => model.CollectonAmount)*@
                </div>

                <div class="col-sm-2" id="batchno">
                    @Html.LabelFor(model => model.BatchID)
                    @Html.TextBoxFor(model => model.BatchID, new { @class = "form-control input-xs applynumbers", @readonly = true, id = "txtbatchid" })
                    @Html.ValidationMessageFor(model => model.BatchID)
                </div>

                <div class="col-sm-2" id="batchamount">
                    @Html.LabelFor(model => model.BatchAmount)<span> ( <i class="fa fa-rupee (alias)"></i> )</span>
                    @Html.TextBoxFor(model => model.BatchAmount, new { @class = "form-control input-xs applydecimal", @readonly = true, id = "txtbatchamount", @Tabindex = -1 })
                </div>
                <div class="col-sm-2" id="checkno">
                    @Html.LabelFor(model => model.ChequeNo)
                    @Html.TextBoxFor(model => model.ChequeNo, new { @class = "form-control input-xs applynumbers", @MaxLength = "10" })
                    @*@Html.ValidationMessageFor(model => model.ChequeNo)*@
                </div>
                <div class="col-sm-2" id="checkdate">
                    @Html.LabelFor(model => model.ChequeDate)
                    @Html.TextBoxFor(model => model.ChequeDate, "{0:yyyy-MM-dd}", new { @class = "form-control input-xs", @type = "date" })

                    @*@Html.ValidationMessageFor(model => model.ChequeDate)*@
                </div>
                <div class="col-sm-2" id="voucherno">
                    @Html.LabelFor(model => model.VoucherNo)
                    @Html.TextBoxFor(model => model.VoucherNo, new { @class = "form-control input-xs applynumbers", @Tabindex = -1 })
                    @* @Html.ValidationMessageFor(model => model.VoucherNo)*@
                </div>

                <div class="col-sm-2" id="contraproduct">
                    @Html.LabelFor(model => model.ContraProduct)
                    @Html.DropDownListFor(model => model.ContraProduct, ViewBag.Contraproductlist as IEnumerable<SelectListItem>, resInvestmentLables.select, new { @class = "form-control input-xs" })
                    @* @Html.ValidationMessageFor(model => model.VoucherNo)*@
                </div>
                @*<div class="col-sm-2" id="contraproductLedger">
                        @Html.LabelFor(model => model.)
                        @Html.DropDownListFor(model => model.ContraProduct, ViewBag.Contraproductlist as IEnumerable<SelectListItem>, resInvestmentLables.select, new { @class = "form-control input-xs" })
                    </div>*@
                <div class="col-sm-2" id="contraAccountNo">
                    @Html.LabelFor(model => model.ContraAccountNo)
                    @Html.DropDownListFor(model => model.ContraAccountNo, ViewBag.ContraAccountNoList as IEnumerable<SelectListItem>, resInvestmentLables.select, new { @class = "form-control input-xs" })
                    @* @Html.ValidationMessageFor(model => model.VoucherNo)*@
                </div>
                <div class="col-sm-2" id="contraAccountBal">
                    @Html.LabelFor(model => model.ContraAccountBalance)<span> ( <i class="fa fa-rupee (alias)"></i> )</span>
                    @Html.TextBoxFor(model => model.ContraAccountBalance, new { @class = "form-control input-xs applydecimal", @readonly = true, @maxlength = "10", @Tabindex = -1, @style = "text-align:right" })
                    @*@Html.ValidationMessageFor(model => model.CollectonAmount)*@
                </div>
                <div class="col-sm-2">
                    @Html.LabelFor(model => model.SocietyVoucherNo)
                    @Html.TextBoxFor(model => model.SocietyVoucherNo, new { @class = "form-control input-xs alphanumwithspecchar", @maxlength = "15", @style = "text-align:right" })
                    @*@Html.ValidationMessageFor(model => model.CollectonAmount)*@
                </div>
                <div class="col-sm-2" id="NarrationForSBPassBookPrint">
                    @Html.LabelFor(model => model.NarrationForSBTransactions)
                    @Html.TextBoxFor(model => model.NarrationForSBTransactions, new { @class = "form-control input-xs", @MaxLength = "25" })
                    @* @Html.ValidationMessageFor(model => model.VoucherNo)*@
                </div>
                <div class="col-sm-2">
                    <div>
                        <br />
                        <a href="#EditInstallmentChartofTermLoans" style="color:red;display:none" data-toggle="modal" data-target="#EditInstallmentChartofTermLoans" id="editinstallmentchart">@resFasLables.EditInstallments</a>
                    </div>
                </div>

            </div>

        </div>
    </div>
    <div class="widget">
        <div class="widget-body">
            <table id="VoucherDetails" class="table table-bordered table-hover">
                <thead>
                    <tr>
                        <th>
                            @resFasLables.Particulars
                        </th>
                        <th style="text-align:center">
                            @resFasLables.MaxAmount<span> ( <i class="fa fa-rupee (alias)"></i> )</span>
                        </th>
                        <th style="text-align:center">
                            @resFasLables.Amount<span> ( <i class="fa fa-rupee (alias)"></i> )</span>

                        </th>

                    </tr>
                </thead>
                <tbody class="border-left" style="font-size: 13px;">
                    @{
    IList<Intellect.Unite.WebPackages.VoucherProcessing.Model.DTO.TransactionDTO> objparticulars = (IList<Intellect.Unite.WebPackages.VoucherProcessing.Model.DTO.TransactionDTO>)ViewBag.listTempTransactionDTO;
    if (objparticulars != null)
    {
        if (objparticulars.Count == 0)
        {
            <tr>
                <td colspan="3">
                    @*No Rows Found*@
                </td>
            </tr>
        }
        foreach (var v in objparticulars)
        {
            <tr>
                <td>
                    @v.Particulars
                </td>

                <td style="text-align:right">

                    @v.MaxAmount
                </td>
                <td style="text-align:right">

                    @v.Amount
                    @*<input type="checkbox" id="Delete" value="@v.Delete">*@
                </td>
            </tr>
        }
    }
    else
    {
        <tr>
            <td colspan="3">
                @resFasMessages.NoRowsFound
            </td>
        </tr>
    }

                    }
                </tbody>
            </table>

            <a href="#OtherVoucherDetails" class="pull-right mr-tp-10" style="color:blue" data-toggle="modal" data-keyboard="false" data-target="#OtherVoucherDetails" id="addtransctions" onclick="resetFieldsforAddOther()">@resFasLables.AddOtherParticulars</a>
            <div class="clearfix"></div>
        </div>
    </div>

    <div id="OtherVoucherDetails" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content" style="width:900px">
                <div class="modal-header" tabindex="-1">
                    <button type="button" id="btnClose" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">@resFasLables.OtherParticulars</h4>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-sm-12">
                            <div class="col-xs-7" id="Ledgerid">
                                @Html.LabelFor(model => model.Ledger)
                                @Html.DropDownListFor(model => model.Ledger, ViewBag.listOfOtherCharges as SelectList, resInvestmentLables.select, new { @class = "form-control input-xs" })
                                @*@Html.ValidationMessageFor(model => model.Ledger)*@
                            </div>

                            <div class="col-xs-3">
                                @Html.LabelFor(model => model.Amount)<span> ( <i class="fa fa-rupee (alias)"></i> )</span>
                                @Html.TextBoxFor(model => model.Amount, new { @class = "form-control input-xs applydecimal", @MaxLength = "10", @style = "text-align:right" })
                                @*@Html.ValidationMessageFor(model => model.Amount)*@
                            </div>

                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    @*<label class="pull-left" style="color:red"><span class="h5"></span> Marked fields are required&nbsp;</label>*@
                    <input type="button" value="@resFasLables.Add" class="btn btn-primary" id="btnAdd" accesskey="A" title="Alt+A" onclick="AddFields()" />
                </div>

            </div>

        </div>
    </div>

    <div class="widget">
        <div class="widget-body">
            <div class="row">
                <div class="col-sm-7" style="color: red">
                    @Html.LabelFor(model => model.AmountInWords)
                    @Html.TextBoxFor(model => model.AmountInWords, new { @class = "form-control input-xs", @readonly = true, @style = "color:blue", @Tabindex = -1 })
                    @*@Html.ValidationMessageFor(model => model.AmountInWords)*@
                </div>
                <div class="col-sm-2" style="color: red">
                    @Html.LabelFor(model => model.TotalAmount)<span> ( <i class="fa fa-rupee (alias)"></i> )</span>
                    @Html.TextBoxFor(model => model.TotalAmount, new { @class = "form-control input-xs applydecimal", @style = "text-align:right; color:red", @readonly = true, @Tabindex = -1 })
                    @*@Html.ValidationMessageFor(model => model.TotalAmount)*@
                </div>
                <div class="col-sm-2" id="cashdenomination">
                    <br />
                    <a href="#CashDenominationDetails" style="color:blue" class="pull-right" data-toggle="modal" data-keyboard="false" data-target="#CashDenominationDetails" id="Denomination">@resFasLables.Denomination</a>
                </div>
            </div>

            <div class="row">
                <div class="col-sm-7">
                    @Html.LabelFor(model => model.Narration)
                    @Html.TextBoxFor(model => model.Narration, new { @class = "form-control input-xs" })
                    @Html.ValidationMessageFor(model => model.Narration)
                    <label class="pull-left mr-tp-10" style="color:red"><span class="h5"></span>@resFasMessages.Markedfieldsarerequired &nbsp;</label>
                    <input type="submit" value="@resFasLables.Prepare" class="btn btn-primary" id="btnPost" name="command" style="visibility:hidden" />

                </div>

                <div class="col-sm-5 btn-group">
                    <div>
                        <br />
                        <button type="button" value="@resFasLables.Prepare" class="btn btn-default" id="btnSave" accesskey="S" title="Alt+S" onclick="resetPostFields2();"><i class="fa fa-save"></i>@resFasLables.Save</button>
                        <button type="button" value="@resFasLables.Clear" class="btn btn-default" id="btnClear" name="command" accesskey="C" title="Alt+C" onclick="resetFields();"><i class="fa fa-remove"></i>@resFasLables.Clear</button>
                        <button type="button" href="#divcontrols" data-toggle="modal" data-target="#CommomControllRecord" id="idCommonControll" onclick="GetControlRecord();" title="Control Records" class="btn btn-default"><i class="fa fa-list"></i>@ResLoanLables.ControlRecord</button>
                        <button type="button" href="#divcontrols" data-toggle="modal" data-target="#ScrollBookRecord" id="idScrollControll" onclick="GetScrollRecord();" title="Scroll Records" class="btn btn-default"><i class="fa fa-list"></i>.@resFasLables.Receipts</button>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-sm-2">
                    <div>
                        <a hidden href="#divcontrols" style="color:red" id="viewAccountDetails" class="pull-right">@resFasLables.ViewAccount</a>
                    </div>
                </div>
                <div class="col-sm-2">
                    <div>
                        <a href="#demandresults" style="color:red;display:none" data-toggle="modal" data-target="#demandresults" id="viewdemand" onclick="">@resFasLables.ViewDemand</a>
                    </div>
                </div>

                <div class="col-sm-2" style="display:none">
                    <div>
                        <a href="#InstallmentChartofTermLoans" style="color:red;display:none" data-toggle="modal" data-target="#InstallmentChartofTermLoans" id="viewinstallmentchart">@resFasLables.ViewInstallments</a>
                    </div>
                </div>

                <div class="col-sm-2" style="display:none">
                    <div>
                        <a href="#EditInstallmentChartofTermLoans" style="color:red;display:none" data-toggle="modal" data-target="#EditInstallmentChartofTermLoans" id="editinstallmentchart2">@resFasLables.EditInstallments</a>
                    </div>
                </div>
                <div class="col-sm-2">
                    <div>
                        <a href="#TermInvestmentIntrestPayment" style="color:red" id="TermInvestmentIntrestPayment" class="pull-right">@resInvestmentLables.InvestmentInterestPayments</a>
                    </div>
                </div>
                <div class="col-sm-2">
                    <div>
                        <a href="#InvestmentClosure" style="color:red" id="InvestmentClosure" class="pull-right">@resInvestmentLables.InvestmentClosure</a>
                    </div>
                </div>
                <div class="col-sm-2">
                    <div>
                        @*<a href="#InvestmentForeclosure" style="color:red" id="InvestmentForeclosure" class="pull-right">@resInvestmentLables.InvestmentForeclosure</a>*@
                    </div>
                </div>
            </div>

        </div>
    </div>

    <div id="demandresults" class="modal fade" role="dialog">
        <div class="modal-dialog" style="margin-left:100px;">
            <div class="modal-content" style="width:950px">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">@ResLoanLables.DemandDetails</h4>
                </div>
                <div class="modal-body">
                    <div style="height:450px;">
                        @Html.Partial("~/Areas/Loans/Views/Shared/ViewDemandcalculation.cshtml")
                    </div>
                </div>
                <div class="modal-footer">
                </div>
            </div>
        </div>
    </div>


    //Added to View Storage details



    <div id="CashDenominationDetails" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content" style="width:500px">
                <div class="modal-header" tabindex="-1">
                    <button type="button" id="denominationClose" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">@resFasLables.DenominationDetails</h4>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-sm-12">
                            <div style="height:425px; overflow:auto;">
                                <table id="CashDenominationtable" class="table table-bordered table-hover">
                                    <thead>
                                        <tr>
                                            <th>
                                                @resFasLables.CashDetails
                                            </th>
                                            <th>
                                                @resInvestmentLables.NoIn
                                            </th>
                                            <th>
                                                @resInvestmentLables.TotalIn
                                            </th>
                                            <th>
                                                @resInvestmentLables.NoOut
                                            </th>
                                            <th>
                                                @resInvestmentLables.TotalOut
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @{

    for (int i = 0; i < 9; i++)
    {
        <tr>
            @if (i == 0)
            {
                <td>
                    @Html.LabelFor(model => model.objDenominationDTO.Thousands)
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.Thousands, new { @class = "form-control input-xs applydecimal", @MaxLength = "4", @style = "text-align:right", @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.ThousandsTotal, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @readonly = true, @Tabindex = -1, @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.OutThousands, new { @class = "form-control input-xs applydecimal", @MaxLength = "4", @style = "text-align:right", @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.OutThousandsTotal, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @readonly = true, @Tabindex = -1, @autocomplete = "Off" })
                </td>
            }
            @if (i == 1)
            {
                <td>
                    @Html.LabelFor(model => model.objDenominationDTO.FiveHundreds)
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.FiveHundreds, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @MaxLength = '4', @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.FiveHundredsTotal, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @readonly = true, @Tabindex = -1, @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.OutFiveHundreds, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @MaxLength = '4', @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.OutFiveHundredsTotal, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @readonly = true, @Tabindex = -1, @autocomplete = "Off" })
                </td>
            }
            @if (i == 2)
            {
                <td>
                    @Html.LabelFor(model => model.objDenominationDTO.Hundreds)
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.Hundreds, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @MaxLength = '4', @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.HundredsTotal, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @readonly = true, @Tabindex = -1, @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.OutHundreds, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @MaxLength = '4', @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.OutHundredsTotal, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @readonly = true, @Tabindex = -1, @autocomplete = "Off" })
                </td>
            }
            @if (i == 3)
            {
                <td>
                    @Html.LabelFor(model => model.objDenominationDTO.Fifties)
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.Fifties, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @MaxLength = '4', @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.FiftiesTotal, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @readonly = true, @Tabindex = -1, @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.OutFifties, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @MaxLength = '4', @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.OutFiftiesTotal, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @readonly = true, @Tabindex = -1, @autocomplete = "Off" })
                </td>
            }
            @if (i == 4)
            {
                <td>
                    @Html.LabelFor(model => model.objDenominationDTO.Twenties)
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.Twenties, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @MaxLength = '4', @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.TwentiesTotal, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @readonly = true, @Tabindex = -1, @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.OutTwenties, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @MaxLength = '4', @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.OutTwentiesTotal, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @readonly = true, @Tabindex = -1, @autocomplete = "Off" })
                </td>
            }
            @if (i == 5)
            {
                <td>
                    @Html.LabelFor(model => model.objDenominationDTO.Tens)
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.Tens, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @MaxLength = '4', @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.TensTotal, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @readonly = true, @Tabindex = -1, @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.OutTens, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @MaxLength = '4', @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.OutTensTotal, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @readonly = true, @Tabindex = -1, @autocomplete = "Off" })
                </td>
            }
            @if (i == 6)
            {
                <td>
                    @Html.LabelFor(model => model.objDenominationDTO.Fives)
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.Fives, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @MaxLength = '4', @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.FivesTotal, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @readonly = true, @Tabindex = -1, @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.OutFives, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @MaxLength = '4', @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.OutFivesTotal, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @readonly = true, @Tabindex = -1, @autocomplete = "Off" })
                </td>
            }
            @if (i == 7)
            {
                <td>
                    @Html.LabelFor(model => model.objDenominationDTO.Twos)
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.Twos, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @MaxLength = '4', @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.TwosTotal, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @readonly = true, @Tabindex = -1, @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.OutTwos, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @MaxLength = '4', @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.OutTwosTotal, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @readonly = true, @Tabindex = -1, @autocomplete = "Off" })
                </td>
            }
            @if (i == 8)
            {
                <td>
                    @Html.LabelFor(model => model.objDenominationDTO.Ones)
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.Ones, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @MaxLength = '4', @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.OnesTotal, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @readonly = true, @Tabindex = -1, @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.OutOnes, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @MaxLength = '4', @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.OutOnesTotal, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @readonly = true, @Tabindex = -1, @autocomplete = "Off" })
                </td>
            }

        </tr>
    }

                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-12" style="text-align:right">

                            @Html.LabelFor(model => model.objDenominationDTO.Total)

                            @Html.TextBoxFor(model => model.objDenominationDTO.Total)

                            @Html.TextBoxFor(model => model.objDenominationDTO.OutTotal)

                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <input type="button" value="@resFasLables.Add" class="btn btn-primary" id="btnAddDenamination" accesskey="A" title="Alt+A" onclick="AddDenamination();" />

                </div>
            </div>

        </div>
    </div>
    <div id="ScrollBookRecord" class="modal fade" role="dialog">

        <div class="modal-dialog">
            <div class="modal-content" style="width: 760px">

                <div class="modal-body">


                    <div class="widget">
                        <div class="widget-header bordered-left bordered-blue">

                            <span class="widget-caption">@resFasLables.ReceiptRecords</span>
                            <div class="pull-right" style=" margin-right: 15px; ">
                                @*<a href="/Home/Index" class="fa fa-home" style="font-size:25px"></a>*@
                                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                            </div>
                        </div>
                        <div class="widget-body bordered-left bordered-blueberry">
                            <div class="row">

                                <div class="col-xs-3">
                                    @Html.LabelFor(model => model.ModulName)
                                    @Html.DropDownListFor(model => model.ModulName, ViewBag.Modulelist as SelectList, resInvestmentLables.select, new { @class = "form-control input-xs" })
                                    @*@Html.ValidationMessageFor(model => model.ModulName)*@
                                </div>
                                <div class="col-xs-3">
                                    @Html.LabelFor(model => model.Activity, resFasLables.Activity)
                                    @Html.DropDownListFor(model => model.Activity, ViewBag.ActivityCombo as SelectList, resInvestmentLables.select, new { @class = "form-control input-xs" })
                                    @*@Html.Validati4onMessageFor(model => model.ModulName)*@
                                </div>
                                <div class="col-xs-2">
                                    @Html.Label(resFasLables.PassStatus)
                                    @Html.DropDownList("PassStatus", new List<SelectListItem>
                                    {
                                        new SelectListItem{ Text=resInvestmentLables.NotPost, Value="1"},
                                        new SelectListItem{ Text=resFasLables.Post, Value="2"}

                                    }, resInvestmentLables.select, new { @class = "form-control input-xs", @style = "width: 117px;" })
                                </div>
                                <div class="col-sm-1">
                                    <br />
                                    <input type="submit" value="@resFasLables.View" class="btn btn-primary" id="btnView " onclick="GetScrollRecord();" name="command" accesskey="V" title="Alt+V" style="margin-top: 5px;margin-left: 10px;" />
                                </div>

                            </div>

                            <div style=" width: 710px">

                                <div class="row">
                                    <div class="col-sm-12">

                                        <div style="height:650px; overflow:auto;">
                                            <table id="ScrollRecord" class="table table-bordered table-hover">
                                                <thead>
                                                    <tr>
                                                        @*<th>User ID  </th>*@
                                                        <th style="width:95px;">@resInvestmentLables.VoucherNo</th>
                                                        <th style="width:95px;">@resFasLables.Date </th>
                                                        <th style="width:95px;">@resFasLables.Module </th>
                                                        <th style="width:95px;">.@resFasLables.Activity</th>
                                                        <th style="width:135px;">@resFasLables.Particulars </th>
                                                        <th style="width:95px;">@resFasLables.PassStatus</th>
                                                        <th style="width:100px;text-align:center">@resFasLables.Amount<span> ( <i class="fa fa-rupee (alias)"></i> )</span></th>
                                                        @*<th style="width:50px;">Credit</th>*@
                                                        @*<th>Key Value</th>*@
                                                    </tr>
                                                </thead>
                                                <tbody>

                                                    @{

                                                    }
                                                </tbody>

                                            </table>
                                        </div>

                                    </div>

                                </div>
                            </div>

                        </div>

                    </div>

                </div>
                <div class="modal-footer">

                    <div class="row">

                        <div class="col-sm-10" style="text-align:right">
                            @Html.Label("Total")<span> ( <i class="fa fa-rupee (alias)"></i> )</span>
                        </div>

                        <div class="col-sm-1" style="text-align:left">
                            <label id="TotalReceipt"></label>
                        </div>
                    </div>
                </div>
            </div>

        </div>

    </div>
    <div id="LastVoucherDetailsmod" class="modal fade" role="dialog">

        <div class="modal-dialog">
            <div class="modal-content" style="width: 760px">

                <div class="modal-body">
                    <div class="widget">

                        <div class="widget-body bordered-left bordered-blueberry">


                            <div style=" width: 710px">

                                <div class="row">
                                    <div class="col-sm-12">

                                        <div id="LastVoucherDetailsDiv" style="height:650px; overflow:auto;">
                                            <table id="LastVoucherDetails" class="table table-bordered table-hover">
                                                <thead>
                                                    <tr>
                                                        @*<th>User ID  </th>*@

                                                        <th style="width:120px;">@resFasLables.Date </th>
                                                        <th style="width:120px;"> @resFasLables.Particulars</th>
                                                        <th style="width:100px;text-align:center">@resFasLables.Debit<span> ( <i class="fa fa-rupee (alias)"></i> )</span></th>
                                                        <th style="width:110px;text-align:center">@resFasLables.Credit<span> ( <i class="fa fa-rupee (alias)"></i> )</span></th>
                                                        @*<th style="width:50px;">Credit</th>*@
                                                        @*<th>Key Value</th>*@
                                                    </tr>
                                                </thead>
                                                <tbody>

                                                    @{

                                                    }
                                                </tbody>

                                            </table>
                                        </div>

                                    </div>

                                </div>
                            </div>

                        </div>
                    </div>

                </div>
                <div class="modal-footer">


                </div>
            </div>

        </div>

    </div>
      <span style="display:none" id="idyes">@Intellect.UniteERP.MyResources.FAS.resFasLables.Yes</span>
  <span style="display:none" id="idno">@Intellect.UniteERP.MyResources.FAS.resFasLables.Cancel</span>

}

@using (Html.BeginForm())
{
    @Html.Hidden("VoucherNoForPening")
    <input type="submit" value="Post" class="btn btn-primary hide" id="btnLastVchrPost" />
}

<div id="MemberAccountDetails">
</div>

@section PageScripts{
    @*<script src="~/assets/js/shotcut.js"></script>
        <link href="~/assets/dist/sweetalert.css" rel="stylesheet" />
        <script src="~/assets/dist/sweetalert.min.js"></script>*@
    <script src="~/Scripts/ModuleScripts/FasScripts/TransactionReceiptFirm.js"></script>

    <script>

       
    var btnYes = document.getElementById('idyes').innerText;
        var btnNo =document.getElementById('idno').innerText;

     var lblHello= '@resFasMessages.Hello';
    var lblSelectatleastoneinstallmenttosave= '@resFasMessages.Selectatleastoneinstallmenttosave';
    var lblCollectedPrincipalshouldnotbegreaterthanDemandPrincipal = '@resFasMessages.CollectedPrincipalshouldnotbegreaterthanDemandPrincipal';
    var lblCollectedInterestshouldnotbegreaterthanDemandInterest = '@resFasMessages.CollectedInterestshouldnotbegreaterthanDemandInterest';
    var lblCollectedPenalInterestshouldnotbegreaterthanDemandPenalInterest = '@resFasMessages.CollectedPenalInterestshouldnotbegreaterthanDemandPenalInterest';
    var lblCollectedIODshouldnotbegreaterthanDemandIOD= '@resFasMessages.CollectedIODshouldnotbegreaterthanDemandIOD';
    var lblCollectedOthersshouldnotbegreaterthanDemandOthers= '@resFasMessages.CollectedOthersshouldnotbegreaterthanDemandOthers';
    var lblAmountshouldnotbe0= '@resFasMessages.Amountshouldnotbe0';
    var lblRecordmustbeselectedwhenCollectionAmountEntered= '@resFasMessages.RecordmustbeselectedwhenCollectionAmountEntered';
    var lblCollectionAmountshouldbegreaterthan= '@resFasMessages.CollectionAmountshouldbegreaterthan';
    var lblSelectInstallmenttype= '@resFasMessages.SelectInstallmenttype';
    var lblCollectionAmountmustandshouldbe= '@resFasMessages.CollectionAmountmustandshouldbe';
    var lblforNonMember= '@resFasMessages.forNonMember';
    var lblforMember= '@resFasMessages.forMember';
    var lblOnlyDebitamountisallowedforthisaccountasperNeftParameters= '@resFasMessages.OnlyDebitamountisallowedforthisaccountasperNeftParameters';
    var lblasperNeftParameters= '@resFasMessages.asperNeftParameters';
    var lblamountshouldbelessthanorequalto= '@resFasMessages.amountshouldbelessthanorequalto';
    var lblLastdayenddateis= '@resFasMessages.Lastdayenddateis';
    var lblSelectAllBonds= '@resFasMessages.SelectAllBonds';
    var lblInvalidSanctionAmount= '@resFasMessages.InvalidSanctionAmount';
    var lblPleaseentervalidmonthstoCalculatetheyears= '@resFasMessages.PleaseentervalidmonthstoCalculatetheyears';
    var lblPleaseentervalidmonthstoCalculatetheByMonthonMonthlyBase= '@resFasMessages.PleaseentervalidmonthstoCalculatetheByMonthonMonthlyBase';
    var lblPleaseentervalidmonthstoCalculatetheyearsonhalfyearlybase= '@resFasMessages.PleaseentervalidmonthstoCalculatetheyearsonhalfyearlybase';
    var lblPleaseentervalidmonthstoCalculatetheyearsonquartarlybase= '@resFasMessages.PleaseentervalidmonthstoCalculatetheyearsonquartarlybase';
    var lblGivenmonthsshouldmatchRepaymentmode= '@resFasMessages.GivenmonthsshouldmatchRepaymentmode';
    var lblUnabletoCalculateEMI= '@resFasMessages.UnabletoCalculateEMI';
    var lblFirstInstallmentDateshouldbegreaterthanFirstDisbursementDate= '@resFasMessages.FirstInstallmentDateshouldbegreaterthanFirstDisbursementDate';
    var lblThereisdataproblemUnabletogettheData= '@resFasMessages.ThereisdataproblemUnabletogettheData';
    var lblDataUpdatedSuccessfully= '@resFasMessages.DataUpdatedSuccessfully';
    var lblUnabletoCompleteUpdation= '@resFasMessages.UnabletoCompleteUpdation';
    var lblLastTransactiondateisgraterthanlogindate= '@resFasMessages.LastTransactiondateisgraterthanlogindate';
    var lblActualTransactionDateCannotLessthanPreviousValueDate= '@resFasMessages.ActualTransactionDateCannotLessthanPreviousValueDate';
    var lblActualTransactionDateCannotLessthanApplicationDate= '@resFasMessages.ActualTransactionDateCannotLessthanApplicationDate';
    var lbNodatafound = '@resFasMessages.Nodatafound';
    var lblSocietyVoucherNoalreadyexist='@resFasMessages.SocietyVoucherNoalreadyexist';
    var lblenteramountmustbemultipleofinstallmentamount='@resFasMessages.enteramountmustbemultipleofinstallmentamount';
    var lblValuedatemustbelessthanorequaltologindate='@resFasMessages.Valuedatemustbelessthanorequaltologindate';
    var lbDaybookdateis = '@resFasMessages.Daybookdateis';
    var lbValuedatemustbegreaterthanorequalto = '@resFasMessages.Valuedatemustbegreaterthanorequalto';
    var lbValuedatemustbegreaterthanorequaltoadmissiondate = '@resFasMessages.Valuedatemustbegreaterthanorequaltoadmissiondate';
    var lbLedgeralreadyExists = '@resFasMessages.LedgeralreadyExists';
    var lbEnterCorrectDenominationDetails = '@resFasMessages.EnterCorrectDenominationDetails';
    var lbCheckIssuesforParticularAccount = '@resFasMessages.CheckIssuesforParticularAccount';
    var lbCouldnotfoundanydetailswiththesearchcriteria = '@resFasMessages.Couldnotfoundanydetailswiththesearchcriteria'; 
    var lbUnabletoprocessyourrequest = ' @resFasMessages.Unabletoprocessyourrequest';
    var lbCheckthecheckboxtoUpdateMemberwisepolicy = ' @resFasMessages.CheckthecheckboxtoUpdateMemberwisepolicy';
    var lbCheckthecheckboxtoUpdatepolicydate = ' @resFasMessages.CheckthecheckboxtoUpdatepolicydate';
    var lbCheckthecheckboxtoUpdatePendingInterest= ' @resFasMessages.CheckthecheckboxtoUpdatePendingInterest';
    var lbCheckthecheckboxtoUpdatePendingIODInterest= ' @resFasMessages.CheckthecheckboxtoUpdatePendingIODInterest';
    var lbDataUpdatedSuccessfully = ' @resFasMessages.DataUpdatedSuccessfully';
    var lbLastTransactiondateisgraterthanlogindate = ' @resFasMessages.LastTransactiondateisgraterthanlogindate';





        var lblLastTransactionPending = '@resFasMessages.LastTransactionPendingDouwanttopost';
        var lblRevertMsg = '@resFasMessages.Youwontbeabletorevertthis';
        function AllowNumbers(control) {
            extractNumber(control, 0, false);
        }
        function AllowNumbersWithFiveDecimals(control) {
            extractNumber(control, 5, false);
        }
        function AllowNumbersWithThreeDecimals(control) {
            extractNumber(control, 2, false);
        }
        function AllowAlphaNumbers(e) {
            debugger;
            return AlphaNumCheck(e);
        }

        var lstStorageDetails = [];
        $('.alphanumwithspecchar').keypress(function (e) {
            return AlphaNumWithSpecialCharactersCheck(e);
        });
        $('.modal').on('shown.bs.modal', function (e) {

            $('#Ledger').focus();
        });

        function CheckAmountMaxLength(control) {
            var value = $(control).val();
            if (value.length > 4) {
                $(control).val(value.slice(0, 4));
            }
        }
        $(document).ready(function () {
            var v = '@ViewBag.logindate';
            $('#TransactionDate').val(v);
            $('#ValueDate').val(v);
            //var lstStorageDetails = [];
            $('#InvestmentForeclosure').hide();
            $('#InvestmentClosure').hide();
            $('#TermInvestmentIntrestPayment').hide();
            document.getElementById('IsBankControlesVisible').style.visibility = "hidden";
            $('#InvestmentDepositType').prop('readonly', true);
            $(document).on('invalid-form.validate', 'form', function () {

                setTimeout(function () {

                    document.getElementById("btnSave").disabled = false;

                }, 1);
            });
            $(document).on('submit', 'form', function () {

                setTimeout(function () {

                    document.getElementById("btnSave").disabled = true;

                }, 0);
            });
            document.getElementById("FinancialTransactionType").value = 1;
            var pendingforposting = '@TempData["PendingForPosting"]';
            @*var pendingforposting = '@ViewBag.PendingForPosting';*@
            var denominationstatus = '@ViewBag.denomination';
            $('#denominationid').val(denominationstatus);
            $('#cashdenomination').hide();
            $('#collectionamountid').hide();
            $('#checkno').hide();
            $('#checkdate').hide();
            $('#contraproduct').hide();
            $('#contraAccountNo').hide();
            $('#contraAccountBal').hide();
            $('#NarrationForSBPassBookPrint').hide();

            $('#batchno').hide();
            $('#batchamount').hide();
            $('#voucherno').hide();

            $('#addtransctions').removeAttr("style");
            $('#addtransctions').attr("style", "display:none");
            if (pendingforposting == 'True') {
                $('#idvoucherpost').trigger('click');
            }
            $('#InvestmentForeclosure').on('hidden.bs.modal', function (e) {
                $(e.target).removeData('bs.modal');
            });

            $('#InvestmentClosure').on('hidden.bs.modal', function (e) {
                $(e.target).removeData('bs.modal');
            });
            $('#viewAccountDetails').click(function () {
                debugger;
                var accountno = document.getElementById("AccountNo").value;
                var productcode = document.getElementById("Product").value;
                var logindate = document.getElementById("TransactionDate").value;
                $('#AccountPkey').val(accountno);
                var fromdate = $('#fromdate').val();
                var w = 900;
                var h = 900;
                var left = (screen.width / 2) - (w / 2);
                var top = (screen.height / 2) - (h / 2);
               // var pageURL = "@Url.Action("AccountReport", "TransactionReceipt", new { area = "FAS", AccountCode = "accountno",ProductID = "product",fromdate = "Fromdate",todate = "Todate" })"
                var pageURL = "@Url.Action("AccountReportParallelRun2", "TransactionPaymentParallelRun", new { area = "FAS", AccountCode = "accountno", ProductID = "product", fromdate = "Fromdate", todate = "Todate" })"
                pageURL = pageURL.replace('accountno', accountno);
                pageURL = pageURL.replace('product', productcode);
                pageURL = pageURL.replace('Fromdate', fromdate);
                pageURL = pageURL.replace('Todate', logindate);
                pageURL = pageURL.replace('amp;', '');
                pageURL = pageURL.replace('amp;', '');
                pageURL = pageURL.replace('amp;', '');
                var title = "Account Details";
                var targetWin = window.open(pageURL, title, 'toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=' + w + ', height=' + h + ', top=' + top + ', left=' + left);
                return targetWin;
                window.open("", "", "width=200, height=100");
            });

            $('#InvestmentClosure').click(function () {
                debugger;
                var _AccountNo = $("#AccountNo option:selected").text(); //document.getElementById("AccountNo").value;
                var _Product = document.getElementById("Product").value;
                var _InvestType = document.getElementById("InvestmentType").value;
                //var admissionPkey = document.getElementById("AddmissionPkey").value;
                //$('#AccountPkey').val(accountno);
                var w = 990;
                var h = 600;
                var left = (screen.width / 2) - (w / 2);
                var top = (screen.height / 2) - (h / 2);
                var pageURL = "@Url.Action("InvestmentClosureDetails", "InvestmentClosure", new { area = "Investment", AccountNo = "AccountNo2", Product = "Product2", InvestType = "InvestType2" })"
                pageURL = pageURL.replace('AccountNo2', _AccountNo);
                pageURL = pageURL.replace('Product2', _Product);
                pageURL = pageURL.replace('InvestType2', _InvestType);
                pageURL = pageURL.replace('amp;', '');
                pageURL = pageURL.replace('amp;', '');
                var title = "Closure Details";
                var targetWin = window.open(pageURL, title, 'toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=' + w + ', height=' + h + ', top=' + top + ', left=' + left);

                return targetWin;

                window.open("", "", "width=200, height=100");
            });

            $('#InvestmentForeclosure').click(function () {
                debugger;
                var _AccountNo = $("#AccountNo option:selected").text(); //document.getElementById("AccountNo").value;
                var _Product = document.getElementById("Product").value;
                var _InvestType = document.getElementById("InvestmentType").value;
                //var admissionPkey = document.getElementById("AddmissionPkey").value;
                //$('#AccountPkey').val(accountno);
                var w = 990;
                var h = 600;
                var left = (screen.width / 2) - (w / 2);
                var top = (screen.height / 2) - (h / 2);
                var pageURL = "@Url.Action("InvestmentForeclosureDetails", "InvestmentClosure", new { area = "Investment", AccountNo = "AccountNo2", Product = "Product2", InvestType = "InvestType2" })"
                pageURL = pageURL.replace('AccountNo2', _AccountNo);
                pageURL = pageURL.replace('Product2', _Product);
                pageURL = pageURL.replace('InvestType2', _InvestType);
                pageURL = pageURL.replace('amp;', '');
                pageURL = pageURL.replace('amp;', '');
                var title = '@resInvestmentLables.ClosureDetails';
                var targetWin = window.open(pageURL, title, 'toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=' + w + ', height=' + h + ', top=' + top + ', left=' + left);

                return targetWin;

                window.open("", "", "width=200, height=100");
            });

            $('#TermInvestmentIntrestPayment').click(function () {
                debugger;
                var _AccountNo = $("#AccountNo option:selected").text(); //document.getElementById("AccountNo").value;
                var _Product = document.getElementById("Product").value;
                var _InvestType = document.getElementById("InvestmentType").value;
                //var admissionPkey = document.getElementById("AddmissionPkey").value;
                //$('#AccountPkey').val(accountno);
                var w = 990;
                var h = 600;
                var left = (screen.width / 2) - (w / 2);
                var top = (screen.height / 2) - (h / 2);
                var pageURL = "@Url.Action("TermInvestmentIntrestPayment", "TermInvestment", new { area = "Investment", AccountNo = "AccountNo2", Product = "Product2", InvestType = "InvestType2" })"
                pageURL = pageURL.replace('AccountNo2', _AccountNo);
                pageURL = pageURL.replace('Product2', _Product);
                pageURL = pageURL.replace('InvestType2', _InvestType);
                pageURL = pageURL.replace('amp;', '');
                pageURL = pageURL.replace('amp;', '');
                var title = '@resInvestmentLables.ClosureDetails';
                var targetWin = window.open(pageURL, title, 'toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=' + w + ', height=' + h + ', top=' + top + ', left=' + left);

                return targetWin;

                window.open("", "", "width=200, height=100");
            });
        });

        function ConvertJsonDateString(jsonDate) {
            var shortDate = null;
            if (jsonDate) {
                var regex = /-?\d+/;
                var matches = regex.exec(jsonDate);
                var dt = new Date(parseInt(matches[0]));
                var month = dt.getMonth() + 1;
                var monthString = month > 9 ? month : '0' + month;
                var day = dt.getDate();
                var dayString = day > 9 ? day : '0' + day;
                var year = dt.getFullYear();
                shortDate = year + '-' + monthString + '-' + dayString;

            }
            return shortDate;
        };

        $(document).ready(function () {

            //$('.modal').on('shown.bs.modal', function (e) {

            //    $('#Ledger').focus();
            //});
            var v = '@ViewBag.logindate';

            var ledgerFolio = '@resFasMessages.PreviousLedgerFolioNois';

            $("#InvestmentType").focus();
            //var status = 'true';
            //document.getElementById("saveupdate").value = status;
            var product = $('#Product').val();
            debugger;
            $("#AccountNo").empty();
            $('#AccountNo').append('<option value="0">@resInvestmentLables.select</option>');
            $("#ActivityType").empty();
            $('#ActivityType').append('<option value="0">@resInvestmentLables.select</option>');
            $('#VoucherDetails tbody').empty();
            $('#TempAccountNo').val('');
            $('#Admissionno').focusout(function () {
                $('.modal').on('shown.bs.modal', function (e) {

                    $('#Ledger').focus();
                });

                var admissionno = $('#Admissionno').val();
                var formid = '@ViewBag.FormID';

                if (admissionno == "") {
                    //resetFields();

                    var formid = '@ViewBag.FormID';
                    var logindate = '@ViewBag.logindate';
                    var savestatus = document.getElementById("saveupdate").value;
                    ResetFields(formid, logindate, savestatus);
                    admissionno = "0";
                    return;
                    //$('#Admissionno').focus();

                }
                $.ajax({
                    url: '@Url.Action("GetPersonalDetails", "Home", new { area=""})',
                    type: 'Get',
                    data: { AdmissionNo: admissionno, formid: formid },
                    dataType: 'json',
                    contentType: 'application/json',
                    success: function (data) {

                        if (data == false) {

                            $('#Admissionno').focus();
                            $('#Admissionno').val('')
                            $('#MemberName').val('')
                            $('#MemberVillage').val('')
                            $('#MemberFatherOrSpouseName').val('')
                            $('#user').attr("src", '@Url.Content("~/assets/img/user1.png")')
                            swal({ title: '@resFasMessages.AdmissionNodoesnotexists' }, function (isConfirm) { if (isConfirm) { $('#Admissionno').focus(); } })
                            return false;
                        }
                        data.AdmissionNo = admissionno;
                        FillPersonalDetails(data)

                        MemberType = data.CustomerType;
                        $('#AddmissionPkey').val(data.Pkey);
                        var product = $("#Product").val();
                        //if (product == "") {
                        GetProductDetails(data.Pkey);
                        //}
                    }
                });

            });

            //$('#ValueDate').focus();
            var admn = '@ViewBag.AdmissionNo';
            if (admn != "" && admn != "0") {
                $('#Admissionno').val(admn);
                $('#btnerrordetails').hide();

                $('#Admissionno').trigger('focusout');
                // $('#Admissionno').focusout();
            }
            else {
                $("#Admissionno").focus();
            }
            $('#btn_Add').attr('disabled', true);

        });
        $("#SocietyVoucherNo").focusout(function () {

            var result = false; var svno = $('#SocietyVoucherNo').val();
            $.ajax({
                type: "GET",
                url: '@Url.Action("IsSocietyVoucherNoExists", "TransactionReceipt", new { area = "FAS" })',
                data: { SocietyVoucherNo: $('#SocietyVoucherNo').val() },
                dataType: "json",
                async: false,
                success: function (msg) {

                    if (msg.isExistSocietyVoucherNo == true) {
                        $('#SocietyVoucherNo').val('');
                        $('#SocietyVoucherNo').focus();
                        swal({
                            title: '@resFasLables.SocietyVoucherNo' + svno + '@resInvestmentLables.alreadyenteredtoday.'
                        },
                         function (isConfirm) {
                             $('#SocietyVoucherNo').focus();
                         });

                        result = msg;
                        return false;
                    }
                    result = msg;
                    return true
                }
            });

            if (result == true)
                return false;
        });

        //$(function () {
        //    $('#AccountNo').focusout(function () {
        //        debugger;
        //        //$('#Product').trigger('change');
        //    })
        //})

        $(function () {
            $("#AccountNo").change(function () {
                debugger;
                //var productcode = document.getElementById("Product").value;
                //var accountNo = $('#AccountNo').val();
               // var accountNo = $("#AccountNo option:selected").text();
                debugger;
                //GetProductDetails(accountNo);
                //GetOpeningbalance();
               // $('#Product').trigger('change');
                @*debugger;
            $('#TempAccountNo').val('');
            var TransactionDetails = document.getElementById("ActivityType").value;
            var accountno = document.getElementById("AccountNo").value;
            // var accountno = $('#AccountNo option:selected').text();
            var productcode = document.getElementById("Product").value;
            var admissionpkey = document.getElementById("AddmissionPkey").value;
            $('#AccountPkey').val(accountno);
            var logindate = document.getElementById("TransactionDate").value;
            $('#AccountCode').val(accountno);
            $('#ProductID').val(productcode);
            $('#todate').val(logindate);

            //$("#ActivityType").empty();
            //$('#ActivityType').append('<option value="0">--Select--</option>');
            $('#VoucherDetails tbody').empty();
            var urlpendingVchr = '@Url.Action("GetPendingLastTransaction", "TransactionReceipt")';
            var formid = '@ViewBag.FormID';

            GetLastTransactionAndOpeningDate(accountno, productcode, logindate, urlpendingVchr, formid);

            GetVoucherPrepareByActivityid(TransactionDetails, accountno, productcode, admissionpkey, urlpendingVchr);
            ApplyEditable();*@
            }

                )

        });

        var MinShareBalance = ""; var MaxShareBalance = ""; var MemberType = 0;
        $(document).ready(function () {

            var v = '@ViewBag.logindate';
            MinShareBalance = '@ViewBag.MinShareBalance';
            MaxShareBalance = '@ViewBag.MaxShareBalance';
        });
        $(function () {
            $("#ActivityType").change(function () {
                debugger;
                var TransactionDetails = document.getElementById("ActivityType").value;
                //var accountno = document.getElementById("AccountNo").value;
                var productcode = document.getElementById("Product").value;
                var admissionpkey = document.getElementById("AddmissionPkey").value;
                //$('#AccountPkey').val(accountno);
                var accountno = $("#AccountNo option:selected").text();
                GetVoucherPrepareByActivityid(TransactionDetails, accountno, productcode, admissionpkey);
            }
               )
        });

        $(function () {
            $("#VoucherType").change(function () {
                //var stateid = document.getElementById("Item2_State").value;

                var post = '@ViewBag.Posted';
                var vchrtype = document.getElementById("VoucherType").value;
                var TransactionDetails = document.getElementById("ActivityType").value;
                var admissionpkey = $('#AddmissionPkey').val();
                var productcode = document.getElementById("Product").value;
                $('voucherno').hide();
                var denominationstatus = '@ViewBag.denomination';
                if (denominationstatus == 'Y') {
                    $('#cashdenomination').show();
                }
                else {
                    $('#cashdenomination').hide();
                }
                if (post == "2") {
                    $('#Transferdialog').dialog({
                        autoOpen: false,
                        width: 800,
                        height: 550,
                        resizable: false,
                        title: 'Batch Creation',
                        modal: true,
                        open: function (event, ui) {
                            $(this).load("@Url.Action("TransferBatchGeneration", "TransferBatchGeneration", new { area="FAS"})");
                        },
                        buttons: {

                        }
                    });
                }

                vouchertypeselection(vchrtype, TransactionDetails, admissionpkey, productcode, post);
                if (vchrtype == 3) {
                    var urlproduct = '@Url.Action("GetContraProductByActivityTypeInvestments", "TransactionReceiptsFirm")';
                    FillContraProductAndAccount(productcode, TransactionDetails, urlproduct);

                    @*var productcode = $('#ContraProduct').val();
                if (productcode != "") {
                    var urlaccount = '@Url.Action("GetContraAccountByActivityType", "TransactionReceipt")';

                    GetContraAccountNo(admissionpkey, productcode, urlaccount);
                }*@

                }
            });
        })

        $(function () {
            $("#ContraProduct").change(function () {
                var url = '@Url.Action("GetContraAccountByActivityTypeInvestment", "TransactionReceiptsFirm")';
                var productcode = $('#ContraProduct').val();
                GetContraAccountNo(productcode, 27, url);
            })
        })




        $(function () {
            $('#ContraAccountNo').focusout(
                function () {

                    var contraaccount = $('#ContraAccountNo').val();
                    var oBurl = '@Url.Action("GetMemberBalence", "TransactionReceipt")';
                    GetAccountbalance(contraaccount, oBurl);
                });


        });

        $(function () {

            //$("#Product").change(function () {
            //    $('#TempAccountNo').val('');
            //    debugger;
            //    var productcode = document.getElementById("Product").value;
            //    var admissionpkey = $('#AddmissionPkey').val();
            //    $("#AccountNo").empty();
            //    $('#AccountNo').append('<option value="0">--Select--</option>');
            //    $("#ActivityType").empty();
            //    $('#ActivityType').append('<option value="0">--Select--</option>');
            //    $('#VoucherDetails tbody').empty();
            //    //GetAccountDetails(productcode, admissionpkey);
            //    ApplyEditable();
            //}
            //    )
            //$("#Product").focusout(function () {
            //    //var stateid = document.getElementById("Item2_State").value;
            //    //;
            //    debugger;
            //    //var productcode = document.getElementById("Product").value;
            //    var productcode = 34;//document.getElementById("Product").value;
            //    var accountNo = $("#AccountNo option:selected").text(); //$('#AccountNo').val();
            //    $('#XML').val('');
            //    $("#TotalAmount").val(parseFloat(''));
            //    $('#Narration').val('');
            //    $('#CollectonAmount').val(parseFloat(''));
            //    //$("#AccountNo").empty();
            //    //$('#AccountNo').append('<option value="0">--Select--</option>');
            //    $("#ActivityType").empty();
            //    $('#ActivityType').append('<option value="0">@resInvestmentLables.select</option>');
            //    $('#VoucherDetails tbody').empty();
            //    //$('#TempAccountNo').val('');
            //    GetAccountDetails(productcode, accountNo);
            //}
            //   )


             $("#Product").change(function () {
                //var stateid = document.getElementById("Item2_State").value;
                //;
                debugger;
                //var productcode = document.getElementById("Product").value;
                var productcode = 34;//document.getElementById("Product").value;
                var accountNo = $("#AccountNo option:selected").text(); //$('#AccountNo').val();
                $('#XML').val('');
                $("#TotalAmount").val(parseFloat(''));
                $('#Narration').val('');
                $('#CollectonAmount').val(parseFloat(''));
                //$("#AccountNo").empty();
                //$('#AccountNo').append('<option value="0">--Select--</option>');
                $("#ActivityType").empty();
                $('#ActivityType').append('<option value="0">@resInvestmentLables.select</option>');
                $('#VoucherDetails tbody').empty();
                //$('#TempAccountNo').val('');
                GetAccountDetails(productcode, accountNo);
            }
               )
        });



        function AddFields() {

            var LedgerId = document.getElementById("Ledger").value;
            var product = document.getElementById("Product").value;

            var amount = $('#Amount').val();
            if (LedgerId == "0") {
                $('#Ledger').focus();
                return false;
            }
            if (amount == 0 || amount == "") {
                $('#Amount').focus();
                return false;
            }
            var activityid = $('#ActivityType').val();
            var LedgerDescription = $('#Ledger option:selected').text();
            var selectedLedgerId = $('#Ledger').val();
            var isLedgerExists = false;
            $('#VoucherDetails tbody tr').each(function () {

                var existedledgerid = ($(this).find('input[id="ledgerid"]').val());
                if (selectedLedgerId == existedledgerid) {
                    sweetAlert('@resFasMessages.LedgeralreadyExists');
                    isLedgerExists = true;
                }
            });
            if (!isLedgerExists) {
                var Urlothercharges = '@Url.Action("GetOtherChargeDetails", "TransactionReceipt")';
                var UrladdtoList = '@Url.Action("AddOtherChargestoTransactionTypeMasterDTOList", "TransactionReceipt")';
                FillOtherCharges(LedgerId, product, Urlothercharges, amount, LedgerDescription, UrladdtoList, activityid);
            }


            @*var activityid = $('#ActivityType').val();
        $.ajax({
            type: "Get",
            url: '@Url.Action("AddOtherChargestoTransactionTypeMasterDTOList", "TransactionReceipt")',
            data: { activityid:activityid, ledgerid:LedgerId, ledgerdescription:LedgerDescription,transrollid:1, transrolldescription:"abc", Amount:amount },
            datatype: "json",
            success: function (result) {
            }
        });*@
        };

        function AddDenamination() {
            $('#denominationClose').trigger('click');
        }
        function HideOutstandingColumn() {

            $('#tdoutstandingamount').hide();
        };
        function ShowOutstandingColumn() {

            $('#tdoutstandingamount').show();
        };
        function GetVoucherPrepareByActivityid(TransactionDetails, accountno, productcode, InvestType) {
            debugger;
            //document.getElementById("AccountNo").value = accountno;
            //var admissionno = $('#Admissionno').val();
            //var admissionnopkey = $('#AddmissionPkey').val();
            var name = $('#MemberName').val();
            var accountname = $('#AccountNo option:selected').text();
            var activity = $('#ActivityType option:selected').text();
            var activityId = $('#ActivityType option:selected').val();
            var formid = $('#formid').val();
            $("#TotalAmount").val('0.00');
            $('#CollectonAmount').val('0.00');
            var totalAmount = 0;
            var narration = "";
            var xml = "";
            $('#btnerrordetails').hide();

            if (accountno == "0") {
                return false;
            }
            var IsInterestEditable = false;
            //var admissionno = $('#Admissionno').val();
            $.ajax({
                type: "Get",
                url: '@Url.Action("GetVoucherPrepareDetails", "TransactionReceiptsFirm")',

                data: { TransactionType: TransactionDetails, AccountCode: accountno, productId: productcode, activityId: activityId, FormId: formid, InvestType: InvestType },


                datatype: "json",
                success: function (result) {
                    debugger;
                    var listVoucherDetails = result.object1;
                    //var outstandingresults = result.object1;
                    //var outresults = result.object1;
                    //var ltmtinstallments = result.object3;
                    var errormessage = result.object2;
                    var dterrorslist = result.object5;
                    //var ModuleAndVoucherVerification = result.object6;
                    var accountname = $("#AccountNo option:selected").text();
                    FillErrorsList(dterrorslist);
                    if (dterrorslist != null && dterrorslist.length > 0) {
                        sweetAlert('@resFasMessages.CheckIssuesforParticularAccount');
                        $('#btnerrordetails').show();
                        $('#btnerrordetails').click();
                    }
                    if (errormessage != null && errormessage != "") {
                        sweetAlert(errormessage);
                        $('#btnerrordetails').show();

                        return false;
                    }
                    //if (ModuleAndVoucherVerification != null && ModuleAndVoucherVerification != "") {
                    //    sweetAlert(ModuleAndVoucherVerification);
                    //    $('#btnerrordetails').show();
                    //    return false;
                    //}
                    if (listVoucherDetails != null && listVoucherDetails != false) {
                        var transactionid = listVoucherDetails[0].TransactionID;
                        debugger;
                        if (transactionid != 0) {
                            $("#VoucherDetails tbody").empty();
                            var sumamount = 0;
                            var xmlDocument = $.parseXML("<root/>");
                            xml += "<Temp>";
                            var Docxml = $($.parseXML('<?xml version="1.0" encoding="utf-8" ?><root />'));
                            for (var row = 0; row < listVoucherDetails.length; row++) {

                                sumamount += listVoucherDetails[row].MaxAmount;

                                var interesteditable = listVoucherDetails[row].IsInterestEditable;
                                IsInterestEditable = interesteditable;

                                var transrollid = listVoucherDetails[row].TransrollID;
                                debugger;
                                if (formid == 16005 || formid == 16004) {
                                    if (transrollid != 850) {
                                        var $tr = $('<tr>').append(
                                            $('<td>').html("<input id='hdnLedgerID' type='hidden' value=" + (listVoucherDetails[row].Ledger) + ">" + listVoucherDetails[row].LedgerDescription),

                                            $('<td>').html("<input id='MaxAmounttext' class='form-control input-xs' type='number' min='0' max='9999999999' style='text-align:right' maxlength='10' value=" + Number(listVoucherDetails[row].MaxAmount).toFixed(2) + " disabled='disabled'>"),
                                            //$('<td>').html("<input id='MaxAmounttext' class='form-control input-xs' type='number' min='0' max='9999999999' style='text-align:right' maxlength='10' value=" + Number(listVoucherDetails[row].MaxAmount).toFixed(2) + " disabled='disabled'>"),
                                             //$('<td style="text-align:right">').text(listVoucherDetails[row].MaxAmount),
                                           //$('<td style="text-align:center">').html("<input id='transrollDesc' type='hidden' value=" + listVoucherDetails[row].TransrollDescription + "><input id='transactionid' type='hidden' value=" + listVoucherDetails[row].TransactionID + "><input id='transrollid' type='hidden' value=" + listVoucherDetails[row].TransrollID + "><input id='ledgerid' type='hidden' value=" + listVoucherDetails[row].Ledger + "><input id='vouchertext' class='form-control input-xs applydecimal' type='text'  style='text-align:right' maxlength='10' autocomplete='off' value=" + Number(listVoucherDetails[row].Amount).toFixed(2) + " onchange='ChangeAmount(this)' onkeyup='return AllowNumbersWithTwoDecimals(this)'>"),
                                           $('<td style="text-align:center">').html("<input id='transrollDesc' type='hidden' value=" + listVoucherDetails[row].TransrollDescription + "><input id='transactionid' type='hidden' value=" + listVoucherDetails[row].TransactionID + "><input id='transrollid' type='hidden' value=" + listVoucherDetails[row].TransrollID + "><input id='ledgerid' type='hidden' value=" + listVoucherDetails[row].Ledger + "><input id='vouchertext' class='form-control input-xs applydecimal' type='text'  style='text-align:right' maxlength='10' autocomplete='off' value=" + Number(listVoucherDetails[row].Amount).toFixed(2) + " onchange='ChangeAmount(this)'>"),
                                            $('<td hidden>').html("<input id='ledgerdesc' type='hidden' value=" + listVoucherDetails[row].LedgerDescription + ">"),
                                            //$('<td hidden >').html("<input id='minAmount' type='hidden' value=" + listVoucherDetails[row].MinAmount + ">"),
                                            $('<td hidden >').html("<input id='maxAmount' type='hidden' value=" + Number(listVoucherDetails[row].MaxAmount).toFixed(2) + ">"),
                                            $('<td hidden >').html("<input id='Producttypeid' type='hidden' value=" + (listVoucherDetails[row].ProductTypeID) + ">"),
                                            $('<td hidden >').html("<input id='InterestEditable' type='hidden' value=" + (listVoucherDetails[row].IsInterestEditable) + ">"),
                                             $('<td hidden >').html("<input id='IsAllowExcessAmount' type='hidden' value=" + (listVoucherDetails[row].IsAllowExcessAmount) + ">"),
                                             $('<td hidden >').html("<input id='maxLimitAmount' type='hidden' value=" + Number(listVoucherDetails[row].MaxAmount).toFixed(2) + ">")
                                            ).appendTo('#VoucherDetails tbody');
                                    }
                                    else {
                                        var $tr = $('<tr>').append(
                                            $('<td>').html("<input id='hdnLedgerID' type='hidden' value=" + (listVoucherDetails[row].Ledger) + ">" + listVoucherDetails[row].LedgerDescription),

                                            $('<td>').html("<input id='MaxAmounttext' class='form-control input-xs' type='number' min='0' max='9999999999' style='text-align:right' maxlength='10' value=" + Number(listVoucherDetails[row].MaxAmount).toFixed(2) + " disabled='disabled'>"),
                                            //$('<td>').html("<input id='MaxAmounttext' class='form-control input-xs' type='number' min='0' max='9999999999' style='text-align:right' maxlength='10' value=" + Number(listVoucherDetails[row].MaxAmount).toFixed(2) + " disabled='disabled'>"),
                                             //$('<td style="text-align:right">').text(listVoucherDetails[row].MaxAmount),
                                           //$('<td style="text-align:center">').html("<input id='transrollDesc' type='hidden' value=" + listVoucherDetails[row].TransrollDescription + "><input id='transactionid' type='hidden' value=" + listVoucherDetails[row].TransactionID + "><input id='transrollid' type='hidden' value=" + listVoucherDetails[row].TransrollID + "><input id='ledgerid' type='hidden' value=" + listVoucherDetails[row].Ledger + "><input id='vouchertext' class='form-control input-xs applydecimal' type='text'  style='text-align:right' maxlength='10' autocomplete='off' value=" + Number(listVoucherDetails[row].Amount).toFixed(2) + " onchange='ChangeAmount(this)' onkeyup='return AllowNumbersWithTwoDecimals(this)'>"),
                                           $('<td style="text-align:center">').html("<input id='transrollDesc' type='hidden' value=" + listVoucherDetails[row].TransrollDescription + "><input id='transactionid' type='hidden' value=" + listVoucherDetails[row].TransactionID + "><input id='transrollid' type='hidden' value=" + listVoucherDetails[row].TransrollID + "><input id='ledgerid' type='hidden' value=" + listVoucherDetails[row].Ledger + "><input id='vouchertext' class='form-control input-xs applydecimal' type='text'  style='text-align:right' maxlength='10' autocomplete='off' value=" + Number(listVoucherDetails[row].Amount).toFixed(2) + " readonly='readonly'>"),
                                            $('<td hidden>').html("<input id='ledgerdesc' type='hidden' value=" + listVoucherDetails[row].LedgerDescription + ">"),
                                            //$('<td hidden >').html("<input id='minAmount' type='hidden' value=" + listVoucherDetails[row].MinAmount + ">"),
                                            $('<td hidden >').html("<input id='maxAmount' type='hidden' value=" + Number(listVoucherDetails[row].MaxAmount).toFixed(2) + ">"),
                                            $('<td hidden >').html("<input id='Producttypeid' type='hidden' value=" + (listVoucherDetails[row].ProductTypeID) + ">"),
                                            $('<td hidden >').html("<input id='InterestEditable' type='hidden' value=" + (listVoucherDetails[row].IsInterestEditable) + ">"),
                                             $('<td hidden >').html("<input id='IsAllowExcessAmount' type='hidden' value=" + (listVoucherDetails[row].IsAllowExcessAmount) + ">"),
                                             $('<td hidden >').html("<input id='maxLimitAmount' type='hidden' value=" + Number(listVoucherDetails[row].MaxAmount).toFixed(2) + ">")
                                            ).appendTo('#VoucherDetails tbody');
                                    }
                                }
                                else if (formid == 16003) {
                                    var $tr = $('<tr>').append(
                                        $('<td>').html("<input id='hdnLedgerID' type='hidden' value=" + (listVoucherDetails[row].Ledger) + ">" + listVoucherDetails[row].LedgerDescription),

                                        $('<td>').html("<input id='MaxAmounttext' class='form-control input-xs' type='number' min='0' max='9999999999' style='text-align:right' maxlength='10' value=" + Number(listVoucherDetails[row].MaxAmount).toFixed(2) + " disabled='disabled'>"),
                                        //$('<td>').html("<input id='MaxAmounttext' class='form-control input-xs' type='number' min='0' max='9999999999' style='text-align:right' maxlength='10' value=" + Number(listVoucherDetails[row].MaxAmount).toFixed(2) + " disabled='disabled'>"),
                                         //$('<td style="text-align:right">').text(listVoucherDetails[row].MaxAmount),
                                       //$('<td style="text-align:center">').html("<input id='transrollDesc' type='hidden' value=" + listVoucherDetails[row].TransrollDescription + "><input id='transactionid' type='hidden' value=" + listVoucherDetails[row].TransactionID + "><input id='transrollid' type='hidden' value=" + listVoucherDetails[row].TransrollID + "><input id='ledgerid' type='hidden' value=" + listVoucherDetails[row].Ledger + "><input id='vouchertext' class='form-control input-xs applydecimal' type='text'  style='text-align:right' maxlength='10' autocomplete='off' value=" + Number(listVoucherDetails[row].Amount).toFixed(2) + " onchange='ChangeAmount(this)' onkeyup='return AllowNumbersWithTwoDecimals(this)'>"),
                                       $('<td style="text-align:center">').html("<input id='transrollDesc' type='hidden' value=" + listVoucherDetails[row].TransrollDescription + "><input id='transactionid' type='hidden' value=" + listVoucherDetails[row].TransactionID + "><input id='transrollid' type='hidden' value=" + listVoucherDetails[row].TransrollID + "><input id='ledgerid' type='hidden' value=" + listVoucherDetails[row].Ledger + "><input id='vouchertext' class='form-control input-xs applydecimal' type='text'  style='text-align:right' maxlength='10' autocomplete='off' value=" + Number(listVoucherDetails[row].Amount).toFixed(2) + " onchange='ChangeAmount(this)' onkeyup='return AllowNumbersWithTwoDecimals(this)'>"),
                                        $('<td hidden>').html("<input id='ledgerdesc' type='hidden' value=" + listVoucherDetails[row].LedgerDescription + ">"),
                                        //$('<td hidden >').html("<input id='minAmount' type='hidden' value=" + listVoucherDetails[row].MinAmount + ">"),
                                        $('<td hidden >').html("<input id='maxAmount' type='hidden' value=" + Number(listVoucherDetails[row].MaxAmount).toFixed(2) + ">"),
                                        $('<td hidden >').html("<input id='Producttypeid' type='hidden' value=" + (listVoucherDetails[row].ProductTypeID) + ">"),
                                        $('<td hidden >').html("<input id='InterestEditable' type='hidden' value=" + (listVoucherDetails[row].IsInterestEditable) + ">"),
                                         $('<td hidden >').html("<input id='IsAllowExcessAmount' type='hidden' value=" + (listVoucherDetails[row].IsAllowExcessAmount) + ">"),
                                         $('<td hidden >').html("<input id='maxLimitAmount' type='hidden' value=" + Number(listVoucherDetails[row].MaxAmount).toFixed(2) + ">")
                                        ).appendTo('#VoucherDetails tbody');
                                }
                                else {
                                    var $tr = $('<tr>').append(
                                        $('<td>').html("<input id='hdnLedgerID' type='hidden' value=" + (listVoucherDetails[row].Ledger) + ">" + listVoucherDetails[row].LedgerDescription),
                                        //$('<td style="text-align:right">').text(listVoucherDetails[row].MinAmount),

                                        $('<td>').html("<input id='MaxAmounttext' class='form-control input-xs' type='number' min='0' max='9999999999' style='text-align:right' maxlength='10' value=" + Number(listVoucherDetails[row].MaxAmount).toFixed(2) + " disabled='disabled' onchange='ChangeAmountForEditable(this)' >"),
                                        //$('<td>').html("<input id='MaxAmounttext' class='form-control input-xs' type='number' min='0' max='9999999999' style='text-align:right' maxlength='10' value=" + Number(listVoucherDetails[row].MaxAmount).toFixed(2) + " disabled='disabled'>"),
                                         //$('<td style="text-align:right">').text(listVoucherDetails[row].MaxAmount),
                                       $('<td style="text-align:center">').html("<input id='transrollDesc' type='hidden' value=" + listVoucherDetails[row].TransrollDescription + "><input id='transactionid' type='hidden' value=" + listVoucherDetails[row].TransactionID + "><input id='transrollid' type='hidden' value=" + listVoucherDetails[row].TransrollID + "><input id='ledgerid' type='hidden' value=" + listVoucherDetails[row].Ledger + "><input id='vouchertext' class='form-control input-xs applydecimal' type='text'  style='text-align:right' maxlength='10' autocomplete='off' value=" + Number(listVoucherDetails[row].Amount).toFixed(2) + " onchange='ChangeAmount(this)' onkeyup='return AllowNumbersWithTwoDecimals(this)'>"),
                                        $('<td hidden>').html("<input id='ledgerdesc' type='hidden' value=" + listVoucherDetails[row].LedgerDescription + ">"),
                                        //$('<td hidden >').html("<input id='minAmount' type='hidden' value=" + listVoucherDetails[row].MinAmount + ">"),
                                        $('<td hidden >').html("<input id='maxAmount' type='hidden' value=" + Number(listVoucherDetails[row].MaxAmount).toFixed(2) + ">"),
                                        $('<td hidden >').html("<input id='Producttypeid' type='hidden' value=" + (listVoucherDetails[row].ProductTypeID) + ">"),
                                        $('<td hidden >').html("<input id='InterestEditable' type='hidden' value=" + (listVoucherDetails[row].IsInterestEditable) + ">"),
                                         $('<td hidden >').html("<input id='IsAllowExcessAmount' type='hidden' value=" + (listVoucherDetails[row].IsAllowExcessAmount) + ">"),
                                         $('<td hidden >').html("<input id='maxLimitAmount' type='hidden' value=" + Number(listVoucherDetails[row].MaxAmount).toFixed(2) + ">")
                                        ).appendTo('#VoucherDetails tbody');
                                }
                                //if (listVoucherDetails[row].ProductTypeID == 3) {

                                //    if (interesteditable) {

                                //
                                //        if (transrollid != 1) {

                                //            $('#MaxAmounttext').attr('disabled', false);
                                //        }
                                //    }
                                //}

                                $('#ProductTypeId').val(listVoucherDetails[row].ProductTypeID);
                                if (listVoucherDetails[row].ProductTypeID == 3) {

                                    if (listVoucherDetails[row].ActivityType == 8) {
                                        document.getElementById("CollectonAmount").value = sumamount;
                                        $('#CollectonAmount').prop('disabled', true);
                                        document.getElementById("VoucherType").value = 2;
                                        $('#VoucherType').val(2);
                                        $('#VoucherType').trigger('change');
                                        // $('#VoucherType').prop('disabled', true);
                                        $('#batchno').hide();
                                        $('#batchamount').hide();
                                        $('#checkno').hide();

                                        $('#checkdate').hide();
                                    }
                                    else {
                                        $('#VoucherType').val('');
                                        // $('#VoucherType').prop('disabled', false);
                                    }
                                    $('#viewdemand').show();
                                    $('#viewinstallmentchart').show();
                                    $('#collectionamountid').show();


                                    // $('#editinstallmentchart').show();
                                    $('#btnviewstorages').show();
                                }
                                else {
                                    //$('#collectionAmountID').hide();
                                }
                                if (transactionid == 16013) {
                                    $('#TermInvestmentIntrestPayment').hide();
                                    $('#InvestmentForeclosure').hide();
                                    $('#InvestmentClosure').show();
                                }
                                else if (transactionid == 16014) {
                                    $('#InvestmentClosure').hide();
                                    $('#TermInvestmentIntrestPayment').hide();
                                    $('#InvestmentForeclosure').show();
                                }
                                else if (transactionid == 16012) {
                                    $('#TermInvestmentIntrestPayment').show();
                                    $('#InvestmentForeclosure').hide();
                                    $('#InvestmentClosure').hide();
                                }
                                else {
                                    $('#InvestmentForeclosure').hide();
                                    $('#InvestmentClosure').hide();
                                    $('#TermInvestmentIntrestPayment').hide();
                                }

                                debugger;
                                if (transactionid == 10011) {
                                    $('#viewdemand').hide();
                                    $('#viewinstallmentchart').hide();
                                    $('#editinstallmentchart').hide();

                                    $('#InvestmentForeclosure').hide();

                                    $('#InvestmentClosure').hide();
                                }
                                else if (transactionid == 90012) {
                                    $('#CollectonAmount').prop('readonly', true);
                                }
                                else if (transactionid == 11012) {

                                    $('#CollectonAmount').prop('readonly', true);
                                }
                                else if (transactionid == 11015) {

                                    $('#CollectonAmount').prop('readonly', true);

                                }
                                else if (transactionid == 90010) {
                                    //$('#CollectonAmount').prop('readonly', true);
                                    $('#InstallmentClosure').show();
                                }
                                else if (transactionid == 30011) {
                                    $('#NarrationForSBPassBookPrint').show();
                                }
                                else {
                                    $('#CollectonAmount').prop('readonly', false);

                                }

                                xml += "<row>";
                                xml += "<LedgerID>" + listVoucherDetails[row].Ledger + "</LedgerID>";
                                xml += "<LedgerDescription>" + listVoucherDetails[row].LedgerDescription + "</LedgerDescription>";
                                xml += "<TransrollID>" + listVoucherDetails[row].TransrollID + "</TransrollID>";
                                xml += "<Amount>" + Number(listVoucherDetails[row].Amount).toFixed(2) + "</Amount>";
                                xml += "<MaxAmount>" + Number(listVoucherDetails[row].MaxAmount).toFixed(2) + "</MaxAmount>";
                                xml += "<TransactionID>" + listVoucherDetails[row].TransactionID + "</TransactionID>";
                                xml += "<TransrollDescription>" + listVoucherDetails[row].TransrollDescription + "</TransrollDescription>";
                                xml += "</row>";
                                var tot = parseFloat(listVoucherDetails[row].Amount) + parseFloat(totalAmount);

                                totalAmount = tot;
                                //narration += listVoucherDetails[row].LedgerDescription + "-" + listVoucherDetails[row].Amount + " ";
                            }
                            ApplyEditable();
                            xml += "</Temp>";
                            //narration += name + "/Admission no " + admissionno + "/Account no " + accountname + "";

                            $('#XML').val(xml);
                            $("#TotalAmount").val(Number(totalAmount).toFixed(2));
                            var amount = Number(totalAmount).toFixed(2);
                            //var admissionNo = $('#admissionNo').val();
                            narration += "Being " + activity + " from " + " /Account no. " + accountname + " on credit for INR" + amount;
                            GetAmountDecsription(totalAmount);
                            $('#Narration').val(narration);
                            $('#CollectonAmount').val(Number(totalAmount).toFixed(2));
                            //GetAmountDecsription(totalAmount);
                        }
                    }
                    else {

                        @*sweetAlert("@resFasMessages.NoData");*@
                        return false;
                        //swal({ title: "Unite", text: "<span><b>Admission No. does not exists</b></span>", html: true });
                    }

                }
            })

        }
        function ApplyEditable() {
            var repaymentid = $('#RepaymentTypeId').val();
            debugger;
            if (repaymentid == 3 || repaymentid == 4) {

                $('#VoucherDetails tbody tr').each(function () {
                    debugger;
                    var transrolldesc = $(this).find('input[id="transrollDesc"]').val();
                    var transrollid = $(this).find('input[id="transrollid"]').val();
                    var ledgerdesc = $(this).find('input[id="ledgerdesc"]').val();
                    var ledgerid = $(this).find('input[id="ledgerid"]').val();
                    var amount = $(this).find('input[id="vouchertext"]').val();
                    var maxamount = $(this).find('input[id="maxAmount"]').val();
                    var transactionid = $(this).find('input[id="transactionid"]').val();
                    var producttypeid = $(this).find('input[id="Producttypeid"]').val();
                    var InterestEditable = $(this).find('input[id="InterestEditable"]').val();
                    var isallowexcessamount = $(this).find('input[id="IsAllowExcessAmount"]').val();


                    if (producttypeid == 3 && InterestEditable) {
                        if (isallowexcessamount != "false") {
                            $(this).find('input[id="MaxAmounttext"]').attr('disabled', false);
                        }
                        else {
                            if (transrollid != 1) {
                                $(this).find('input[id="MaxAmounttext"]').attr('disabled', false);
                            }
                        }
                    }
                });
            }
        }

        function ApplyDecimals() {
            $('#installmentdetails tbody tr').each(function () {

                var cprincipal = $(this).find('#txtPrincipal').val();
                var cinterest = $(this).find('#txtCinterest').val();
                var cpenalinteres = $(this).find('#txtCPenalinterest').val();
                var ciod = $(this).find('#txtCiod').val();
                var dprinc = $(this).find('#txtDPrincipal').val();
                var dint = $(this).find('#txtDinterest').val();
                var dpenal = $(this).find('#txtDPenalinterest').val();
                var diod = $(this).find('#txtDiod').val();
                var dothers = $(this).find('#txtDothers').val();
                var cothers = $(this).find('#txtCothers').val();

                $(this).find('#txtPrincipal').val(Number(cprincipal).toFixed(2));
                $(this).find('#txtCinterest').val(Number(cinterest).toFixed(2));
                $(this).find('#txtCPenalinterest').val(Number(cpenalinteres).toFixed(2));
                $(this).find('#txtCiod').val(Number(ciod).toFixed(2));
                $(this).find('#txtDPrincipal').val(Number(dprinc).toFixed(2));
                $(this).find('#txtDinterest').val(Number(dint).toFixed(2));
                $(this).find('#txtDPenalinterest').val(Number(dpenal).toFixed(2));
                $(this).find('#txtDiod').val(Number(diod).toFixed(2));

                $(this).find('#txtDothers').val(Number(dothers).toFixed(2));
                $(this).find('#txtCothers').val(Number(cothers).toFixed(2));

            });
        }
        function FillInstallments(ltmtlist, IsInterestEditable) {
            if (ltmtlist != null && ltmtlist.length > 0) {
                var principal = 0;
                var colletedprinicpal = 0;
                var interest = 0;
                var collectedinterest = 0;
                var penalinterest = 0;
                var collectedpenalinterest = 0;
                var iod = 0;
                var collectediod = 0;

                for (var rc = 0; rc < ltmtlist.length; rc++) {

                    principal += parseFloat(ltmtlist[rc].Principal);
                    interest += parseFloat(ltmtlist[rc].Interest);
                    penalinterest += parseFloat(ltmtlist[rc].PenalInterest);
                    iod += parseFloat(ltmtlist[rc].IOD);
                    var $tr = $('<tr>').append(
                         $('<td> <input type="checkbox" id=cbid_' + rc + ' class="cb1" onclick="GetTotalCollectionAmount();" style="opacity:1;position:Static"></td>'),
                                           $('<td id=Dprincipal>').html("<input id='txtDPrincipal' class='form-control input-xs' type='number' min='0' max='" + ltmtlist[rc].Principal + "' style='text-align:right' maxlength='10' value=" + ltmtlist[rc].Principal + " onblur='UpdateAmountAfterEdit(false)' disabled='disabled' >"),
                                           $('<td id=Cprincipal >').html("<input id='txtPrincipal' class='form-control input-xs' type='number' min='0' max='" + ltmtlist[rc].Principal + "' style='text-align:right' maxlength='10' value=" + 0.00 + " onblur='UpdateAmountAfterEdit(false)' disabled='disabled' >"),
                                            $('<td id=Dinterest>').html("<input id='txtDinterest' class='form-control input-xs' type='number' min='0' max='" + ltmtlist[rc].Interest + "' style='text-align:right' maxlength='10' value=" + ltmtlist[rc].Interest + " onblur='UpdateAmountAfterEdit(false)'  disabled='disabled'>"),
                                              $('<td id=cinterest>').html("<input id='txtCinterest' class='form-control input-xs' type='number' min='0' max='" + ltmtlist[rc].Interest + "' style='text-align:right' maxlength='10' value=" + 0.00 + " onblur='UpdateAmountAfterEdit(false)'  disabled='disabled'>"),

                                               $('<td id=DPenalinterest>').html("<input id='txtDPenalinterest' class='form-control input-xs' type='number' min='0' max='" + ltmtlist[rc].PenalInterest + "' style='text-align:right' maxlength='10' value=" + ltmtlist[rc].PenalInterest + " onblur='UpdateAmountAfterEdit(false)'  disabled='disabled'>"),
                                              $('<td id=cpenalinterest>').html("<input id='txtCPenalinterest' class='form-control input-xs' type='number' min='0' max='" + ltmtlist[rc].PenalInterest + "' style='text-align:right' maxlength='10' value=" + 0.00 + " onblur='UpdateAmountAfterEdit(false)'  disabled='disabled'>"),

                                               $('<td id=Diod>').html("<input id='txtDiod' class='form-control input-xs' type='number' min='0' max='" + ltmtlist[rc].IOD + "' style='text-align:right' maxlength='10' value=" + ltmtlist[rc].IOD + " onblur='UpdateAmountAfterEdit(false)'  disabled='disabled'>"),
                                              $('<td id=ciod>').html("<input id='txtCiod' class='form-control input-xs' type='number' min='0' max='" + ltmtlist[rc].IOD + "' style='text-align:right' maxlength='10' value=" + 0.00 + " onblur='UpdateAmountAfterEdit(false)'  disabled='disabled'>"),
                                               $('<td id=Dothers>').html("<input id='txtDothers' class='form-control input-xs' type='number' min='0' max='" + ltmtlist[rc].Others + "' style='text-align:right' maxlength='10' value=" + ltmtlist[rc].Others + " onblur='UpdateAmountAfterEdit(false)'  disabled='disabled'>"),
                                              $('<td id=COthers>').html("<input id='txtCothers' class='form-control input-xs' type='number' min='0' max='" + ltmtlist[rc].Others + "' style='text-align:right' maxlength='10' value=" + 0.00 + " onblur='UpdateAmountAfterEdit(false)'  disabled='disabled'>"),


                                               $('<td>').html("<input id='installmentduedate'   value=" + ConvertJsonDateStringinDDMMYYYY(ltmtlist[rc].Duedate) + " disabled='disabled' >")
                                              //$('<td>').text(ConvertJsonDateStringinDDMMYYYY(ltmtlist[rc].Duedate))
                                           ).appendTo('#installmentdetails tbody');
                }
                DisableTextFields(IsInterestEditable);
                ApplyDecimals();
            }
        }
        $(function AdjustmentForLTCollections() {
            $('#txtcollectionamountfrominstallments').focusout(function () {
                var isFromCollectionAmountLeave = true;
                UpdateAmountAfterEdit(isFromCollectionAmountLeave);
            });

            ApplyDecimals();

        })


        function UpdateAmountAfterEdit(isFromCollectionAmountLeave) {
            var collectionamount = $('#txtcollectionamountfrominstallments').val();
            collectionamount = Number(parseFloat(collectionamount)).toFixed(2);
            if (!isFromCollectionAmountLeave) {
                $('#installmentdetails tbody tr').each(function () {

                    $(this).find('#txtPrincipal').val('0.00');
                    $(this).find('#txtCinterest').val('0.00');
                    $(this).find('#txtCPenalinterest').val('0.00');
                    $(this).find('#txtCiod').val('0.00');
                    $(this).find('#txtCothers').val('0.00');
                    $(this).find('input[type="chekcbox"]').attr('checked', false);
                });
            }

            if (collectionamount > 0) {
                var transactionntypelist = "";
                $.ajax({
                    type: "Get",
                    url: '@Url.Action("GetAdjustmentOrderForLT", "TransactionReceipt")',
                    async: false,
                    datatype: "json",
                    success: function (result) {
                        transactionntypelist = result;
                    }
                });

                var count = 0;

                if (transactionntypelist != null && transactionntypelist != "" && transactionntypelist != "false") {

                    $('#installmentdetails tbody tr').each(function () {
                        count++;

                        var $this = $(this).find('input[id="cbid_' + count + '"]');
                        $(this).find('input[type="chekcbox"]').attr("checked", false);
                        var demandprincipal = parseFloat($(this).find('#txtDPrincipal').val());
                        var demandinterest = parseFloat($(this).find('#txtDinterest').val());
                        var demandpenalinterest = parseFloat($(this).find('#txtDPenalinterest').val());
                        var demandiod = parseFloat($(this).find('#txtDiod').val());
                        var demandothers = parseFloat($(this).find('#txtDothers').val());

                        for (var i = 0; i < transactionntypelist.length; i++) {
                            switch (transactionntypelist[i].TransrollId) {
                                case 1:
                                    if (demandprincipal > 0) {
                                        if (demandprincipal > collectionamount) {
                                            $(this).find('#txtPrincipal').val(collectionamount);
                                            collectionamount = Number(0).toFixed(2);
                                        }
                                        else {
                                            $(this).find('#txtPrincipal').val(demandprincipal);
                                            collectionamount = collectionamount - demandprincipal;
                                        }
                                        if ($(this).find('#txtPrincipal').val() > 0) {
                                            $(this).find('input[type="checkbox"]').attr("checked", "checked");
                                            GetTotalCollectionAmount();
                                        }
                                    }
                                    break;
                                case 2:
                                    if (demandinterest > 0) {
                                        if (demandinterest > collectionamount) {
                                            $(this).find('#txtCinterest').val(collectionamount);
                                            collectionamount = Number(0).toFixed(2);
                                        }
                                        else {
                                            $(this).find('#txtCinterest').val(demandinterest);
                                            collectionamount = collectionamount - demandinterest;
                                        }
                                        if ($(this).find('#txtCinterest').val() > 0) {
                                            $(this).find('input[type="checkbox"]').attr("checked", "checked");
                                            GetTotalCollectionAmount();
                                        }

                                    }
                                    break;
                                case 3:
                                    if (demandpenalinterest > 0) {
                                        if (demandpenalinterest > collectionamount) {
                                            $(this).find('#txtCPenalinterest').val(collectionamount);
                                            collectionamount = Number(0).toFixed(2);
                                        }
                                        else {
                                            $(this).find('#txtCPenalinterest').val(demandpenalinterest);
                                            collectionamount = collectionamount - demandpenalinterest;
                                        }
                                        if ($(this).find('#txtCPenalinterest').val() > 0) {
                                            $(this).find('input[type="checkbox"]').attr("checked", "checked");
                                            GetTotalCollectionAmount();
                                        }
                                    }
                                    break;
                                case 101:
                                    if (demandiod > 0) {
                                        if (demandiod > collectionamount) {
                                            $(this).find('#txtCiod').val(collectionamount);
                                            collectionamount = Number(0).toFixed(2);
                                        }
                                        else {

                                            $(this).find('#txtCiod').val(demandiod);
                                            collectionamount = collectionamount - demandiod;
                                        }
                                        if ($(this).find('#txtCiod').val() > 0) {
                                            $(this).find('input[type="checkbox"]').attr("checked", "checked");
                                            GetTotalCollectionAmount();
                                        }

                                    }
                                    break;
                                default:
                                    if (demandothers > 0) {
                                        if (demandothers > collectionamount) {
                                            $(this).find('#txtCothers').val(collectionamount);
                                            collectionamount = Number(0).toFixed(2);
                                        }
                                        else {
                                            $(this).find('#txtCothers').val(demandothers);
                                            collectionamount = collectionamount - demandothers;
                                        }
                                        if ($(this).find('#txtCothers').val() > 0) {
                                            $(this).find('input[type="checkbox"]').attr("checked", "checked");
                                            GetTotalCollectionAmount();
                                        }
                                    }
                                    break;

                            }
                        }

                    });
                }
                else {
                    $('#installmentdetails tbody tr').each(function () {
                        count++;

                        var $this = $(this).find('input[id="cbid_' + count + '"]');
                        $(this).find('input[type="chekcbox"]').attr("checked", false);
                        var demandprincipal = parseFloat($(this).find('#txtDPrincipal').val());
                        var demandinterest = parseFloat($(this).find('#txtDinterest').val());
                        var demandpenalinterest = parseFloat($(this).find('#txtDPenalinterest').val());
                        var demandiod = parseFloat($(this).find('#txtDiod').val());
                        var demandothers = parseFloat($(this).find('#txtDothers').val());


                        if (demandothers > 0) {
                            if (demandothers > collectionamount) {
                                $(this).find('#txtCothers').val(collectionamount);
                                collectionamount = Number(0).toFixed(2);
                            }
                            else {
                                $(this).find('#txtCothers').val(demandothers);
                                collectionamount = collectionamount - demandothers;
                            }
                            if ($(this).find('#txtCothers').val() > 0) {
                                $(this).find('input[type="checkbox"]').attr("checked", "checked");
                                GetTotalCollectionAmount();
                            }
                        }

                        if (demandpenalinterest > 0) {
                            if (demandpenalinterest > collectionamount) {
                                $(this).find('#txtCPenalinterest').val(collectionamount);
                                collectionamount = Number(0).toFixed(2);
                            }
                            else {
                                $(this).find('#txtCPenalinterest').val(demandpenalinterest);
                                collectionamount = collectionamount - demandpenalinterest;
                            }
                            if ($(this).find('#txtCPenalinterest').val() > 0) {
                                $(this).find('input[type="checkbox"]').attr("checked", "checked");
                                GetTotalCollectionAmount();
                            }
                        }

                        if (demandiod > 0) {
                            if (demandiod > collectionamount) {
                                $(this).find('#txtCiod').val(collectionamount);
                                collectionamount = Number(0).toFixed(2);
                            }
                            else {

                                $(this).find('#txtCiod').val(demandiod);
                                collectionamount = collectionamount - demandiod;
                            }
                            if ($(this).find('#txtCiod').val() > 0) {
                                $(this).find('input[type="checkbox"]').attr("checked", "checked");
                                GetTotalCollectionAmount();
                            }

                        }
                        if (demandinterest > 0) {
                            if (demandinterest > collectionamount) {
                                $(this).find('#txtCinterest').val(collectionamount);
                                collectionamount = Number(0).toFixed(2);
                            }
                            else {
                                $(this).find('#txtCinterest').val(demandinterest);
                                collectionamount = collectionamount - demandinterest;
                            }
                            if ($(this).find('#txtCinterest').val() > 0) {
                                $(this).find('input[type="checkbox"]').attr("checked", "checked");
                                GetTotalCollectionAmount();
                            }

                        }
                        if (demandprincipal > 0) {
                            if (demandprincipal > collectionamount) {
                                $(this).find('#txtPrincipal').val(collectionamount);
                                collectionamount = Number(0).toFixed(2);
                            }
                            else {
                                $(this).find('#txtPrincipal').val(demandprincipal);
                                collectionamount = collectionamount - demandprincipal;
                            }
                            if ($(this).find('#txtPrincipal').val() > 0) {
                                $(this).find('input[type="checkbox"]').attr("checked", "checked");
                                GetTotalCollectionAmount();
                            }
                        }


                    });
                }
            }
            else {
                $('#installmentdetails tbody tr').each(function () {

                    $(this).find('#txtPrincipal').val('0.00');
                    $(this).find('#txtCinterest').val('0.00');
                    $(this).find('#txtCPenalinterest').val('0.00');
                    $(this).find('#txtCiod').val('0.00');
                    $(this).find('#txtCothers').val('0.00');
                    $(this).find('input[type="chekcbox"]').attr('checked', false);
                });
            }
        }
        function ConvertGridDataToDemandListXML() {

            $('#DemandList').val('');
            var count = 0;
            var narration = "";
            var amount = 0;
            var xml = '<?xml version="1.0" encoding="utf-8"?>';
            xml = xml + '<Root><DemandDetails>';
            var AdmissionNoPkey = document.getElementById("AddmissionPkey").value;
            var productcode = document.getElementById("Product").value;
            var AccountCode = $("#AccountNo option:selected").text();
            var activity = $('#ActivityType option:selected').text();
            var admissionno = $('#Admissionno').val();
            var admissionnopkey = $('#AddmissionPkey').val();
            var name = $('#MemberName').val();
            $('#installmentdetails tbody tr').each(function () {

                // txtCothers txtDothers

                var demandprincipal = parseFloat($(this).find('#txtDPrincipal').val());
                var demandinterest = parseFloat($(this).find('#txtDinterest').val());
                var demandpenalinterest = parseFloat($(this).find('#txtDPenalinterest').val());
                var demandiod = parseFloat($(this).find('#txtDiod').val());
                var demandothers = parseFloat($(this).find('#txtDothers').val());

                var collectionamount = parseFloat($(this).find('input[ id="txtPrincipal"]').val());
                var collectedinterest = parseFloat($(this).find('input[ id="txtCinterest"]').val());
                var collectedpi = parseFloat($(this).find('input[ id="txtCPenalinterest"]').val());
                var collectediod = parseFloat($(this).find('input[ id="txtCiod"]').val());
                var collectedothers = parseFloat($(this).find('input[ id="txtCothers"]').val());

                var duedate = $(this).find('input[ id="installmentduedate"]').val();


                var $this = $(this).find('input[type="checkbox"]');

                if ($this.is(':checked')) {

                    count++;
                    xml += "<row" + count + ">";
                    xml += "<AdmissionNoPkey>" + AdmissionNoPkey + "</AdmissionNoPkey>";
                    xml += "<ProductSlno>" + productcode + "</ProductSlno>";
                    xml += "<AccountNo>" + AccountCode + "</AccountNo>";
                    xml += "<DemandPrinicpal>" + demandprincipal + "</DemandPrinicpal>";
                    xml += "<DemandInterest>" + demandinterest + "</DemandInterest>";
                    xml += "<DemandPenalInterest>" + demandpenalinterest + "</DemandPenalInterest>";
                    xml += "<DemandIOD>" + demandiod + "</DemandIOD>";
                    xml += "<DemandOthers>" + demandothers + "</DemandOthers>";
                    xml += "<CollectedPrincipal>" + collectionamount + "</CollectedPrincipal>";
                    xml += "<CollectedInterst>" + collectedinterest + "</CollectedInterst>";
                    xml += "<CollectedPenalInterest>" + collectedpi + "</CollectedPenalInterest>";
                    xml += "<CollectedIOD>" + collectediod + "</CollectedIOD>";
                    xml += "<CollectedOthers>" + collectedothers + "</CollectedOthers>";
                    xml += "<InstallmentDueDate>" + duedate + "</InstallmentDueDate>";
                    xml += "</row" + count + ">";
                    var tot = parseFloat(collectionamount) + parseFloat(collectedinterest) + parseFloat(collectedpi) + parseFloat(collectedothers) + parseFloat(collectediod);

                    totalAmount = tot;
                    GetAmountDecsription(parseFloat(totalAmount));
                }
            });


            xml = xml + '</DemandDetails></Root>';
            $('#DemandList').val(xml);
            totalAmount = 0;
            var voucherdetailsxml = '';
            voucherdetailsxml = "<Temp>";
            var xmlDocument = $.parseXML("<root/>");
            var Docxml = $($.parseXML('<?xml version="1.0" encoding="utf-8" ?><root />'));
            $('#VoucherDetails tbody tr').each(function () {
                var transrolldesc = $(this).find('input[id="transrollDesc"]').val();
                var transrollid = $(this).find('input[id="transrollid"]').val();
                var ledgerdesc = $(this).find('input[id="ledgerdesc"]').val();
                var ledgerid = $(this).find('input[id="ledgerid"]').val();
                var amount = $(this).find('input[id="vouchertext"]').val();
                var maxamount = $(this).find('input[id="maxAmount"]').val();
                var transactionid = $(this).find('input[id="transactionid"]').val();
                voucherdetailsxml += "<row>";
                voucherdetailsxml += "<LedgerID>" + ledgerid + "</LedgerID>";
                voucherdetailsxml += "<LedgerDescription>" + ledgerdesc + "</LedgerDescription>";
                voucherdetailsxml += "<TransrollID>" + transrollid + "</TransrollID>";
                voucherdetailsxml += "<Amount>" + Number(amount).toFixed(2) + "</Amount>";
                voucherdetailsxml += "<MaxAmount>" + Number(maxamount).toFixed(2) + "</MaxAmount>";
                voucherdetailsxml += "<TransactionID>" + transactionid + "</TransactionID>";
                voucherdetailsxml += "<TransrollDescription>" + transrolldesc + "</TransrollDescription>";
                voucherdetailsxml += "</row>";
                var tot = parseFloat(amount) + parseFloat(totalAmount);
                totalAmount = tot;

            })
            voucherdetailsxml += "</Temp>";
            $('#XML').val(voucherdetailsxml);
            amount = Number(totalAmount).toFixed(2);
            narration = "Being " + activity + " from " + name + " /Admission no. " + admissionno + " /Account no. " + AccountCode + " on credit for INR" + amount;
            $("#TotalAmount").val(Number(totalAmount).toFixed(2));
            GetAmountDecsription(totalAmount);
            $('#Narration').val(narration);

        }


        function ValidateAmountforEditing(row) {

            var txtid = row.id;
            var rowdetails = $(row).closest('tr');
            var textvalue = $(row).val();
            var principal = $(rowdetails).find('#cprincipal').text();
            var interest = $(rowdetails).find('#cinterest').text();
            var penalinterest = $(rowdetails).find('#cpenalinterest').text();
            var iod = $(rowdetails).find('#ciod').text();
            var others = $(rowdetails).find('#cothers').text();

            if (txtid == "txtPrincipal") {
                if (textvalue > 0) {
                    if (textvalue > principal) {
                        $(row).val('');
                        $(row).focus();
                        sweetAlert('@resFasMessages.CollectedPrincipalshouldnotbegreaterthanDemandPrincipal');
                        return;
                    }
                }
            }
            else if (txtid == "txtinterest") {
                if (textvalue > 0) {
                    if (textvalue > interest) {
                        $(row).val('');
                        $(row).focus();
                        sweetAlert('@resFasMessages.CollectedInterestshouldnotbegreaterthanDemandInterest');
                        return;
                    }
                }
            }
            else if (txtid == "txtpenalinterest") {
                if (textvalue > 0) {
                    if (textvalue > penalinterest) {
                        $(row).val('');
                        $(row).focus();
                        sweetAlert('@resFasMessages.CollectedPenalInterestshouldnotbegreaterthanDemandPenalInterest');
                        return;
                    }
                }
            }
            else if (txtid == "txtiod") {
                if (textvalue > 0) {
                    if (textvalue > iod) {
                        $(row).val('');
                        $(row).focus();
                        sweetAlert('@resFasMessages.CollectedIODshouldnotbegreaterthanDemandIOD');
                        return;
                    }
                }
            }
            else if (txtid == "txtothers") {
                if (textvalue > 0) {
                    if (textvalue > others) {
                        $(row).val('');
                        $(row).focus();
                        sweetAlert('@resFasMessages.CollectedOthersshouldnotbegreaterthanDemandOthers');
                        return;
                    }
                }
            }
            GetTotalCollectionAmount();

        }
        function GetTotalCollectionAmount() {
            var collectionamount = 0;
            var collectedinterest = 0;
            var collectedpi = 0;
            var collectediod = 0;
            var collectedothers = 0;

            var count = 0;
            var principal = 0;
            var selectedrowscount = 0;
            $('#installmentdetails tbody tr').each(function () {

                var $this = $(this).find('input[type="checkbox"]');
                count++;
                if ($this.is(':checked')) {
                    selectedrowscount++;
                    collectionamount += parseFloat($(this).find('input[ id="txtPrincipal"]').val());
                    collectedinterest += parseFloat($(this).find('input[ id="txtCinterest"]').val());
                    collectedpi += parseFloat($(this).find('input[ id="txtCPenalinterest"]').val());
                    collectediod += parseFloat($(this).find('input[ id="txtCiod"]').val());
                    collectedothers += parseFloat($(this).find('input[ id="txtCothers"]').val());
                    principal += parseFloat($(this).find('input[ id="txtprincipal"]').val());

                }
            });
            if (isNaN(collectionamount)) {
                collectionamount = 0.00;
            }
            if (isNaN(collectedinterest)) {
                collectedinterest = 0.00;
            }
            if (isNaN(collectedpi)) {
                collectedpi = 0.00;
            }
            if (isNaN(collectediod)) {
                collectediod = 0.00;
            }
            if (isNaN(collectedothers)) {
                collectedothers = 0.00;
            }
            $('#installmentdetails tfoot').find('#lblsumofcprincipal').text(Number(collectionamount).toFixed(2));
            $('#installmentdetails tfoot').find('#lblsumofcinterest').text(Number(collectedinterest).toFixed(2));
            $('#installmentdetails tfoot').find('#lblsumofcpi').text(Number(collectedpi).toFixed(2));
            $('#installmentdetails tfoot').find('#lblsumofciod').text(Number(collectediod).toFixed(2));
            $('#installmentdetails tfoot').find('#lblsumofohers').text(Number(collectedothers).toFixed(2));

        }
        function DisableTextFields(IsInterestEditable) {
            if (IsInterestEditable) {
                $('#installmentdetails tbody tr').each(function () {

                    var demandprincipal = parseFloat($(this).find('#txtDPrincipal').val());
                    var demandinterest = parseFloat($(this).find('#txtDinterest').val());
                    var demandpenalinterest = parseFloat($(this).find('#txtDPenalinterest').val());
                    var demandiod = parseFloat($(this).find('#txtDiod').val());
                    var demandothers = parseFloat($(this).find('#txtDothers').val());
                    //if(principal>0)
                    //{
                    //    $(this).find('input[ id="txtPrincipal"]').attr('disabled', false);
                    //}
                    //else
                    //{
                    //    $(this).find('input[ id="txtPrincipal"]').attr('disabled', true);
                    //}
                    if (demandinterest > 0) {
                        $(this).find('input[ id="txtDinterest"]').attr('disabled', false);
                    }
                    else {
                        $(this).find('input[ id="txtDinterest"]').attr('disabled', false);
                    }
                    if (demandpenalinterest > 0) {
                        $(this).find('input[ id="txtDPenalinterest"]').attr('disabled', false);
                    }
                    else {
                        $(this).find('input[ id="txtDPenalinterest"]').attr('disabled', false);
                    }
                    if (demandiod > 0) {
                        $(this).find('input[ id="txtDiod"]').attr('disabled', false);
                    }
                    else {
                        $(this).find('input[ id="txtDiod"]').attr('disabled', false);
                    }

                    if (demandiod > 0) {
                        $(this).find('input[ id="txtDothers"]').attr('disabled', false);
                    }
                    else {
                        $(this).find('input[ id="txtDothers"]').attr('disabled', false);
                    }
                })
            }

        }
        function DisableTextFields2(IsInterestEditable) {
            if (IsInterestEditable) {
                $('#installmentdetails tbody tr').each(function () {

                    var demandprincipal = parseFloat($(this).find('#txtDPrincipal').val());
                    var demandinterest = parseFloat($(this).find('#txtDinterest').val());
                    var demandpenalinterest = parseFloat($(this).find('#txtDPenalinterest').val());
                    var demandiod = parseFloat($(this).find('#txtDiod').val());
                    var demandothers = parseFloat($(this).find('#txtDothers').val());
                    //if(principal>0)
                    //{
                    //    $(this).find('input[ id="txtPrincipal"]').attr('disabled', false);
                    //}
                    //else
                    //{
                    //    $(this).find('input[ id="txtPrincipal"]').attr('disabled', true);
                    //}
                    if (demandinterest > 0) {
                        $(this).find('input[ id="txtDinterest"]').attr('disabled', false);
                    }
                    else {
                        $(this).find('input[ id="txtDinterest"]').attr('disabled', true);
                    }
                    if (demandpenalinterest > 0) {
                        $(this).find('input[ id="txtDPenalinterest"]').attr('disabled', false);
                    }
                    else {
                        $(this).find('input[ id="txtDPenalinterest"]').attr('disabled', true);
                    }
                    if (demandiod > 0) {
                        $(this).find('input[ id="txtDiod"]').attr('disabled', false);
                    }
                    else {
                        $(this).find('input[ id="txtDiod"]').attr('disabled', true);
                    }

                    if (demandiod > 0) {
                        $(this).find('input[ id="txtDothers"]').attr('disabled', false);
                    }
                    else {
                        $(this).find('input[ id="txtDothers"]').attr('disabled', true);
                    }
                })
            }

        }
        function DisableVoucherBodyFields(repaymenttype) {
            if (repaymenttype == 1 || repaymenttype == 2) {
                $('#VoucherDetails tbody tr').each(function () {
                    $(this).find('input[ id="maxAmount"]').attr('disabled', true);
                });
            }
        }

        function ValidateInstallments() {

            var narration = "";
            var count = 0;
            var selectedcount = 0;
            var others = 0;
            var principal = 0;
            var interest = 0;
            var penalinterest = 0;
            var iod = 0;
            $('#installmentdetails tbody tr').each(function () {

                var $this = $(this).find('input[type="checkbox"]');
                count++;
                if ($this.is(':checked')) {
                    selectedcount++;
                    var collectionamount = parseFloat($(this).find('input[ id="txtPrincipal"]').val());
                    var collectedinterest = parseFloat($(this).find('input[ id="txtCinterest"]').val());
                    var collectedpi = parseFloat($(this).find('input[ id="txtCPenalinterest"]').val());
                    var collectediod = parseFloat($(this).find('input[ id="txtCiod"]').val());
                    var collectedothers = parseFloat($(this).find('input[ id="txtCothers"]').val());
                    principal += collectionamount;
                    interest += collectedinterest;
                    penalinterest += collectedpi;
                    others += collectedothers;
                    iod += collectediod;
                    if (collectionamount == 0 && collectedinterest == 0 && collectedpi == 0 && collectediod == 0 && collectedothers == 0) {
                        sweetAlert('@resFasMessages.Amountshouldnotbe0');
                        return false;
                    }
                }

            });
            if (selectedcount == 0) {
                sweetAlert('@resFasMessages.Selectatleastoneinstallmenttosave');
                return false;
            }
            $('#VoucherDetails tbody tr').each(function () {
                var transrollid = $(this).find('input[id="transrollid"]').val();
                var amount = $(this).find('input[id="vouchertext"]').val();
                var maxamount = $(this).find('input[id="maxAmount"]').val();
                if (transrollid == 1) {
                    $(this).find('input[id="vouchertext"]').val(principal);
                }
                else if (transrollid == 2) {
                    $(this).find('input[id="vouchertext"]').val(interest);
                }
                else if (transrollid == 3) {
                    $(this).find('input[id="vouchertext"]').val(penalinterest);
                }
                else if (transrollid == 101) {
                    $(this).find('input[id="vouchertext"]').val(iod);
                }
            });
            $('#btncloseinstallmentdetails').click();
            var accountno = document.getElementById("AccountNo").value;
            var accountname = $("#AccountNo option:selected").text();
            var productcode = document.getElementById("Product").value;
            var admissionno = $('#Admissionno').val();
            $('#AccountPkey').val(accountno);
            var name = $('#MemberName').val();
            var amount = $('#ledgerid').val();
            var activity = $('#ActivityType option:selected').text();
            var totalAmount = principal + interest + iod + penalinterest;
            $("#TotalAmount").val(Number(totalAmount).toFixed(2));
            var total = Number(totalAmount).toFixed(2);
            narration += "Being " + activity + " from " + name + "/Admission no. " + admissionno + "/Account no. " + accountname + "on credit for" + total;

            GetAmountDecsription(parseFloat(totalAmount));
            $('#Narration').val(narration);
            $('#CollectonAmount').val(Number(totalAmount).toFixed(2));

        }


        function GetOpeningbalance() {
            $.ajax({
                url: '@Url.Action("GetCashbalance", "TransactionPayment")',
                type: 'Get',

                dataType: 'json',
                contentType: 'application/json',
                success: function (amount) {

                    if (amount == false) {

                        return false;
                    }
                    else {

                        document.getElementById("CashBalance").value = amount;
                    }
                }
            })
        }
        function GetAccountDetails(productcode, TempaccountNo) {
            debugger;
            document.getElementById("Product").value = productcode;
            var logindate = document.getElementById("TransactionDate").value;
            var InvestType = document.getElementById("InvestmentType").value;
            var formid = $('#formid').val();
            //$("#AccountNo").empty();
            //$('#AccountNo').append('<option value="0">-Select-</option>');
            $("#ActivityType").empty();
            $('#ActivityType').append('<option value="0">@resInvestmentLables.select</option>');
            $('#VoucherDetails tbody').empty();
            //$('#TempAccountNo').val('');
            if (TempaccountNo == "") {
                return false;
            }
            $.ajax({
                type: "Get",
                url: '@Url.Action("GetAllAccountsByProductcode", "TransactionReceiptsFirm")',
                data: { productId: productcode, accountNo: TempaccountNo, FormID: formid, investType: InvestType },

                datatype: "json",
                async: false,
                success: function (result) {
                    debugger;
                    var listAccounts = result.data;
                    var ListActivity = result.data2;
                    var ListOtherCharges = result.data3;
                    var depositType = result.data4;
                    if (listAccounts == false) {
                        sweetAlert("@resFasMessages.SelectProduct");
                        //$("#AccountNo").empty();
                        //$('#AccountNo').append('<option value="0">--Select--</option>');
                        $("#ActivityType").empty();
                        $('#ActivityType').append('<option value="0">@resInvestmentLables.select</option>');
                        $('#VoucherDetails tbody').empty();
                        return false;
                        //return Notify('Something Went Wrong!', 'top-full-width', '10000', 'danger', 'fa-bolt', true);
                    }

                    $("#Product").empty();
                    var id = 34;
                    var name = '@resInvestmentLables.Investment';
                    $("#Product").append("<option value=" + id + ">" + name + "</option>");

                    if (depositType != "") {
                        document.getElementById("InvestmentDepositType").value = depositType
                    }
                    debugger;
                    $("#AccountNo").empty();

                    if (listAccounts.empty) {

                        $("#AccountNo").append("<option value=0>@resInvestmentLables.select</option>");
                    }
                    else {
                        if (listAccounts.length == 1) {
                            $("#TempAccountNo").val(listAccounts[0].TempAccountNo);
                            var id = listAccounts[0].AccountID;
                            var name = listAccounts[0].AccountCode;
                            debugger;
                            $("#AccountNo").append("<option value=" + id + ">" + name + "</option>");
                            var urlpendingVchr = '@Url.Action("GetPendingLastTransaction", "TransactionReceiptsFirm")';
                            var formid = '@ViewBag.FormID';
                            var parallelrun = '@ViewBag.parallelrun';
                            
                            if(parallelrun == 1)
                            {
                            //Code Changed by Sunil start
                            //GetLastTransactionAndOpeningDate(id, productcode, logindate, urlpendingVchr, formid);
                            //Code Changed by Sunil End
                            }
                            else{
                                GetLastTransactionAndOpeningDate(id, productcode, logindate, urlpendingVchr, formid);
                            }

                            //GetLastTransactionAndOpeningDate(id, productcode, logindate, urlpendingVchr, formid);
                        }
                        else {
                            //$('#AccountNo').append('<option value="0">--Select--</option>');
                            //for (var k = 0; k < listAccounts.length; k++) {
                            //    //$("#AccountNo").append("<option>" + listAccounts[k].AccountCode + "</option>");
                            //    $("#AccountNo").append("<option value=" + listAccounts[k].AccountID + ">" + listAccounts[k].AccountCode + "</option>");
                            //}
                            $("#ActivityType").empty();
                            $('#ActivityType').append('<option value="0">@resInvestmentLables.select</option>');
                            $('#VoucherDetails tbody').empty();
                        }
                    }

                    if (ListActivity == false) {
                        sweetAlert("@resFasMessages.SelectActivity");
                        $('#VoucherDetails tbody').empty();
                        return false;
                        //return Notify('Something Went Wrong!', 'top-full-width', '10000', 'danger', 'fa-bolt', true);
                    }
                    $("#ActivityType").empty();

                    if (ListActivity.empty) {

                        $("#ActivityType").append("<option value=0>@resInvestmentLables.select</option>");
                    }
                    else {
                        if (ListActivity.length == 1) {
                            debugger;
                            var id = ListActivity[0].Activities.ActivityId;
                            var name = ListActivity[0].Activities.ActivityDescription;
                            $("#ActivityType").append("<option value=" + id + ">" + name + "</option>");
                            //$("#ActivityType").trigger('change');
                            var accountno = $("#AccountNo option:selected").text(); //$('#AccountNo').val();
                            debugger;
                            GetVoucherPrepareByActivityid(id, accountno, productcode, InvestType);
                        }
                        else {
                            $('#ActivityType').append('<option value="0">@resInvestmentLables.select</option>');
                            for (var i = 0; i < ListActivity.length; i++) {
                                $("#ActivityType").append("<option value=" + ListActivity[i].PKey + ">" + ListActivity[i].Activities.ActivityDescription + "</option>");
                            }
                        }
                    }


                    if (ListOtherCharges == false || ListOtherCharges.length == 0) {

                        $('#addtransctions').removeAttr("style");
                        $('#addtransctions').attr("style", "display:none");

                        return false;
                    }
                    else {
                        $('#addtransctions').removeAttr("style");
                        $('#addtransctions').attr("style", "color:blue");
                    }
                    $("#Ledger").empty();
                    $('#Ledger').append('<option value="0">-Select-</option>');
                    if (ListOtherCharges.empty) {

                        $("#Ledger").append("<option value=0>@resInvestmentLables.select</option>");
                    }
                    else {
                        for (var i = 0; i < ListOtherCharges.length; i++) {

                            //sweetAlert(listMandalMaster[i].DistrictCode);

                            $("#Ledger").append("<option value=" + ListOtherCharges[i].LedgerID + ">" + ListOtherCharges[i].LedgerDescription + "</option>");
                        }
                    }

                }
            })
            $('#viewAccountDetails').show();


        }



        $(function () {
            $("#ValueDate").focusout(function () {

                var valuedate = document.getElementById("ValueDate").value;
                var LoginDate = '@ViewBag.logindate';
                if (LoginDate < valuedate) {

                    swal({ title: '@resFasMessages.Valuedatemustbelessthanorequaltologindate' },
                        function (isConfirm) { if (isConfirm) { $('#ValueDate').focus(); } })

                    //sweetAlert("Value date must be less than or equal to login date");

                    $('#ValueDate').val(LoginDate);
                    //$('#Product').focus();
                }
            })
        });
        function ChangeAmount(row) {

            var hdnLedgrid = $(row).closest('tr').find('input[id="hdnLedgerID"]').val();
            var CurrSharAmt = $(row).closest('tr').find('input[id="vouchertext"]').val();
            var LimtAmt = $(row).closest('tr').find('input[id="maxAmount"]').val();
            var maxlimitamount = $(row).closest('tr').find('input[id="maxLimitAmount"]').val();
            var allowexcessamount = $(row).closest('tr').find('input[id="IsAllowExcessAmount"]').val();

            var parallelrun = '@ViewBag.parallelrun';
            debugger;
            if (hdnLedgrid == 72) {
                //if (LimtAmt <= 0) {
                // Added by Sunil
                if(parallelrun == 1)
                {
                }
                else{
                if (parseFloat(CurrSharAmt) > parseFloat(maxlimitamount)) {
                    $(row).closest('tr').find('input[id="vouchertext"]').val('');
                    $("#TotalAmount").val('0.00');
                    $('#CollectonAmount').val('0.00');
                    $('#AmountInWords').val('');
                    $('#Narration').val('');
                    totalAmount = 0; narration = "";
                    debugger;
                    sweetAlert('@resFasMessages.amountmustbeLessthanorequaltomaxamount' + maxlimitamount);
                    return false;
                }
                // }
                }
                LimtAmt = parseFloat(LimtAmt) + parseFloat(CurrSharAmt);
                if (MemberType == 1) {
                    if (LimtAmt > MaxShareBalance) {
                        debugger;
                        $(row).closest('tr').find('input[id="vouchertext"]').val('0.00'); $(row).closest('tr').find('input[id="vouchertext"]').focus(); $("#TotalAmount").val('0.00'); $('#CollectonAmount').val('0.00'); $('#AmountInWords').val(''); $('#Narration').val(''); totalAmount = 0; narration = "";
                        sweetAlert('@resFasMessages.Maximumsharebalance' + MaxShareBalance);
                        return false;
                    }
                }
            }
            debugger;
            var accountno = document.getElementById("AccountNo").value;
            var accountname = $("#AccountNo option:selected").text();
            var productcode = document.getElementById("Product").value;
            var admissionno = $('#Admissionno').val();
            $('#AccountPkey').val(accountno);
            var name = $('#MemberName').val();
            var amount = $('#ledgerid').val();
            var activity = $('#ActivityType option:selected').text();
            $('#XML').val('');
            var product = $("#Product").val();
            var xml = "";
            var totalAmount = 0;
            var narration = "";
            xml = "<Temp>"
            var xmlDocument = $.parseXML("<root/>");

            var Docxml = $($.parseXML('<?xml version="1.0" encoding="utf-8" ?><root />'));
            $('#VoucherDetails tbody tr').each(function () {
                debugger;
                var transrolldesc = $(this).find('input[id="transrollDesc"]').val();
                var transrollid = $(this).find('input[id="transrollid"]').val();
                var ledgerdesc = $(this).find('input[id="ledgerdesc"]').val();
                var ledgerid = $(this).find('input[id="ledgerid"]').val();
                var amount = $(this).find('input[id="vouchertext"]').val();
                var maxamount = $(this).find('input[id="maxAmount"]').val();
                var transactionid = $(this).find('input[id="transactionid"]').val();
                xml += "<row>";
                xml += "<LedgerID>" + ledgerid + "</LedgerID>";
                xml += "<LedgerDescription>" + ledgerdesc + "</LedgerDescription>";
                xml += "<TransrollID>" + transrollid + "</TransrollID>";

                xml += "<Amount>" + Number(amount).toFixed(2) + "</Amount>";

                xml += "<MaxAmount>" + Number(maxamount).toFixed(2) + "</MaxAmount>";
                xml += "<TransactionID>" + transactionid + "</TransactionID>";
                xml += "<TransrollDescription>" + transrolldesc + "</TransrollDescription>";
                xml += "</row>";

                @*if ((parseFloat(maxamount) < parseFloat(amount)) && ((transactionid != 30011)) && (transactionid != 10011) && (transactionid != 17011)) {

                amount = 0;
                $(this).find('input[id="vouchertext"]').val('');
                $(this).find('input[id="vouchertext"]').focus();
                swal({
                    title: '@resFasMessages.AmountmustbeLessthanorequaltolimitamount'
                },
                 function (isConfirm) {
                     $(this).find('input[id="vouchertext"]').focus();

                 });
                return false;
            }
            else if ((parseFloat(maxamount) != parseFloat(amount)) && (transactionid == 90011)) {
                amount = 0;
                $(this).find('input[id="vouchertext"]').val('');
                $(this).find('input[id="vouchertext"]').focus();
                swal({
                    title: '@resFasMessages.amountmustbeLessthanorequaltomaxamount'
                },
                 function (isConfirm) {
                     $(this).find('input[id="vouchertext"]').focus();
                 });
                return false;
            }
            if ((amount != '' && amount != '0.00')) {
                if (parseFloat(amount) > parseFloat(maxamount) && (transactionid == 40011)) {
                    amount = 0;
                    $(this).find('input[id="vouchertext"]').val('');
                    $(this).find('input[id="vouchertext"]').focus();
                    swal({
                        title: '@resFasMessages.amountmustbeLessthanorequaltomaxamount'
                    },
                     function (isConfirm) {
                         $(this).find('input[id="vouchertext"]').focus();
                     });
                    return false;
                }
            }*@


                debugger;
                var tot = parseFloat(amount) + parseFloat(totalAmount);

                totalAmount = tot;//$("#TotalAmount").val(tot);
                //narration += ledgerdesc + "-" + amount + " ";

                $('root', Docxml).append($('<LedgerID />', Docxml).text(ledgerid));

                $('#XMLDoc').val((new XMLSerializer()).serializeToString(Docxml.context));
            });
            xml += "</Temp>";

            //narration += name + "/Admission no " + admissionno + "/Account no " + accountname + "";
            $('#XML').val(xml);
            $("#TotalAmount").val(Number(totalAmount).toFixed(2));
            var amount = Number(totalAmount).toFixed(2);
            narration += "Being " + activity + " from " + name + "/Admission no. " + admissionno + "/Account no. " + accountname + " on credit for " + amount;

            GetAmountDecsription(parseFloat(totalAmount));
            $('#Narration').val(narration);
            $('#CollectonAmount').val(Number(totalAmount).toFixed(2));
        }

        function ChangeAmountForEditable(row) {

            var accountno = document.getElementById("AccountNo").value;
            $('#AccountPkey').val(accountno);
            var accountname = $("#AccountNo option:selected").text();
            var productcode = document.getElementById("Product").value;
            var admissionno = $('#Admissionno').val();
            var name = $('#MemberName').val();
            var amount = $('#ledgerid').val();
            var activity = $('#ActivityType option:selected').text();
            $('#XML').val('');
            var product = $("#Product").val();
            var xml = "";
            var totalAmount = 0;
            var narration = "";
            xml = "<Temp>"
            var xmlDocument = $.parseXML("<root/>");

            var Docxml = $($.parseXML('<?xml version="1.0" encoding="utf-8" ?><root />'));
            $('#VoucherDetails tbody tr').each(function () {
                var transrolldesc = $(this).find('input[id="transrollDesc"]').val();
                var transrollid = $(this).find('input[id="transrollid"]').val();
                var ledgerdesc = $(this).find('input[id="ledgerdesc"]').val();
                var ledgerid = $(this).find('input[id="ledgerid"]').val();
                var amount = $(this).find('input[id="vouchertext"]').val();
                var maxamount = $(this).find('input[id="maxAmount"]').val();

                var transactionid = $(this).find('input[id="transactionid"]').val();
                var changedamount = $(this).find('input[id="MaxAmounttext"]').val();
                maxamount = $(this).find('input[id="maxAmount"]').val(changedamount);


                xml += "<row>";
                xml += "<LedgerID>" + ledgerid + "</LedgerID>";
                xml += "<LedgerDescription>" + ledgerdesc + "</LedgerDescription>";
                xml += "<TransrollID>" + transrollid + "</TransrollID>";
                xml += "<Amount>" + Number(amount).toFixed(2) + "</Amount>";
                xml += "<MaxAmount>" + Number(changedamount).toFixed(2) + "</MaxAmount>";
                xml += "<TransactionID>" + transactionid + "</TransactionID>";
                xml += "<TransrollDescription>" + transrolldesc + "</TransrollDescription>";
                xml += "</row>";

                if ((parseFloat(maxamount) < parseFloat(amount)) && ((transactionid != 30011)) && (transactionid != 10011)) {

                    amount = 0;
                    $(this).find('input[id="vouchertext"]').val('');
                    $(this).find('input[id="vouchertext"]').focus();

                    swal({
                        title: '@resFasMessages.AmountmustbeLessthanorequaltolimitamount'
                    },
                     function (isConfirm) {
                         $(this).find('input[id="vouchertext"]').focus();
                     });

                }
                else if ((parseFloat(maxamount) != parseFloat(amount)) && (transactionid == 90011)) {
                    amount = 0;
                    $(this).find('input[id="vouchertext"]').val('');
                    $(this).find('input[id="vouchertext"]').focus();
                    swal({
                        title: '@resFasMessages.amountmustbeLessthanorequaltomaxamount'
                    },
                     function (isConfirm) {
                         $(this).find('input[id="vouchertext"]').focus();
                     });
                }


                var tot = parseFloat(amount) + parseFloat(totalAmount);

                totalAmount = tot;//$("#TotalAmount").val(tot);
                //narration += ledgerdesc + "-" + amount + " ";

                $('root', Docxml).append($('<LedgerID />', Docxml).text(ledgerid));

                $('#XMLDoc').val((new XMLSerializer()).serializeToString(Docxml.context));
            });
            xml += "</Temp>";
            var amount = Number(totalAmount).toFixed(2);
            narration += "Being " + activity + " from " + name + "/Admission no. " + admissionno + "/Account no. " + accountname + "on credit for" + amount;
            // narration += name + "/Admission no " + admissionno + "/Account no " + accountname + "";
            $('#XML').val(xml);
            $("#TotalAmount").val(Number(totalAmount).toFixed(2));
            GetAmountDecsription(parseFloat(totalAmount));
            $('#Narration').val(narration);
            $('#CollectonAmount').val(Number(totalAmount).toFixed(2));
        }


        function GetAmountDecsription(totalAmount) {
            $('#TotalAmount').val(Number(totalAmount).toFixed(2));

            var TotalAmount = document.getElementById("TotalAmount").value;
            $.ajax({
                type: "Get",
                url: '@Url.Action("GetAmountInWards", "TransactionReceipt")',
                data: { Amount: TotalAmount },

                datatype: "json",
                async: false,
                success: function (amountinwords) {
                    if (amountinwords != null) {
                        document.getElementById("AmountInWords").value = amountinwords;
                    }
                    else {

                        return false;
                    }
                }
            });
        }

        function resetPostFields() {

            //var accountno = document.getElementById("AccountNo").value;
            var productcode = document.getElementById("Product").value;
            var accountType = document.getElementById("ActivityType").value;
            $('#AccountPkey').val(accountno);
            $("#AddmissionPkey").val();
            var VchrType = $('#VoucherType').val();
            var accnoInv = $("#AccountNo option:selected").text();
            $("#InvestmentAccToPost").val(accnoInv);
            var admissionno = $('#Admissionno').val();
            if (admissionno != "") {
                var denominationstatus = '@ViewBag.denomination';
                var totalamount = $("#TotalAmount").val(); //parseFloat(totalAmount)
                if (productcode == "" || productcode == "0") {
                    $("#Product").focus();
                    sweetAlert("@resFasMessages.SelectProduct");
                }
                else if (accountno == "" || accountno == "0") {
                    $("#AccountNo").focus();
                    sweetAlert("@resFasMessages.SelectAccountNo");
                }
                else if (accountType == "" || accountType == "0") {
                    $("#ActivityType").focus();
                    sweetAlert("@resFasMessages.SelectActivity");
                }
                else if (VchrType == "" || VchrType == null) {
                    $("#VoucherType").focus();
                    sweetAlert("@resFasMessages.SelectVoucherType")
                }
                else if (totalamount != 0 && totalamount != "NaN") {
                    //Intellect.Unite.WebPackages.VoucherProcessing.Model.DTO.TransactionDTO obj=new Intellect.Unite.WebPackages.VoucherProcessing.Model.DTO.TransactionDTO();
                    var LedgerXML = $('#XML').val();
                    var accountId = accountno;
                    $.ajax({
                        url: '@Url.Action("GetLastPostTransactionDetails", "TransactionPayment")',
                        type: 'post',
                        data: JSON.stringify({ 'XML': LedgerXML, 'AccountId': accountId }),
                        contentType: 'application/json',
                        success: function (result) {

                            if (result.length > 0) {
                                LastVoucherRecord(result);
                                var header = '@resFasMessages.LastTransactionDetails' + $('#LastVoucherDetailsDiv').html();
                                var voucherdetails = result[0].AmountInWords;
                                if (result.length == 1) {
                                    header = "";
                                }

                                swal({
                                    html: true,
                                    title: header,

                                    text: voucherdetails,
                                    type: 'warning',
                                    showCancelButton: true,
                                    confirmButtonColor: '#3085d6',
                                    cancelButtonColor: '#d33',
                                    confirmButtonText: '@resFasLables.Yes',
                                    cancelButtonText: '@resFasLables.Cancel',
                                    closeOnConfirm: false
                                },
                   function (isConfirm) {
                       if (isConfirm) {
                           debugger;
                           swal.close();
                           var VchrType = $('#VoucherType').val();
                           var denominationAmount = $('#objDenominationDTO_Total').val();
                           if (VchrType == 3) {
                               debugger;
                               var product = $("#ContraProduct").val();
                               var account = $("#ContraAccountNo").val();
                               var memberbalance = $("#ContraAccountBalance").val();

                               var producttypeid = $('#ProductTypeId').val();
                               if (producttypeid == 3) {
                                   $('#btnPost').trigger('click');
                               }
                               else {
                                   @*if (product == "0") {
                                   sweetAlert("@resFasMessages.SelectContraProduct");

                               }
                               else if (account == "0") {
                                   sweetAlert("@resFasMessages.SelectContraAccountNo");

                               }
                               else if (memberbalance < totalamount) {
                                   sweetAlert("@resFasMessages.Enteredamountmustbelessthancontrabalance");
                               }
                               else {*@
                                   $('#btnPost').trigger('click');
                                   ////}
                               }
                           }
                           else if (VchrType == 1 && denominationstatus == 'Y' && denominationAmount != 0) {

                               var OutdenominationAmount = $('#objDenominationDTO_OutTotal').val();
                               denominationAmount = parseFloat(denominationAmount) - parseFloat(OutdenominationAmount);
                               if (denominationAmount != totalamount) {
                                   sweetAlert("@resFasMessages.EnterCorrectDenominationDetails")

                               }
                               else {
                                   $('#btnPost').trigger('click');
                               }
                           }
                           else {
                               $('#btnPost').trigger('click');
                               // $('#Admissionno').focus();
                           }
                       }
                       else {

                           $('#btnClear').trigger('click')
                           return false

                       }
                   })
                            }

                        }
                    })



                }
                else {
                    $('#vouchertext').focus();

                    swal({
                        title: '@resFasMessages.EnterAmount'
                    },
                     function (isConfirm) {
                         $('#vouchertext').focus();
                         $('#vouchertext').val('0.00');
                         $("#TotalAmount").val('0.00');
                     });
                }
            }
            else {

                $('#Admissionno').focus();
                sweetAlert("@resFasMessages.FillAllCompulsoryFields")
            }



        }
        var isMandatecheckBond = "";
        //Region:ForStorageBondRelease
        function resetPostFields2() {
            debugger;
            var accountno = document.getElementById("AccountNo").value;
            var productcode = document.getElementById("Product").value;
            var accountType = document.getElementById("ActivityType").value;
            var denominationstatus = '@ViewBag.denomination'; //var isMandatecheckBond = "";
            $('#AccountPkey').val(accountno);
            var storageTotalCollAmt = "0"; var storageCurrCollAmt = "0";
            var admissionno = $('#Admissionno').val();
            var accnoInv = $("#AccountNo option:selected").text();
            $("#InvestmentAccToPost").val(accnoInv);
            debugger;
            if (accnoInv != "") {

                var VchrType = $('#VoucherType').val();
                var denominationstatus = '@ViewBag.denomination';
                var denominationAmount = $('#objDenominationDTO_Total').val();
                var totalamount = $('#TotalAmount').val();
                if (productcode == "" || productcode == "0") {
                    $("#Product").focus();
                    sweetAlert("@resFasMessages.SelectProduct");
                }
                else if (accountno == "" || accountno == "0") {
                    $("#AccountNo").focus();
                    sweetAlert("@resFasMessages.SelectAccountNo");
                }
                else if (accountType == "" || accountType == "0") {
                    $("#ActivityType").focus();
                    sweetAlert("@resFasMessages.SelectActivity");
                }
                else if (VchrType == "" || VchrType == null) {
                    $("#VoucherType").focus();
                    sweetAlert("@resFasMessages.SelectVoucherType")
                }
                else if (totalamount != 0) {

                    if (VchrType == 3) {

                        var product = $("#ContraProduct").val();
                        var account = $("#ContraAccountNo").val();

                        if (product == "0") {
                            sweetAlert('@resFasMessages.SelectContraProduct');
                        }
                        else if (account == "0") {
                            sweetAlert('@resFasMessages.SelectContraAccountNo');
                        }
                        //else {
                        //    $('#btnPost').trigger('click');
                        //}
                    }

                    if (VchrType == 1 && denominationstatus == 'Y' && denominationAmount != 0) {

                        var OutdenominationAmount = $('#objDenominationDTO_OutTotal').val();
                        denominationAmount = parseFloat(denominationAmount) - parseFloat(OutdenominationAmount);
                        if (denominationAmount != totalamount) {
                            sweetAlert("@resFasMessages.EnterCorrectDenominationDetails")
                        }
                        else {
                            var cashbalance = $('#CashBalance').val();
                            if (parseFloat(totalamount) > parseFloat(cashbalance)) {
                                sweetAlert("@resFasMessages.Noenoughcashbalance");
                            }
                        }
                    }
                    else {

                        var status = ShowStorageDetails();
                        if (status) {
                            swal({
                                title: '@resFasLables.AddStorageReleaseDetails',
                                text: '@resFasLables.SelectStoragedetailsforRelease',
                                type: 'info',
                                showCancelButton: true,
                                cancelButtonText: 'No',
                                confirmButtonColor: '#3085d6',
                                cancelButtonColor: '#d33',
                                confirmButtonText: '@resFasLables.Yes',
                                cancelButtonText: '@resFasLables.Cancel',
                                closeOnConfirm: true
                            },
                            function (isConfirm) {
                                if (isConfirm) {

                                    $('#btnviewstorages').click();
                                    //$('#btnPost').trigger('click');
                                }
                                else {

                                    //trigger for save without selection of storage bond Venkat S 29/06/2017
                                    if (isMandatecheckBond == false) {
                                        $('#btnPost').trigger('click');
                                    }
                                }
                            })
                        }
                        else {
                            $('#btnPost').trigger('click');
                        }
                    }
                }
                else {

                    var status = ShowStorageDetails();
                    if (status) {
                        swal({
                            title: '@resFasLables.AddStorageReleaseDetails',
                            text: '@resFasLables.SelectStoragedetailsforRelease',
                            type: 'info',
                            showCancelButton: true,
                            cancelButtonText: 'No',
                            confirmButtonColor: '#3085d6',
                            cancelButtonColor: '#d33',
                            confirmButtonText: '@resFasLables.Yes',
                            cancelButtonText: '@resFasLables.Cancel',
                            closeOnConfirm: true
                        },
                          function (isConfirm) {
                              if (isConfirm) {

                                  $('#btnviewstorages').click();
                                  //$('#btnPost').trigger('click');
                              }
                              else {

                                  //trigger for save without selection of storage bond Venkat S 29/06/2017
                                  if (isMandatecheckBond == false) {
                                      $('#btnPost').trigger('click');
                                  }
                              }
                          })
                    }
                    else {
                        $('#btnPost').trigger('click');
                    }
                }
            }

            @*else {
            $('#Admissionno').focus();
            sweetAlert("@resFasMessages.AdmissionNodoesnotexists")

        }*@
        }
        function ShowStorageDetails() {
            var producttypeid = 0;
            var status = false;

            var accountno = $('#AccountNo option:selected').text();
            var productid = $("#Product").val();
            var Applicationno = "";
            var admissionnopkey = $('#AddmissionPkey').val();
            var StTotalAmount = $('#TotalAmount').val();
            var CollateralTypeID = 0;
            $.ajax({
                type: "Get",
                url: '@Url.Action("CheckGetStorageDetails", "TransactionReceipt")',
                async: false,
                data: { Admissionnopkey: admissionnopkey, Productslno: productid, Loanno: accountno, StTotalAmount: StTotalAmount },
                datatype: "json",
                success: function (response) {

                    status = response.isDisplayBonds;
                    storageTotalCollAmt = response.totalCollAmt;
                    storageCurrCollAmt = response.STotalAmount;
                    isMandatecheckBond = response.isMandatorycheckBond;
                    //CollateralTypeID = response.isDisplayBonds;
                    //for (var i = 0; i < response.length; i++) {
                    //
                    //    CollateralTypeID = response[i].StoredCrop.CollateralType.CollateralId;
                    //}
                }
            })
            //TODO: to show Storage details for release based on Collateral Type- When  CollateralId = 6
            //if (CollateralTypeID == 6) { status = true; } else { status = false; }
            return status;
        }

        //Region: End Fro StorageBondRelease
        function resetFieldsforAddOther() {

            $('#Ledgerid').focus();
            //$('#Ledger').focus();
        }

        function resetFields() {
            $('#Admissionno').focus();
            var formid = '@ViewBag.FormID';
            var logindate = '@ViewBag.logindate';
            var savestatus = document.getElementById("saveupdate").value;
            ResetFields(formid, logindate, savestatus);

            $('#InvestmentType').focus();
            //$('#InvestmentType').val(0);
            //$('#InvestmentBankType').val(0);
            @*//$("#InvestmentBankType option").remove();
        $('<option/>').val(0).html('@resInvestmentLables.select');*@

            $("#InvestmentBank option").remove();
            $('<option/>').val(0).html('@resInvestmentLables.select').appendTo('#InvestmentBank');

            $("#InvestmentBankBranch option").remove();
            $('<option/>').val(0).html('@resInvestmentLables.select').appendTo('#InvestmentBankBranch');
        };



        $(function () {
            $('#CollectonAmount').focusout(

                function () {

                    var collectionamount = document.getElementById("CollectonAmount").value;

                    //var vchrtype = $('#VoucherType').val();
                    //if (vchrtype == 0) {
                    //    $("#VoucherType").trigger('change');
                    //}

                    if (collectionamount != "" && collectionamount > 0) {

                        var repaymenttype = $('#RepaymentTypeId').val();
                        if (repaymenttype == 1 || repaymenttype == 2) {
                            $('#editinstallmentchart').click();
                            // DisableVoucherBodyFields(repaymenttype);
                            $('#txtcollectionamountfrominstallments').val(collectionamount);
                            $('#txtcollectionamountfrominstallments').blur();

                        }
                        else {
                            // DisableVoucherBodyFields(repaymenttype);
                            GetClosingAmountSpliting(collectionamount);
                            GetAmountDecsription(parseFloat(collectionamount));
                            $('#CollectonAmount').val(Number(collectionamount).toFixed(2));
                        }
                        //$('#vouchertext').focus();
                    }

                    $('#VoucherDetails').focus();
                });


        });



    </script>
    <script>
        shortcut.add("f2", function () {

            document.getElementById('btnClear').click();

        });

        shortcut.add("f9", function () {

            document.getElementById('btnSave').click();

        });

        shortcut.add("f8", function () {

            document.getElementById('btnAdd').click();

        });


        $('.applydecimal').blur(function () {
            debugger;
            extractNumber(this, 2, false);
        });
        $('.applydecimal').keyup(function () {
            debugger;
            extractNumber(this, 2, false);
        });
        $('.applydecimal').keypress(function () {
            debugger;
            return blockNonNumbers(this, event, true, false);
        });

        $('.applynumbers').blur(function () {
            extractNumber(this, 0, false);
        });
        $('.applynumbers').keyup(function () {
            extractNumber(this, 0, false);
        });
        $('.applynumbers').keypress(function () {
            return blockNonNumbers(this, event, false, false);
        });
        $('.AlphaNumWithSpecialCharactersCommaandSpaceCheck').blur(function () {
            extractNumber(this, 0, false);
        });
        $('.AlphaNumWithSpecialCharactersCommaandSpaceCheck').keyup(function () {
            extractNumber(this, 0, false);
        });
        $('.AlphaNumWithSpecialCharactersCommaandSpaceCheck').keypress(function () {
            return blockNonNumbers(this, event, false, false);
        });
    </script>
    <script>
        $(document).ready(function () {
            var v = '@ViewBag.logindate';
            var cutoffdate = '@ViewBag.CutoffDate';
            var isforbackdate = '@ViewBag.IsForBackDate';
            var savestatus = 'true';
            document.getElementById("saveupdate").value = savestatus;
            //resetFields(savestatus);
            if (isforbackdate == "Y") {
                if (Date.parse(cutoffdate) < Date.parse(v)) {
                    sweetAlert('@resFasMessages.Transactionsarenotallowedaftercutoffdate');
                    $('#Admissionno').attr('readonly', true);
                    $('#iconsearch').hide();
                    return;
                }
            }
            else {
                GetDayEndChecking(v);
            }

        });
        function GetDayEndChecking(v) {
            if (v == "") {
                return;
            }


            $.ajax({
                type: "Get",
                url: '@Url.Action("GetDayEndDetails", "TransactionReceipt")',
                data: { date: v },
                datatype: "json",
                success: function (dayendstatus) {

                    var combostring;
                    if (dayendstatus.data == false) {

                        //return Notify('Something Went Wrong!', 'top-full-width', '10000', 'danger', 'fa-bolt', true);
                        $('#btnClear').click();

                        sweetAlert('@resFasMessages.Lastdayenddateis' + '' + dayendstatus.data2);
                    }
                }
            })
        }

        function rowselect(vv) {
            var voucherindex;

            voucherindex = $(vv).find('td').eq(0).text();
            voucherNo = $(vv).find('td').eq(1).text();
            //sweetAlert(voucherindex);
            document.getElementById("BatchID").value = voucherindex.trim();
            document.getElementById("txtbatchid").value = voucherindex.trim();

        }

        $('#viewinstallmentchart').click(function () {
        });
    </script>
    <script>

        $(function () {
            $("#objDenominationDTO_Thousands").focusout(function () {

                var count = $("#objDenominationDTO_Thousands").val();
                if (count == "") {
                    count = 0;
                }
                var total = (parseFloat(count) * 1000)

                $('#objDenominationDTO_ThousandsTotal').val(Number(total).toFixed(2));
                calculateDenominationTotal();
            })
        })

        $(function () {
            $("#objDenominationDTO_FiveHundreds").focusout(function () {

                var count = $("#objDenominationDTO_FiveHundreds").val();
                if (count == "") {
                    count = 0;
                }
                var total = (parseFloat(count) * 500)

                $('#objDenominationDTO_FiveHundredsTotal').val(Number(total).toFixed(2));
                calculateDenominationTotal();
            })
        })

        $(function () {
            $("#objDenominationDTO_Hundreds").focusout(function () {

                var count = $("#objDenominationDTO_Hundreds").val();
                if (count == "") {
                    count = 0;
                }
                var total = (parseFloat(count) * 100)

                $('#objDenominationDTO_HundredsTotal').val(Number(total).toFixed(2));
                calculateDenominationTotal();
            })
        })

        $(function () {
            $("#objDenominationDTO_Fifties").focusout(function () {

                var count = $("#objDenominationDTO_Fifties").val();
                if (count == "") {
                    count = 0;
                }
                var total = (parseFloat(count) * 50)

                $('#objDenominationDTO_FiftiesTotal').val(Number(total).toFixed(2));
                calculateDenominationTotal();
            })
        })

        $(function () {
            $("#objDenominationDTO_Twenties").focusout(function () {

                var count = $("#objDenominationDTO_Twenties").val();
                if (count == "") {
                    count = 0;
                }
                var total = (parseFloat(count) * 20)

                $('#objDenominationDTO_TwentiesTotal').val(Number(total).toFixed(2));
                calculateDenominationTotal();
            })
        })

        $(function () {
            $("#objDenominationDTO_Tens").focusout(function () {

                var count = $("#objDenominationDTO_Tens").val();
                if (count == "") {
                    count = 0;
                }
                var total = (parseFloat(count) * 10)

                $('#objDenominationDTO_TensTotal').val(Number(total).toFixed(2));
                calculateDenominationTotal();
            })
        })

        $(function () {
            $("#objDenominationDTO_Fives").focusout(function () {

                var count = $("#objDenominationDTO_Fives").val();
                if (count == "") {
                    count = 0;
                }
                var total = (parseFloat(count) * 5)

                $('#objDenominationDTO_FivesTotal').val(Number(total).toFixed(2));
                calculateDenominationTotal();
            })
        })

        $(function () {
            $("#objDenominationDTO_Twos").focusout(function () {

                var count = $("#objDenominationDTO_Twos").val();
                if (count == "") {
                    count = 0;
                }
                var total = (parseFloat(count) * 2)

                $('#objDenominationDTO_TwosTotal').val(Number(total).toFixed(2));
                calculateDenominationTotal();
            })
        })

        $(function () {
            $("#objDenominationDTO_Ones").focusout(function () {

                var count = $("#objDenominationDTO_Ones").val();
                if (count == "") {
                    count = 0;
                }
                var total = (parseFloat(count) * 1)

                $('#objDenominationDTO_OnesTotal').val(Number(total).toFixed(2));
                calculateDenominationTotal();
            })
        })

        function calculateDenominationTotal() {

            var Thousands = $('#objDenominationDTO_ThousandsTotal').val();
            if (Thousands == "") {
                Thousands = 0;
            }
            var FiveHundreds = $('#objDenominationDTO_FiveHundredsTotal').val();
            if (FiveHundreds == "") {
                FiveHundreds = 0;
            }
            var Hundreds = $('#objDenominationDTO_HundredsTotal').val();
            if (Hundreds == "") {
                Hundreds = 0;
            }
            var Fifties = $('#objDenominationDTO_FiftiesTotal').val();
            if (Fifties == "") {
                Fifties = 0;
            }
            var Twenties = $('#objDenominationDTO_TwentiesTotal').val();
            if (Twenties == "") {
                Twenties = 0;
            }
            var Tens = $('#objDenominationDTO_TensTotal').val();
            if (Tens == "") {
                Tens = 0;
            }
            var Fives = $('#objDenominationDTO_FivesTotal').val();
            if (Fives == "") {
                Fives = 0;
            }
            var Twos = $('#objDenominationDTO_TwosTotal').val();
            if (Twos == "") {
                Twos = 0;
            }
            var Ones = $('#objDenominationDTO_OnesTotal').val();
            if (Ones == "") {
                Ones = 0;
            }
            var denominationtotal = 0;
            denominationtotal = (parseFloat(Thousands) + parseFloat(FiveHundreds) + parseFloat(Hundreds) + parseFloat(Fifties) + parseFloat(Twenties) + parseFloat(Tens) + parseFloat(Fives) + parseFloat(Twos) + parseFloat(Ones));
            $('#objDenominationDTO_Total').val(Number(denominationtotal).toFixed(2));
            //$('#TotalAmount').val(parseFloat(denominationtotal));
            //GetAmountDecsription(parseFloat(denominationtotal));
        }

        $(function () {
            $("#objDenominationDTO_OutThousands").focusout(function () {

                var count = $("#objDenominationDTO_OutThousands").val();
                if (count == "") {
                    count = 0;
                }
                var total = (parseFloat(count) * 1000)

                $('#objDenominationDTO_OutThousandsTotal').val(Number(total).toFixed(2));
                calculateOutDenominationTotal();
            })
        })

        $(function () {
            $("#objDenominationDTO_OutFiveHundreds").focusout(function () {

                var count = $("#objDenominationDTO_OutFiveHundreds").val();
                if (count == "") {
                    count = 0;
                }
                var total = (parseFloat(count) * 500)

                $('#objDenominationDTO_OutFiveHundredsTotal').val(Number(total).toFixed(2));
                calculateOutDenominationTotal();
            })
        })

        $(function () {
            $("#objDenominationDTO_OutHundreds").focusout(function () {

                var count = $("#objDenominationDTO_OutHundreds").val();
                if (count == "") {
                    count = 0;
                }
                var total = (parseFloat(count) * 100)

                $('#objDenominationDTO_OutHundredsTotal').val(Number(total).toFixed(2));
                calculateOutDenominationTotal();
            })
        })

        $(function () {
            $("#objDenominationDTO_OutFifties").focusout(function () {

                var count = $("#objDenominationDTO_OutFifties").val();
                if (count == "") {
                    count = 0;
                }
                var total = (parseFloat(count) * 50)

                $('#objDenominationDTO_OutFiftiesTotal').val(Number(total).toFixed(2));
                calculateOutDenominationTotal();
            })
        })

        $(function () {
            $("#objDenominationDTO_OutTwenties").focusout(function () {

                var count = $("#objDenominationDTO_OutTwenties").val();
                if (count == "") {
                    count = 0;
                }
                var total = (parseFloat(count) * 20)

                $('#objDenominationDTO_OutTwentiesTotal').val(Number(total).toFixed(2));
                calculateOutDenominationTotal();
            })
        })

        $(function () {
            $("#objDenominationDTO_OutTens").focusout(function () {

                var count = $("#objDenominationDTO_OutTens").val();
                if (count == "") {
                    count = 0;
                }
                var total = (parseFloat(count) * 10)

                $('#objDenominationDTO_OutTensTotal').val(Number(total).toFixed(2));
                calculateOutDenominationTotal();
            })
        })

        $(function () {
            $("#objDenominationDTO_OutFives").focusout(function () {

                var count = $("#objDenominationDTO_OutFives").val();
                if (count == "") {
                    count = 0;
                }
                var total = (parseFloat(count) * 5)

                $('#objDenominationDTO_OutFivesTotal').val(Number(total).toFixed(2));
                calculateOutDenominationTotal();
            })
        })

        $(function () {
            $("#objDenominationDTO_OutTwos").focusout(function () {

                var count = $("#objDenominationDTO_OutTwos").val();
                if (count == "") {
                    count = 0;
                }
                var total = (parseFloat(count) * 2)

                $('#objDenominationDTO_OutTwosTotal').val(Number(total).toFixed(2));
                calculateOutDenominationTotal();
            })
        })

        $(function () {
            $("#objDenominationDTO_OutOnes").focusout(function () {

                var count = $("#objDenominationDTO_OutOnes").val();
                if (count == "") {
                    count = 0;
                }
                var total = (parseFloat(count) * 1)

                $('#objDenominationDTO_OutOnesTotal').val(Number(total).toFixed(2));
                calculateOutDenominationTotal();
            })
        })

        function calculateOutDenominationTotal() {

            var OutThousands = $('#objDenominationDTO_OutThousandsTotal').val();
            if (OutThousands == "") {
                OutThousands = 0;
            }
            var OutFiveHundreds = $('#objDenominationDTO_OutFiveHundredsTotal').val();
            if (OutFiveHundreds == "") {
                OutFiveHundreds = 0;
            }
            var OutHundreds = $('#objDenominationDTO_OutHundredsTotal').val();
            if (OutHundreds == "") {
                OutHundreds = 0;
            }
            var OutFifties = $('#objDenominationDTO_OutFiftiesTotal').val();
            if (OutFifties == "") {
                OutFifties = 0;
            }
            var OutTwenties = $('#objDenominationDTO_OutTwentiesTotal').val();
            if (OutTwenties == "") {
                OutTwenties = 0;
            }
            var OutTens = $('#objDenominationDTO_OutTensTotal').val();
            if (OutTens == "") {
                OutTens = 0;
            }
            var OutFives = $('#objDenominationDTO_OutFivesTotal').val();
            if (OutFives == "") {
                OutFives = 0;
            }
            var OutTwos = $('#objDenominationDTO_OutTwosTotal').val();
            if (OutTwos == "") {
                OutTwos = 0;
            }
            var OutOnes = $('#objDenominationDTO_OutOnesTotal').val();
            if (OutOnes == "") {
                OutOnes = 0;
            }
            var OutDenominationtotal = 0;
            OutDenominationtotal = (parseFloat(OutThousands) + parseFloat(OutFiveHundreds) + parseFloat(OutHundreds) + parseFloat(OutFifties) + parseFloat(OutTwenties) + parseFloat(OutTens) + parseFloat(OutFives) + parseFloat(OutTwos) + parseFloat(OutOnes));
            $('#objDenominationDTO_OutTotal').val(Number(OutDenominationtotal).toFixed(2));

        }

    </script>
    <script>

        $(document).ready(function () {

            var logindate = '@ViewBag.logindate';
            var cutoffdate = '@ViewBag.CutoffDate';
            var isforbackdate = '@ViewBag.IsForBackDate';
            if (isforbackdate == "Y") {
                if (Date.parse(cutoffdate) < Date.parse(logindate)) {
                    sweetAlert('@resFasMessages.Transactionsarenotallowedaftercutoffdate');
                    $('#Admissionno').attr('readonly', true);
                    $('#iconsearch').hide();
                    return;
                }
            }
            $('.modal').on('shown.bs.modal', function (e) {
                ClearDenominationData();
                $(e.target).removeData('bs.modal');
            });
            //$('.modal').on('shown.bs.modal', function (e) {
            //

            //    $('#objDenominationDTO_Thousands ').focus();

            //});


        });

        function AllowNumbers(control) {
            extractNumber(control, 0, false);
        }
        function AllowNumbersWithTwoDecimals(control) {
            extractNumber(control, 2, false);
        }

    </script>
    <script>
        function GetControlRecord() {


            var accountno = $('#AccountNo option:selected').text();
            var admissionno = $('#Admissionno').val();
            $.ajax({
                url: '@Url.Action("GetControlRecordData", "TransactionReceipt")',
                type: 'Get',
                data: { AccountCode: accountno, AdmissionNo: admissionno },
                dataType: 'json',
                contentType: 'application/json',
                success: function (data) {
                    var _data = data;
                    CommonControlRecord(_data);
                }
            });
        }

        function GetScrollRecord() {

            var combostring;
            var transactiondate = $('#TransactionDate').val();
            var transactiontype = "1";
            var Module = $('#ModulName').val();
            var PassStatus = $('#PassStatus').val();
            var Transactionid = $('#Activity').val();
            if (Module == "") {
                Module = 0;
            }
            if (PassStatus == "") {
                PassStatus = 0;
            }
            if (Transactionid == "") {
                Transactionid = 0;
            }
            $.ajax({
                url: '@Url.Action("GetScrollRecordsData", "TransactionReceipt")',
                type: 'Get',
                data: { TransactionDate: transactiondate, TransactionType: transactiontype, module: Module, passStatus: PassStatus, transrolid: Transactionid },
                dataType: 'json',
                conentType: 'application/json',
                success: function (result) {

                    if (result != false) {
                        var _scrollrecords = result.scrollrecords;
                        var _products = result.products;
                        var _activity = result.activitys;
                        if (Module == 0) {
                            $("#ModulName").empty();

                            if (_products.empty) {

                                $("#ModulName").append("<option value=0>@resInvestmentLables.select</option>");
                            }
                            else {
                                $('#ModulName').append('<option value="0">@resInvestmentLables.select</option>');

                                for (var i = 0; i < _products.length; i++) {
                                    $("#ModulName").append("<option value=" + _products[i].ProductTypeID + ">" + _products[i].ProductTypeDescription + "</option>");
                                }
                            }
                        }

                        if (Transactionid == 0) {
                            $("#Activity").empty();

                            if (_activity.empty) {

                                $("#Activity").append("<option value=0>@resInvestmentLables.select</option>");
                            }
                            else {
                                $('#Activity').append('<option value="0">@resInvestmentLables.select</option>');

                                for (var i = 0; i < _activity.length; i++) {
                                    $("#Activity").append("<option value=" + _activity[i].TransactionId + ">" + _activity[i].ActivityTypeDescription + "</option>");
                                }
                            }
                        }


                        if (_scrollrecords != false) {
                            ScrollRecord(_scrollrecords);
                        }
                        else {
                            $('#ScrollRecord tbody tr').remove();
                            $('#TotalReceipt').text("");
                        }
                    }
                }
            })
        }




        //TODO: begin: To update
        //TODO:End To Show Storage details

        function ScrollRecord(data) {


            if (data == false) {
                $('#ScrollRecord tbody tr').remove();
                var $tr = $('<tr >').append(
                 $('<td colspan="20">').text('@resFasMessages.NoRowsFound')

                 ).appendTo('#ScrollRecord');
                return false;
            }
            else {
                var ScrollData = data;
                var totalReceipts = 0;

                $('#ScrollRecord tbody tr').remove();
                for (var row = 0; row < ScrollData.length; row++) {

                    if (ScrollData[row].Credit != 0) {
                        if (ScrollData[row].status == false) {
                            var $tr = $('<tr >').append(

                                $('<td style="text-align:center;color:red">').text(ScrollData[row].VoucherNo),
                                $('<td style="text-align:center;color:red">').text(ConvertJsonDateStringinDDMMYYYY(ScrollData[row].TransactionDate)),
                                $('<td style="text-align:center;color:red">').text(ScrollData[row].Module),
                                $('<td style="text-align:center;color:red">').text(ScrollData[row].Activity),
                                $('<td style="text-align:left;color:red">').text(ScrollData[row].Particulars),

                                $('<td style="text-align:center;color:red">').text('@resFasLables.NotPosted'),
                               $('<td style="text-align:Right;color:red">').text(Number(ScrollData[row].Credit).toFixed(2))
                                ).appendTo('#ScrollRecord');
                        }
                        else {
                            if (row % 2 == 0) {
                                var $tr = $('<tr >').append(

                                   $('<td style="text-align:center;color:blue">').text(ScrollData[row].VoucherNo),
                                   $('<td style="text-align:center;color:blue">').text(ConvertJsonDateStringinDDMMYYYY(ScrollData[row].TransactionDate)),
                                    $('<td style="text-align:center;color:blue">').text(ScrollData[row].Module),
                                     $('<td style="text-align:center;color:blue">').text(ScrollData[row].Activity),
                                   $('<td style="text-align:left;color:blue">').text(ScrollData[row].Particulars),
                                   $('<td style="text-align:center;color:blue">').text('@resFasLables.Posted'),
                                  $('<td style="text-align:Right;color:blue">').text(Number(ScrollData[row].Credit).toFixed(2))
                                  //$('<td>').text(ScrollData[row].KeyValue)
                                   ).appendTo('#ScrollRecord');
                            }
                            else {
                                var $tr = $('<tr >').append(

                                    $('<td style="text-align:center">').text(ScrollData[row].VoucherNo),
                                    $('<td style="text-align:center">').text(ConvertJsonDateStringinDDMMYYYY(ScrollData[row].TransactionDate)),
                                     $('<td style="text-align:center">').text(ScrollData[row].Module),
                                      $('<td style="text-align:center">').text(ScrollData[row].Activity),
                                    $('<td style="text-align:left">').text(ScrollData[row].Particulars),

                                    $('<td style="text-align:center">').text('@resFasLables.Posted'),

                                    //$('<td>').text(ScrollData[row].Debit),
                                   $('<td style="text-align:Right">').text(Number(ScrollData[row].Credit).toFixed(2))
                                   //$('<td>').text(ScrollData[row].KeyValue)

                                    ).appendTo('#ScrollRecord');
                            }
                        }
                        var totDebit = parseFloat(ScrollData[row].Credit) + parseFloat(totalReceipts);

                        totalReceipts = totDebit;
                    }
                }
                //$("#ScrollRecord tfoot").find('#Total').text(Number(totalReceipts).toFixed(2));
                $('#TotalReceipt').text(Number(totalReceipts).toFixed(2));
            }
        }

        function LastVoucherRecord(data) {

            debugger;
            if (data == false) {
                $('#LastVoucherDetails tbody tr').remove();
                var $tr = $('<tr >').append(
                 $('<td colspan="20">').text('@resFasLables.NoRowFound')

                 ).appendTo('#LastVoucherDetails');
                return false;
            }
            else {
                var ScrollData = data;
                var totalReceipts = 0;

                $('#LastVoucherDetails tbody tr').remove();
                for (var row = 0; row < ScrollData.length; row++) {
                    debugger;

                    var vouvhdate =ScrollData[row].TransactionDate;
                    var converteddate = ConvertJsonDateStringinDDMMYYYY(vouvhdate);

                    $('#LastVoucherDetails tbody').append('<tr><td>' + converteddate + '</td><td>' + ScrollData[row].Particulars + '</td><td>' + ScrollData[row].Debit + '</td><td>' + ScrollData[row].Credit + '</td></tr>');



                    //var $tr = $('<tr>').append(
                    //    $('<td>').html("<"+ScrollData[row].AccountCode+">"),
                    //    $('<td>').html("<"+ConvertJsonDateStringinDDMMYYYY(ScrollData[row].TransactionDate)+">"),
                    //     $('<td>').html("<"+ScrollData[row].Particulars+">"),
                    //    $('<td>').html("<"+ScrollData[row].Debit+">"),
                    //    $('<td>').html("<" + ScrollData[row].Credit + ">")
                    //    ).appendTo('#LastVoucherDetails');
                }


            }
        }

     function ConvertJsonDateStringinDDMMYYYY(jsonDate) {
    var shortDate = null;
    if (jsonDate) {
        var date = new Date(jsonDate);
        var day = date.getDate();
        var month = date.getMonth() + 1; // Month is zero-based, so add 1
        var year = date.getFullYear();
        var formattedDate = padNumber(day) + '/' + padNumber(month) + '/' + year;
        shortDate = formattedDate;
    }
    return shortDate;
}

function padNumber(number) {
    return (number < 10 ? '0' : '') + number;
}

        //function ConvertJsonDateStringinDDMMYYYY2(jsonDate) {
        //    var shortDate = null;
        //    if (jsonDate) {
        //        var regex = /-?\d+/;
        //        var matches = regex.exec(jsonDate);
        //        var dt = new Date(parseInt(matches[0]));
        //        var month = dt.getMonth() + 1;
        //        var monthString = month > 9 ? month : '0' + month;
        //        var day = dt.getDate();
        //        var dayString = day > 9 ? day : '0' + day;
        //        var year = dt.getFullYear();
        //        //shortDate = year + '-' + monthString + '-' + dayString;
        //        shortDate = dayString + '/' + monthString + '/' + year;
        //    }
        //    return shortDate;
        //};

        //function ConvertJsonDateStringinDDMMYYYY2(jsonDate) 
        //{
        //var shortDate = null;
        //        if (jsonDate)
        //        {
        //var regex = /-?\d+/;          
        //var matches = regex.exec(jsonDate);  
        //var dt = new Date(parseInt(matches[0])); 
        //var month = dt.getMonth() + 1;         
        //var monthString = month > 9 ? month : '0' + month;
        //var day = dt.getDate();
        //var dayString = day > 9 ? day : '0' + day; 
        //var year = dt.getFullYear(); 
        //shortDate = dayString + '/' + monthString + '/' + year;
        //         }
        // return shortDate;
        //}

        function ClearDenominationData() {

            $("#objDenominationDTO_Thousands").val('');
            $('#objDenominationDTO_ThousandsTotal').val('');
            $("#objDenominationDTO_FiveHundreds").val('');
            $('#objDenominationDTO_FiveHundredsTotal').val('');
            $("#objDenominationDTO_Hundreds").val('');
            $('#objDenominationDTO_HundredsTotal').val('');
            $("#objDenominationDTO_Fifties").val('');
            $('#objDenominationDTO_FiftiesTotal').val('');
            $("#objDenominationDTO_Twenties").val('');
            $('#objDenominationDTO_TwentiesTotal').val('');
            $("#objDenominationDTO_Tens").val('');
            $('#objDenominationDTO_TensTotal').val('');
            $("#objDenominationDTO_Fives").val('');
            $('#objDenominationDTO_FivesTotal').val('');
            $("#objDenominationDTO_Twos").val('');
            $('#objDenominationDTO_TwosTotal').val('');
            $("#objDenominationDTO_Ones").val('');
            $('#objDenominationDTO_OnesTotal').val('');
            $("#objDenominationDTO_OutThousands").val('');
            $('#objDenominationDTO_OutThousandsTotal').val('');
            $("#objDenominationDTO_OutFiveHundreds").val('');
            $('#objDenominationDTO_OutFiveHundredsTotal').val('');
            $("#objDenominationDTO_OutHundreds").val('');
            $('#objDenominationDTO_OutHundredsTotal').val('');
            $("#objDenominationDTO_OutFifties").val('');
            $('#objDenominationDTO_OutFiftiesTotal').val('');
            $("#objDenominationDTO_OutTwenties").val('');
            $('#objDenominationDTO_OutTwentiesTotal').val('');
            $("#objDenominationDTO_OutTens").val('');
            $('#objDenominationDTO_OutTensTotal').val('');
            $("#objDenominationDTO_OutFives").val('');
            $('#objDenominationDTO_OutFivesTotal').val('');
            $("#objDenominationDTO_OutTwos").val('');
            $('#objDenominationDTO_OutTwosTotal').val('');
            $("#objDenominationDTO_OutOnes").val('');
            $('#objDenominationDTO_OutOnesTotal').val('');
            $('#objDenominationDTO_Total').val('');
            $('#objDenominationDTO_OutTotal').val('');
        };
    </script>
    <script>

        $(document).ready(function () {


            var v = '@ViewBag.logindate';

            $(document).on('invalid-form.validate', 'form', function () {
                setTimeout(function () {
                    document.getElementById("btnPost").disabled = false;
                }, 1);
            });
            $(document).on('submit', 'form', function () {
                setTimeout(function () {
                    document.getElementById("btnPost").disabled = true;
                }, 0);
            });
        });
        function FillErrorsList(Result) {
            debugger;
            $('#tblerrorslist tbody tr').remove();

            if (Result != "" || Result != null) {
                debugger;
                if (Result != null && Result.length > 0) {

                    debugger;
                    for (var i = 0; i < Result.length; i++) {
                        var $tr = $('<tr>').append($('<td>').text(i + 1),

                   $('<td>').text(Result[i].LoanNo),
                   $('<td>').text(Result[i].ErrorCodeName),
                   $('<td>').text(Result[i].ErrorDescription),
                   $('<td>').html(Result[i].ControlHTML),
                    $('<td hidden>').html('<input type="hidden" id="ErrorCode" value=' + Result[i].ErrorCode + '>')
                    //$('<td hidden>').html('<input type="hidden" id="DisbursementSlNo" value=' + transactionresult[k].DisbursementSlNo + '>'),
                    //    $('<td hidden>').html('<input type="hidden" id="ApplicationNo" value=' + transactionresult[k].ApplicationNo + '>')
                   ).appendTo('#tblerrorslist tbody');
                    }
                }
            }
            debugger;
        }

    </script>



    <script>
        var MinShareBalance = "";
        $(document).ready(function () {
            MinShareBalance = '@ViewBag.MinShareBalance';
            $('.modal').on('shown.bs.modal', function (e) {
                $('#Ledger').focus(); //ControlId in id of control on popup
            }); 

            $('#TempAccountNo').focusout(function () {
                $('#btnerrordetails').hide();
                debugger;
                @*var tempAccNo = $('#TempAccountNo').val();
            var formid = '@ViewBag.FormID';
            if (tempAccNo == "" && tempAccNo == "0") {
                var formid = '@ViewBag.FormID';
                var logindate = '@ViewBag.logindate';
                var savup = $('#saveupdate').val();
                ResetFields(formid, logindate, savup);
                return;
            }
            $.ajax({
                type: "Get",
                url: '@Url.Action("GetAccountCodeByTempAcc", "TransactionReceiptsFirm")',
                data: { TempAccNo: tempAccNo },
                datatype: "json",
                success: function (result) {
                    debugger;
                    if (result != "") {
                        document.getElementById('AccountNo').value = result;
                        document.getElementById('TempAccountNo').value = tempAccNo;
                        GetProductDetails(result);
                        GetOpeningbalance();
                    }
                }
            })*@
            });

            $('#AccountNo').change(function () {
                $('#btnerrordetails').hide();
                debugger;
                var accountNo = $("#AccountNo option:selected").text(); //$('#AccountNo').val();

                $("#Product").append("<option value=" + 34 + ">" + '@resInvestmentLables.Investment' + "</option>");

                //GetProductDetails(accountNo);
                //GetOpeningbalance();
                $('#Product').trigger('focusout');
            })

            var admn = '@ViewBag.AdmissionNo';
            if (admn != "" && admn != "0") {
                $('#Admissionno').val(admn);
                $('#Admissionno').trigger('focusout');
                // $('#Admissionno').focusout();
            }
            else {
                $("#Admissionno").focus();
            }
            $('#btn_Add').attr('disabled', true);

        });

        function GetProductDetails(accountNo) {
            debugger;
            var v = accountNo;
            if (v == "") {
                return;
            }
            var formid = '@ViewBag.FormID';
            document.getElementById("formid").value = formid;
            $.ajax({
                type: "Get",
                url: '@Url.Action("GetProductDetailsBasedOnAccount", "TransactionReceiptsFirm")',
                data: { AccountNo: accountNo, formid: formid },
                datatype: "json",
                success: function (result) {
                    debugger;
                    var listproducts = null;
                    //var InvestType = null;
                    if (result.object1.length > 0) {
                        listproducts = result.object1;
                    }
                    //if (result.object2.length > 0) {
                    //    InvestType = result.object2;
                    //}
                    var combostring;
                    if (listproducts == false || listproducts == 0) {
                        sweetAlert("@resFasMessages.Nodatafound");
                        //$('#AccountNo').empty();
                        //$("#AccountNo").append('<option value="0">-Select-</option>');
                        $('#ActivityType').empty();
                        $("#ActivityType").append('<option value="0">@resInvestmentLables.select</option>');
                        $('#VoucherDetails tbody').empty();
                        return false;
                    }
                    $("#Product").empty();
                    //$("#InvestmentType").empty();
                    if (listproducts == null || listproducts.count < 0) {
                        $("#Product").append("<option value=0>@resInvestmentLables.select</option>");
                    }
                    else {
                        if (listproducts.length == 1) {

                            var id = listproducts[0].ProductTypeID;
                            var name = listproducts[0].ProductTypeDescription;
                            $("#Product").append("<option value=" + id + ">" + name + "</option>");
                            //GetAccountDetails(id, accountNo);

                            //$('#InvestmentType').append('<option value="0">-Select-</option>');
                            //for (var i = 0; i < InvestType.length; i++) {
                            //    var id = InvestType[i].InvestTypeID;
                            //    var name = InvestType[i].InvestTypeDescription;
                            //    combostring += "<option value=" + id + ">" + name + "</option>"
                            //}
                            //$("#InvestmentType").append(combostring);
                        }
                        else {
                            $('#Product').append('<option value="0">@resInvestmentLables.select</option>');
                            for (var i = 0; i < listproducts.length; i++) {
                                var id = listproducts[i].ProductTypeID;
                                var name = listproducts[i].ProductTypeDescription;
                                combostring += "<option value=" + id + ">" + name + "</option>"

                            }
                            //$('#AccountNo').empty();
                            //$("#AccountNo").append('<option value="0">-Select-</option>');
                            $('#ActivityType').empty();
                            $("#ActivityType").append('<option value="0">>@resInvestmentLables.select</option>');
                            $('#VoucherDetails tbody').empty();
                            $("#Product").append(combostring);
                        }
                    }
                }
            })
        }


        //$(function () {
        //    $("#InvestmentType").change(function () {
        //        debugger;
        //        var productcode = document.getElementById("Product").value;
        //        var accountNo = $('#AccountNo').val();
        //        GetAccountDetails(productcode, accountNo);
        //    })
        //})
    </script>


    @*BankType Change*@
    <script>
        $(function () {
            $('#InvestmentBankType').change(function () {
                debugger;
                var BankType = $('#InvestmentBankType').val();
                var message = "NoBanksMappedForSelectedBankType";
                if (BankType > 0) {
                    //BankTypeChange(BankType, message);

                    $.ajax({
                        url: '@Url.Action("GetBankDetails")',
                        type: 'Get',
                        data: { bankType: BankType },
                        datatype: 'json',
                        contentType: 'application/json',
                        success: function (result) {
                            debugger;
                            var banks = result.object1;
                            debugger;
                            if (banks.length > 0) {
                                debugger;
                                $("#InvestmentBank option").remove();
                                $("#InvestmentBankBranch option").remove();
                                $('<option/>').val(0).html('@resInvestmentLables.select').appendTo('#InvestmentBank');
                                var bankTypeMstr = banks.length;
                                for (var i = 0; i < bankTypeMstr ; i++) {
                                    debugger;
                                    $('<option/>').val(banks[i].BankId).html(banks[i].BankName).appendTo('#InvestmentBank');

                                };
                            }
                            else {
                                debugger;
                                $("#InvestmentBank option").remove();
                                $("#InvestmentBankBranch option").remove();
                                $('<option/>').val(0).html('@resInvestmentLables.select').appendTo('#InvestmentBank');
                                swal({ title: message }, function (isConfirm) { if (isConfirm) { $('#InvestmentBank').focus(); } })
                            }
                        }
                    });
                }
                else { }
            })
        })

    </script>

    @*Bank Change*@
    <script>
        $(function () {
            $('#InvestmentBank').change(function () {
                debugger;
                var Bank = $('#InvestmentBank').val();
                var message = "NoBranchMappedForSelectedBank";
                if (Bank > 0) {
                    //BankTypeChange(BankType, message);

                    $.ajax({
                        url: '@Url.Action("GetBankBranchDetails")',
                        type: 'Get',
                        data: { bankId: Bank },
                        datatype: 'json',
                        contentType: 'application/json',
                        success: function (result) {
                            debugger;
                            var banks = result.object1;
                            debugger;
                            if (banks.length > 0) {
                                debugger;
                                $("#InvestmentBankBranch option").remove();
                                $('<option/>').val(0).html('@resInvestmentLables.select').appendTo('#InvestmentBankBranch');
                                var bankTypeMstr = banks.length;
                                for (var i = 0; i < bankTypeMstr ; i++) {
                                    debugger;
                                    $('<option/>').val(banks[i].SlNo).html(banks[i].BranchName).appendTo('#InvestmentBankBranch');

                                };
                            }
                            else {
                                debugger;
                                $("#InvestmentBankBranch option").remove();
                                $('<option/>').val(0).html('@resInvestmentLables.select').appendTo('#InvestmentBankBranch');
                                swal({ title: message }, function (isConfirm) { if (isConfirm) { $('#InvestmentBankBranch').focus(); } })
                            }
                        }
                    });
                }
                else { }
            })
        })
    </script>

    @*Bank Change*@
    <script>
        $(function () {
            $('#InvestmentType').change(function () {
                debugger;
                var BankBranch = $('#InvestmentBankBranch').val();
                var InvestmentBankType = $('#InvestmentBankType').val();
                 if (InvestmentBankType == "" || InvestmentBankType == null)
                InvestmentBankType = 0;
            var InvestmentBank = $('#InvestmentBank').val();
            if (InvestmentBank == "" || InvestmentBank == null)
                InvestmentBank = 0;
            var InvestmentType = $('#InvestmentType').val();

            //code Added by Sunil

             if(InvestmentType == 72)
            {
                $('#depositname').hide();
            }
            else
            {
                $('#depositname').show();
            }
            if (InvestmentType == "" || InvestmentType == null)
                InvestmentType = 0;

                var message = 'No Account Exists';
                var formId = $('#formid').val();
                debugger;
                if (InvestmentType > 0) {
                    //BankTypeChange(BankType, message);
                    debugger;
                    $.ajax({
                        url: '@Url.Action("GetInvestmentAccDetails")',
                        type: 'Get',
                        data: { bankType: InvestmentBankType, bank: InvestmentBank, bankBranch: BankBranch, investmentType: InvestmentType, FormId: formId },
                        datatype: 'json',
                        contentType: 'application/json',
                        success: function (result) {
                            debugger;
                            var banks = result.object1;
                            var AccMes = result.object2;
                            debugger;
                            if (banks.length > 0) {
                                debugger;
                                $("#AccountNo option").remove();
                                $('<option/>').val(0).html('@resInvestmentLables.select').appendTo('#AccountNo');
                                var bankTypeMstr = banks.length;
                                for (var i = 0; i < bankTypeMstr ; i++) {
                                    debugger;
                                    $('<option/>').val(bankTypeMstr[i]).html(banks[i]).appendTo('#AccountNo');

                                };
                            }
                            else {
                                debugger;
                                $("#AccountNo option").remove();
                                $('<option/>').val(0).html('@resInvestmentLables.select').appendTo('#AccountNo');
                                swal({ title: AccMes }, function (isConfirm) { if (isConfirm) { $('#AccountNo').focus(); } })
                            }
                        }
                    });
                }
                else { }
            })
        })
    </script>
}









