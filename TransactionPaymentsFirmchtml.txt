@using Intellect.UniteERP.MyResources.FAS
@using Intellect.UniteERP.MyResources.Loans;
@using Intellect.UniteERP.MyResources.Investments;
@model  Intellect.Unite.WebPackages.VoucherProcessing.Model.DTO.TransactionDTO
@{
    ViewBag.Title = "TransactionPaymentFirm";
}
@*<script src="~/assets/js/jquery.min.js"></script>*@

@using (Html.BeginForm())
{

   <div class="widget">
       <div class="widget-body">
           <div class="row">
               <div class="col-xs-2">
                   @Html.LabelFor(model => model.InvestmentType)<span class="required">*</span>
                   @Html.DropDownListFor(model => model.InvestmentType, ViewBag.lstInvestType as IEnumerable<SelectListItem>, ResLoanLables.Select, new { @class = "form-control input-xs" })
               </div>
                <div class="col-sm-2">
                   @Html.LabelFor(model => model.AccountNo)
                   @*@Html.TextBoxFor(model => model.AccountNo, new { @class = "form-control input-xs alphanumwithspecchar", @maxlength = "16", @style = "text-align:right" })*@
                   @Html.DropDownListFor(model => Model.AccountNo, ViewBag.lstAccountNo as SelectList, ResLoanLables.Select, new { @class = "form-control input-xs" })
                   @Html.ValidationMessageFor(model => Model.AccountNo)
                   @Html.HiddenFor(model => Model.InvestmentAccToPost)
               </div>
               <div class="col-sm-2" id="depositname">
                   @Html.LabelFor(model => model.InvestmentDepositType)
                   @Html.TextBoxFor(model => model.InvestmentDepositType, new { @class = "form-control input-xs alphanumwithspecchar", @maxlength = "16", @style = "text-align:right" })
               </div>
               <div class="col-sm-2">
                   @Html.LabelFor(model => model.TempAccountNo)
                   @Html.TextBoxFor(model => model.TempAccountNo, new { @class = "form-control input-xs alphanumwithspecchar", @maxlength = "16", @style = "text-align:right" })
                   @*@Html.DropDownListFor(model => Model.TempAccountNo, ViewBag.lstTermpAccNo as SelectList, "--Select--", new { @class = "form-control input-xs" })
                   @Html.ValidationMessageFor(model => Model.TempAccountNo)*@
               </div>    
                            
                        
       </div>
       <div class="row" id="IsBankControlesVisible">
           <div class="col-sm-2">
                   @Html.LabelFor(model => Model.InvestmentBankType)<span class="required">*</span>
                   @Html.DropDownListFor(model => Model.InvestmentBankType, ViewBag.ListBankType as SelectList, ResLoanLables.Select, new { @class = "form-control input-xs" })
                  
               </div>
               <div class="col-sm-2">
                   @Html.LabelFor(model => Model.InvestmentBank)<span class="required">*</span>
                   @Html.DropDownListFor(model => Model.InvestmentBank, ViewBag.lstBankMaster as SelectList, ResLoanLables.Select, new { @class = "form-control input-xs" })
                   @Html.ValidationMessageFor(model => Model.InvestmentBank)
               </div>
               <div class="col-sm-2">
                   @Html.LabelFor(model => Model.InvestmentBankBranch)<span class="required">*</span>
                   @Html.DropDownListFor(model => Model.InvestmentBankBranch, ViewBag.lstBankBranchMaster as SelectList, ResLoanLables.Select, new { @class = "form-control input-xs" })
                   @Html.ValidationMessageFor(model => Model.InvestmentBankBranch)
               </div> 
       </div>
       </div>
   </div>

    <div class="widget">
        <div id="Transferdialog" title="Basic dialog"></div>
        <div class="widget-header bordered-top bordered-palegreen">
            <span class="widget-caption">@resFasLables.TransactionScreenForPayment</span>
            <a href="#divcontrols" data-toggle="modal" data-target="#ErrostList" id="btnerrordetails" style="display:none; text-transform:uppercase;font-family: Verdana, Arial, Helvetica, sans-serif;font-weight: bold; color: red">@resFasMessages.CheckIssuesforParticularAccount</a>

        </div>

        <div class=" widget-body">
            <div class="row">

                <div class="col-sm-2">
                    @Html.HiddenFor(model => model.XML)                    
                    @Html.LabelFor(model => model.TransactionDate)
                    @Html.HiddenFor(i => i.ProductTypeId, new { @id = "ProductTypeId" })
                    @Html.TextBoxFor(model => model.TransactionDate, "{0:yyyy-MM-dd}", new { @class = "form-control input-xs applydisable", @type = "date", @readonly = true, @Tabindex = -1 })
                    @*@Html.TextBoxFor(model => model.Item2.FromDate, new { @class = "form-control input-xs" })*@
                    @* @Html.ValidationMessageFor(model => model.TransactionDate)*@
                    @Html.HiddenFor(model => model.AddmissionPkey)
                    @Html.HiddenFor(model => model.AccountCode)
                    @Html.HiddenFor(model => model.ProductID)                    
                    @Html.Hidden("fromdate")
                    @Html.Hidden("todate")
                    @Html.Hidden("formid")
                    @Html.Hidden("AccountPkey")
                    @Html.Hidden("saveupdate")
                    @Html.Hidden("denominationid")
                    @Html.HiddenFor(model => model.FinancialTransactionType)
                </div>
                <div class="col-sm-2">
                    @Html.LabelFor(model => model.ValueDate)
                    @Html.TextBoxFor(model => model.ValueDate, "{0:yyyy-MM-dd}", new { @class = "form-control input-xs", @type = "date" })
                    @*@Html.TextBoxFor(model => model.Item2.FromDate, new { @class = "form-control input-xs" })*@
                    @*@Html.ValidationMessageFor(model => model.ValueDate)*@
                    @* @Html.Raw(model => model.XMLDoc)*@

                    @*@Html.TextAreaFor(model => model.XMLDoc.InnerXml)*@
                </div>
                <div class="col-sm-2">
                    @Html.LabelFor(model => model.Product)<span class="required">*</span>
                    @Html.DropDownListFor(model => model.Product, ViewBag.productlist as SelectList, ResLoanLables.Select, new { @class = "form-control input-xs" })
                    @*@Html.ValidationMessageFor(model => model.Product)*@
                </div>
                @*<div class="col-xs-2">*@
                    @*<div class="col-sm-8" style="margin-top:-8px; margin-left:-35px; width:150px;">
                        @Html.LabelFor(model => model.AccountNo)<span class="required">*</span>
                        @Html.DropDownListFor(model => model.AccountNo, ViewBag.AccountNoList as SelectList, "-Select-", new { @class = "form-control  input-xs", @style = "padding-left: 2px;width:145px;" })
                    </div>
                    <div class="col-sm-4" style="margin-top:-8px; ">
                        @Html.LabelFor(model => model.TempAccountNo)
                        @Html.TextBoxFor(model => model.TempAccountNo, new { @id = "TempAccountNo", @disabled = "true", @class = "form-control input-xs", @style = "width: 75px;" })
                    </div>*@
                    @*@Html.LabelFor(model => model.InvestmentType)<span class="required">*</span>
                    @Html.DropDownListFor(model => model.InvestmentType, ViewBag.lstInvestType as IEnumerable<SelectListItem>, "-Select-", new { @class = "form-control input-xs" })*@                                      
                @*</div>*@
                <div class="col-sm-2">
                    @Html.LabelFor(model => model.ActivityType)<span class="required">*</span>
                    @Html.DropDownListFor(model => model.ActivityType, ViewBag.ListOfActivity as IEnumerable<SelectListItem>, ResLoanLables.Select, new { @class = "form-control input-xs" })
                    @*@Html.ValidationMessageFor(model => model.ActivityType)*@
                </div>

                <div class="col-sm-2">
                    @Html.LabelFor(model => model.VoucherType)<span class="required">*</span>
                    @Html.DropDownListFor(model => model.VoucherType, ViewBag.TransactionTypeList as SelectList, ResLoanLables.Select, new { @class = "form-control input-xs" })
                    @*@Html.ValidationMessageFor(model => model.VoucherType)*@
                </div>
                <div class="col-sm-2">
                    @Html.LabelFor(model => model.SocietyVoucherNo)
                    @Html.TextBoxFor(model => model.SocietyVoucherNo, new { @class = "form-control input-xs alphanumwithspecchar", @maxlength = "10", @style = "text-align:right" })
                    @*@Html.ValidationMessageFor(model => model.CollectonAmount)*@
                </div>
                
            </div>
            <div class="row">

                @*<div class="col-sm-2" id="collectionAmountID">
                        @Html.LabelFor(model => model.CollectonAmount)<span> ( <i class="fa fa-rupee (alias)"></i> )</span>
                        @Html.TextBoxFor(model => model.CollectonAmount, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @maxlength = "9" })
                        @Html.ValidationMessageFor(model => model.CollectonAmount)
                    </div>*@
                <div class="col-sm-2" id="batchno">
                    @Html.LabelFor(model => model.BatchID)
                    @Html.TextBoxFor(model => model.BatchID, new { @class = "form-control input-xs applynumbers applydisable", @readonly = true, id = "txtbatchid" })
                    @*@Html.ValidationMessageFor(model => model.BatchID)*@
                </div>
               
                <div class="col-sm-2" id="batchamount">
                    @Html.LabelFor(model => model.BatchAmount)<span> ( <i class="fa fa-rupee (alias)"></i> )</span>
                    @Html.TextBoxFor(model => model.BatchAmount, new { @class = "form-control input-xs applydecimal", @readonly = true, id = "txtbatchamount", @Tabindex = -1 })
                </div>
                <div class="col-sm-2" id="checkno">
                    @Html.LabelFor(model => model.ChequeNo)<span class="required">*</span>
                    @Html.TextBoxFor(model => model.ChequeNo, new { @class = "form-control input-xs applynumbers", @MaxLength = "10" })
                    @*@Html.ValidationMessageFor(model => model.ChequeNo)*@
                </div>
                <div class="col-sm-2" id="checkdate">
                    @Html.LabelFor(model => model.ChequeDate)
                    @Html.TextBoxFor(model => model.ChequeDate, "{0:yyyy-MM-dd}", new { @class = "form-control input-xs", @type = "date" })
                    @*@Html.ValidationMessageFor(model => model.ChequeDate)*@
                </div>
                <div class="col-sm-2" id="voucherno">
                    @Html.LabelFor(model => model.VoucherNo)
                    @Html.TextBoxFor(model => model.VoucherNo, new { @class = "form-control input-xs applynumbers", @Tabindex = -1 })
                    @* @Html.ValidationMessageFor(model => model.VoucherNo)*@
                </div>
                <div class="col-sm-2" id="contraproduct">
                    @Html.LabelFor(model => model.ContraProduct)
                    @Html.DropDownListFor(model => model.ContraProduct, ViewBag.Contraproductlist as IEnumerable<SelectListItem>, ResLoanLables.Select, new { @class = "form-control input-xs" })
                    @* @Html.ValidationMessageFor(model => model.VoucherNo)*@
                </div>
                <div class="col-sm-2" id="contraAccountNo">
                    @Html.LabelFor(model => model.ContraAccountNo)
                    @Html.DropDownListFor(model => model.ContraAccountNo, ViewBag.ContraAccountNoList as IEnumerable<SelectListItem>, ResLoanLables.Select, new { @class = "form-control input-xs" })
                    @* @Html.ValidationMessageFor(model => model.VoucherNo)*@
                </div>
                <div class="col-sm-2" id="contraAccountBal">
                    @Html.LabelFor(model => model.ContraAccountBalance)<span> ( <i class="fa fa-rupee (alias)"></i> )</span>
                    @Html.TextBoxFor(model => model.ContraAccountBalance, new { @class = "form-control input-xs applydecimal", @readonly = true, @maxlength = "10", @Tabindex = -1, @style = "text-align:right" })
                    @*@Html.ValidationMessageFor(model => model.CollectonAmount)*@
                </div>
                <div class="col-sm-2" id="NarrationForSBPassBookPrint">
                    @Html.LabelFor(model => model.NarrationForSBTransactions)
                    @Html.TextBoxFor(model => model.NarrationForSBTransactions, new { @class = "form-control input-xs", @MaxLength = "25" })
                    @* @Html.ValidationMessageFor(model => model.VoucherNo)*@
                </div>              
            </div>

        </div>

    </div>
    <hr style="width:100%;color:green;margin-top:2px;margin-bottom:4px" />
    <div style="height:190px;overflow:auto">
        <table id="VoucherDetails" class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th>
                        @resFasLables.Particulars
                    </th>

                    <th style="text-align:center">
                        @resFasLables.MaxAmount<span> ( <i class="fa fa-rupee (alias)"></i> )</span>
                    </th>
                    <th style="text-align:center">
                        @resFasLables.Amount<span> ( <i class="fa fa-rupee (alias)"></i> )</span>
                    </th>

                </tr>
            </thead>
            <tbody class="border-left" style="font-size: 13px;">
                @{
    IList<Intellect.Unite.WebPackages.VoucherProcessing.Model.DTO.TransactionDTO> objparticulars = (IList<Intellect.Unite.WebPackages.VoucherProcessing.Model.DTO.TransactionDTO>)ViewBag.listTempTransactionDTO;
    if (objparticulars != null)
    {
        if (objparticulars.Count == 0)
        {
            <tr>
                <td colspan="3"></td>
            </tr>
        }
        foreach (var v in objparticulars)
        {
            <tr>
                <td>
                    @v.Particulars
                </td>

                <td style="text-align:right">
                    @v.MaxAmount
                </td>
                <td style="text-align:right">

                    @v.Amount
                    @*<input type="checkbox" id="Delete" value="@v.Delete">*@
                </td>
            </tr>
        }
    }
    else
    {
        <tr>
            <td colspan="3">
                @resFasMessages.NoRowsFound
            </td>
        </tr>
    }

                }
            </tbody>
        </table>

        <a href="#divcontrols" class="pull-right" data-toggle="modal" style="color:blue" data-keyboard="false" data-target="#OtherVoucherDetails" id="addtransctions" onclick="resetFieldsforAddOther()">@resFasLables.AddOtherParticulars</a>

    </div>
    <div id="OtherVoucherDetails" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content" style="width:900px">
                <div class="modal-header" tabindex="-1">
                    <button type="button" id="btnClose" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">@resFasLables.OtherParticulars</h4>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-sm-12">
                            <div class="col-xs-7">
                                @Html.LabelFor(model => model.Ledger)
                                @Html.DropDownListFor(model => model.Ledger, ViewBag.listOfOtherCharges as SelectList, ResLoanLables.Select, new { @class = "form-control input-xs" })
                                @Html.ValidationMessageFor(model => model.Ledger)
                            </div>

                            <div class="col-xs-3">
                                @Html.LabelFor(model => model.Amount)<span> ( <i class="fa fa-rupee (alias)"></i> )</span>
                                @Html.TextBoxFor(model => model.Amount, new { @class = "form-control input-xs applydecimal", @MaxLength = "10", @style = "text-align:right" })
                                @Html.ValidationMessageFor(model => model.Amount)
                            </div>

                        </div>
                    </div>
                </div>
                <div class="modal-footer">

                    <label class="pull-left" style="color:red"><span class="h5"></span>@resFasMessages.Markedfieldsarerequired &nbsp;</label>
                    @*<button class="btn btn-primary" id="btnAdd " accesskey="A" title="Alt+A" onclick="AddFields()">@resFasLables.Add</button>*@
                    <input type="button" value="@resFasLables.Add" class="btn btn-primary" id="btnAdd" accesskey="A" title="Alt+A" onclick="AddFields()" />
                    @*@<button type="button" id="btnClose" class="btn btn-default" data-dismiss="modal">Close</button>*@

                </div>

            </div>

        </div>
    </div>
    <div class="row">

        <div class="col-sm-8" style="color: red">
            @Html.LabelFor(model => model.AmountInWords)
            @Html.TextBoxFor(model => model.AmountInWords, new { @class = "form-control input-xs applydisable", @readonly = true, @Tabindex = -1 })
            @*@Html.ValidationMessageFor(model => model.AmountInWords)*@
        </div>
        <div class="col-sm-2" style="color: red">
            @Html.LabelFor(model => model.TotalAmount)<span> ( <i class="fa fa-rupee (alias)"></i> )</span>
            @Html.TextBoxFor(model => model.TotalAmount, new { @class = "form-control input-xs applydisable applydecimal ", @style = "text-align:right", @readonly = true, @Tabindex = -1 })
            @*@Html.ValidationMessageFor(model => model.TotalAmount)*@
        </div>
        <div class="col-sm-2" style="color: red">
            @Html.LabelFor(model => model.CashBalance)<span> ( <i class="fa fa-rupee (alias)"></i> )</span>
            @Html.TextBoxFor(model => model.CashBalance, new { @class = "form-control input-xs applydisable applydecimal ", @readonly = true, @Tabindex = -1, @style = "text-align:right" })
            @*@Html.ValidationMessageFor(model => model.CashBalance)*@
        </div>
    </div>
    <div class="row">
        <div class="col-sm-8">
            @Html.LabelFor(model => model.Narration)
            @Html.TextBoxFor(model => model.Narration, new { @class = "form-control input-xs " })
            @Html.ValidationMessageFor(model => model.Narration)
            <label class="pull-left" style="color:red"><span class="h5"></span>@resFasMessages.Markedfieldsarerequired &nbsp;</label>
            <input type="submit" value="@resFasLables.Prepare" class="btn btn-primary" id="btnPost" name="command" style="visibility:hidden" />
        </div>

        <div class="col-sm-4 btn-group">
            <div>
                <br />
                <button type="button" value="@resFasLables.Prepare" class="btn btn-default" id="btnSave" accesskey="S" title="Alt+S" onclick="resetPostFields();"><i class="fa fa-save"></i> @resFasLables.Save</button>
                <button type="button" value="@resFasLables.Clear" class="btn btn-default" id="btnClear" name="command" accesskey="C" title="Alt+C" onclick="resetFields();"><i class="fa fa-remove"></i> @resFasLables.Clear</button>
                <button type="button" href="#divcontrols" data-toggle="modal" data-target="#CommomControllRecord" id="idCommonControll" onclick="GetControlRecord();" title="Control Records" class="btn btn-default"><i class="fa fa-list"></i>@ResLoanLables.ControlRecord</button>
                @*<button type="button" href="#divcontrols" data-toggle="modal" data-target="#ScrollBookRecord" id="idScrollControll" onclick="GetScrollRecord();" title="Scroll Records" class="btn btn-default">Payments</button>*@
            </div>
        </div>

        <div class="col-sm-1" id="cashdenomination">
            <br />
            <a href="#CashDenominationDetails" class="pull-right" style="color:blue" data-toggle="modal" data-keyboard="false" data-target="#CashDenominationDetails" id="Denomination">@resFasLables.Denomination</a>
        </div>
    </div>
    <hr style="width:100%;color:green;margin-top:2px;margin-bottom:4px" />
    <div class="widget">
        <div class="widget-header bordered-top bordered-palegreen">
            <div style="margin-top:-4px;color: red">
                <div class="col-sm-2">
                    <div>
                        <a hidden href="#divcontrols" id="viewAccountDetails" class="pull-right" style="text-align:center;color: red">@resFasLables.ViewAccount</a>
                    </div>
                </div>
                <div class="col-sm-2">
                    <div>
                        <a href="#divcontrols" data-toggle="modal" style="display:none;color:red" data-target="#sanctiondetails" id="btnviewsanctions" onclick="GetSanctionDetails();">@resFasLables.TransactionDetails</a>
                    </div>
                </div>
                <div class="col-sm-2">
                    <div>
                        @*<a href='@Url.Action("TermDepositForeClosure", "TermDepositForeClosure", new { area = "TermDeposits", admissionPKey = "admissionpkey", DepositNo = "accountno", Product = "product" })' data-togg data-toggle="modal" style="color:red" data-target="#InstalmentChart" id="TermForeClosure" onclick="">@resFasLables.TermForeClosure</a>*@
                        <a href="#TermDepositForeClosure" style="color:red" id="TermForeClosure" class="pull-right">@resFasLables.TermForeClosure</a>
                    </div>
                </div>
                <div class="col-sm-2" style="color: red">
                    <div>
                        @*<a href='@Url.Action("TermDepositForeClosure", "TermDepositClosure", new { area = "TermDeposits", admissionPKey = "admissionpkey", DepositNo = "accountno", Product = "product" })' data-toggle="modal" data-target="#InstalmentChart" style="color: red" id="TermClosure" onclick="">@resFasLables.TermClosure</a>*@
                        <a href="#TermDepositClosure" style="color:red" id="TermClosure" class="pull-right">@resFasLables.TermClosure</a>
                    </div>
                </div>
                <div class="col-sm-2" style="color: red">
                    <div>
                        @*<a href='@Url.Action("TermInterestPayment", "TermInterestPayment", new { area = "TermDeposits", admissionPKey = "admissionpkey", Product = "product", DepositNo = "accountno" })' data-toggle="modal" data-target="#InstalmentChart" style="color: red" id="TermInterestPayment" onclick="">@resFasLables.TermInterestPayment</a>*@

                        <a href="#TermInterestPay" style="color:red" id="TermInterestPayment" class="pull-right">@resFasLables.TermInterestPayment</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
    

    <div id="CashDenominationDetails" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content" style="width:500px">
                <div class="modal-header" tabindex="-1">
                    <button type="button" id="denominationClose" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">@resFasLables.DenominationDetails</h4>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-sm-12">
                            <div style="height:425px; overflow:auto;">
                                <table id="CashDenominationtable" class="table table-bordered table-hover">
                                    <thead>
                                        <tr>
                                            <th>
                                                @resFasLables.CashDetails
                                            </th>
                                            <th>
                                               @resInvestmentLables.NoIn
                                            </th>
                                            <th>
                                                @resInvestmentLables.TotalIn
                                            </th>
                                            <th>
                                               @resInvestmentLables.NoOut
                                            </th>
                                            <th>
                                                @resInvestmentLables.TotalOut
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @{

    for (int i = 0; i < 9; i++)
    {
        <tr>
            @if (i == 0)
            {
                <td>
                    @Html.LabelFor(model => model.objDenominationDTO.Thousands)
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.Thousands, new { @class = "form-control input-xs applydecimal", @MaxLength = "4", @style = "text-align:right", @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.ThousandsTotal, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @readonly = true, @Tabindex = -1, @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.OutThousands, new { @class = "form-control input-xs applydecimal", @MaxLength = "4", @style = "text-align:right", @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.OutThousandsTotal, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @readonly = true, @Tabindex = -1, @autocomplete = "Off" })
                </td>
            }
            @if (i == 1)
            {
                <td>
                    @Html.LabelFor(model => model.objDenominationDTO.FiveHundreds)
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.FiveHundreds, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @MaxLength = '4', @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.FiveHundredsTotal, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @readonly = true, @Tabindex = -1, @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.OutFiveHundreds, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @MaxLength = '4', @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.OutFiveHundredsTotal, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @readonly = true, @Tabindex = -1, @autocomplete = "Off" })
                </td>
            }
            @if (i == 2)
            {
                <td>
                    @Html.LabelFor(model => model.objDenominationDTO.Hundreds)
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.Hundreds, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @MaxLength = '4', @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.HundredsTotal, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @readonly = true, @Tabindex = -1, @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.OutHundreds, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @MaxLength = '4', @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.OutHundredsTotal, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @readonly = true, @Tabindex = -1, @autocomplete = "Off" })
                </td>
            }
            @if (i == 3)
            {
                <td>
                    @Html.LabelFor(model => model.objDenominationDTO.Fifties)
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.Fifties, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @MaxLength = '4', @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.FiftiesTotal, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @readonly = true, @Tabindex = -1, @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.OutFifties, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @MaxLength = '4', @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.OutFiftiesTotal, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @readonly = true, @Tabindex = -1, @autocomplete = "Off" })
                </td>
            }
            @if (i == 4)
            {
                <td>
                    @Html.LabelFor(model => model.objDenominationDTO.Twenties)
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.Twenties, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @MaxLength = '4', @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.TwentiesTotal, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @readonly = true, @Tabindex = -1, @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.OutTwenties, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @MaxLength = '4', @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.OutTwentiesTotal, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @readonly = true, @Tabindex = -1, @autocomplete = "Off" })
                </td>
            }
            @if (i == 5)
            {
                <td>
                    @Html.LabelFor(model => model.objDenominationDTO.Tens)
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.Tens, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @MaxLength = '4', @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.TensTotal, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @readonly = true, @Tabindex = -1, @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.OutTens, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @MaxLength = '4', @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.OutTensTotal, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @readonly = true, @Tabindex = -1, @autocomplete = "Off" })
                </td>
            }
            @if (i == 6)
            {
                <td>
                    @Html.LabelFor(model => model.objDenominationDTO.Fives)
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.Fives, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @MaxLength = '4', @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.FivesTotal, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @readonly = true, @Tabindex = -1, @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.OutFives, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @MaxLength = '4', @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.OutFivesTotal, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @readonly = true, @Tabindex = -1, @autocomplete = "Off" })
                </td>
            }
            @if (i == 7)
            {
                <td>
                    @Html.LabelFor(model => model.objDenominationDTO.Twos)
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.Twos, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @MaxLength = '4', @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.TwosTotal, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @readonly = true, @Tabindex = -1, @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.OutTwos, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @MaxLength = '4', @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.OutTwosTotal, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @readonly = true, @Tabindex = -1, @autocomplete = "Off" })
                </td>
            }
            @if (i == 8)
            {
                <td>
                    @Html.LabelFor(model => model.objDenominationDTO.Ones)
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.Ones, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @MaxLength = '4', @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.OnesTotal, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @readonly = true, @Tabindex = -1, @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.OutOnes, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @MaxLength = '4', @autocomplete = "Off" })
                </td>
                <td>
                    @Html.TextBoxFor(model => model.objDenominationDTO.OutOnesTotal, new { @class = "form-control input-xs applydecimal", @style = "text-align:right", @readonly = true, @Tabindex = -1, @autocomplete = "Off" })
                </td>
            }

        </tr>
    }

                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-12" style="text-align:right">

                            @Html.LabelFor(model => model.objDenominationDTO.Total)

                            @Html.TextBoxFor(model => model.objDenominationDTO.Total)

                            @Html.TextBoxFor(model => model.objDenominationDTO.OutTotal)

                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <input type="button" value="@resFasLables.Add" class="btn btn-primary" id="btnAddDenamination" accesskey="A" title="Alt+A" onclick="AddDenamination();" />

                </div>
            </div>

        </div>
    </div>

    <div id="ScrollBookRecord" class="modal fade" role="dialog">

        <div class="modal-dialog">
            <div class="modal-content" style="width: 760px">

                <div class="modal-body">


                    <div class="widget">
                        <div class="widget-header bordered-left bordered-blue">

                            <span class="widget-caption">@resFasLables.PaymentRecords</span>
                            <div class="pull-right" style=" margin-right: 15px; ">
                                @*<a href="/Home/Index" class="fa fa-home" style="font-size:25px"></a>*@
                                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                            </div>
                        </div>
                        <div class="widget-body bordered-left bordered-blueberry">
                            <div class="row">

                                <div class="col-xs-3">
                                    @Html.LabelFor(model => model.ModulName)
                                    @Html.DropDownListFor(model => model.ModulName, ViewBag.Modulelist as SelectList,ResLoanLables.Select, new { @class = "form-control input-xs" })
                                    @*@Html.ValidationMessageFor(model => model.ModulName)*@
                                </div>
                                <div class="col-xs-3">
                                    @Html.LabelFor(model => model.Activity)
                                    @Html.DropDownListFor(model => model.Activity, ViewBag.ActivityCombo as SelectList, ResLoanLables.Select, new { @class = "form-control input-xs" })
                                    @*@Html.ValidationMessageFor(model => model.ModulName)*@
                                </div>
                                <div class="col-xs-2">
                                    @Html.Label(resFasLables.PassStatus)
                                    @Html.DropDownList(resFasLables.PassStatus, new List<SelectListItem>
                                    {
                                        new SelectListItem{ Text=resFasLables.NotPosted, Value="1"},
                                        new SelectListItem{ Text=resFasLables.Posted, Value="2"}

                                    }, ResLoanLables.Select, new { @class = "form-control input-xs" })
                                </div>
                                <div class="col-sm-1">
                                    <br />
                                    <input type="submit" value="@resFasLables.View" class="btn btn-primary" id="btnView " onclick="GetScrollRecord();" name="command" accesskey="V" title="Alt+V" />
                                </div>

                            </div>

                            <div style=" width: 710px">

                                <div class="row">
                                    <div class="col-sm-12">

                                        <div style="height:650px; overflow:auto;">
                                            <table id="ScrollRecord" class="table table-bordered table-hover">
                                                <thead>
                                                    <tr>
                                                        @*<th>User ID  </th>*@
                                                        <th style="width:95px;">@resFasLables.VoucherNo</th>
                                                        <th style="width:95px;">@resFasLables.Date </th>
                                                        <th style="width:95px;">@resFasLables.Module </th>
                                                        <th style="width:95px;">@resFasLables.Activity</th>
                                                        <th style="width:135px;">@resFasLables.Particulars </th>
                                                        <th style="width:95px;">@resFasLables.PassStatus</th>
                                                        <th style="width:100px;text-align:center">@resFasLables.Amount<span> ( <i class="fa fa-rupee (alias)"></i> )</span></th>
                                                        @*<th style="width:50px;">Credit</th>*@
                                                        @*<th>Key Value</th>*@
                                                    </tr>
                                                </thead>
                                                <tbody>

                                                    @{

                                                    }
                                                </tbody>

                                            </table>
                                        </div>

                                    </div>

                                </div>
                            </div>

                        </div>

                    </div>

                </div>
                <div class="modal-footer">

                    <div class="row">

                        <div class="col-sm-10" style="text-align:right">
                            @Html.Label("Total")<span> ( <i class="fa fa-rupee (alias)"></i> )</span>
                        </div>
                        <div class="col-sm-1" style="text-align:left">
                            <label id="TotalPayment"></label>
                        </div>

                    </div>
                </div>
            </div>

        </div>
    </div>
    <div id="LastVoucherDetailsmod" class="modal fade" role="dialog">

        <div class="modal-dialog">
            <div class="modal-content" style="width: 760px">

                <div class="modal-body">
                    <div class="widget">

                        <div class="widget-body bordered-left bordered-blueberry">


                            <div style=" width: 710px">

                                <div class="row">
                                    <div class="col-sm-12">

                                        <div id="LastVoucherDetailsDiv" style="height:650px; overflow:auto;">
                                            <table id="LastVoucherDetails" class="table table-bordered table-hover">
                                                <thead>
                                                    <tr>
                                                        @*<th>User ID  </th>*@

                                                        <th style="width:120px;">@resFasLables.Date </th>
                                                        <th style="width:120px;"> @resFasLables.Particulars</th>
                                                        <th style="width:100px;text-align:center">@resFasLables.Debit<span> ( <i class="fa fa-rupee (alias)"></i> )</span></th>
                                                        <th style="width:110px;text-align:center">@resFasLables.Credit<span> ( <i class="fa fa-rupee (alias)"></i> )</span></th>
                                                        @*<th style="width:50px;">Credit</th>*@
                                                        @*<th>Key Value</th>*@
                                                    </tr>
                                                </thead>
                                                <tbody>

                                                    @{

                                                    }
                                                </tbody>

                                            </table>
                                        </div>

                                    </div>

                                </div>
                            </div>

                        </div>
                    </div>

                </div>
                <div class="modal-footer">


                </div>
            </div>

        </div>

    </div>
}
@using (Html.BeginForm())
{
    @Html.Hidden("VoucherNoForPening")
    <input type="submit" value="Post" class="btn btn-primary hide" id="btnLastVchrPost" />
}

<div id="MemberAccountDetails">
</div>
@*<script src="~/assets/js/shotcut.js"></script>
<link href="~/assets/dist/sweetalert.css" rel="stylesheet" />
<script src="~/assets/dist/sweetalert.min.js"></script>*@
<script src="~/Scripts/ModuleScripts/FasScripts/TransactionPayment.js"></script>

<script>

    $('#InstalmentChart').on('hidden.bs.modal', function (e) {
         ;
        $(e.target).removeData('bs.modal');
    });

    $('.alphanumwithspecchar').keypress(function (e) {
        return AlphaNumWithSpecialCharactersCheck(e);
    });
    $("#SocietyVoucherNo").focusout(function () {
        debugger;
        var result = false; var svno = $('#SocietyVoucherNo').val();
        $.ajax({
            type: "GET",
            url: '@Url.Action("IsSocietyVoucherNoExists", "TransactionReceipt", new { area = "FAS" })',
            data: { SocietyVoucherNo: $('#SocietyVoucherNo').val() },
            dataType: "json",
            async: false,
            success: function (msg) {
                debugger;
                if (msg.isExistSocietyVoucherNo == true) {
                    $('#SocietyVoucherNo').val('');
                    $('#SocietyVoucherNo').focus();
                    swal({
                        title: '@resFasLables.SocietyVoucherNo' + svno + '@resInvestmentLables.alreadyenteredtoday', html: true
                    },
                     function (isConfirm) {
                         $('#SocietyVoucherNo').focus();
                     });

                    result = msg;
                    return false;
                }
                result = msg;
                return true
            }
        });
        debugger;
        if (result == true)
            return false;
    });
    function resetFields() {
        debugger;
        var formid = '@ViewBag.FormID';
        var logindate = '@ViewBag.logindate';
        var savup = $('#saveupdate').val();
        ResetFields(formid, logindate, savup);
        $('#InvestmentType').focus();
        //$('#InvestmentType').val(0);
        //$('#InvestmentBankType').val(0);

        //$("#InvestmentBankType option").remove();
        //$('<option/>').val(0).html('@resInvestmentLables.select').appendTo('#InvestmentBankType');

        $("#InvestmentBank option").remove();
        $('<option/>').val(0).html('@resInvestmentLables.select').appendTo('#InvestmentBank');

        $("#InvestmentBankBranch option").remove();
        $('<option/>').val(0).html('@resInvestmentLables.select').appendTo('#InvestmentBankBranch');
        
    };



    function resetFieldsforAddOther() {
        debugger;
        $('#Ledger').focus();
    }


</script>


<script>
    $(document).ready(function () {
        membclosid = '@ViewBag.activityId';
        $(document).on('invalid-form.validate', 'form', function () {
            ;
            setTimeout(function () {
                ;
                document.getElementById("btnSave").disabled = false;
                ;
            }, 1);
        });
        $(document).on('submit', 'form', function () {
            ;
            setTimeout(function () {
                ;
                document.getElementById("btnSave").disabled = true;
                ;
            }, 0);
        });

        var pendingforposting = '@TempData["PendingForPosting"]';
        if (pendingforposting == 'True') {
            $('#idvoucherpost').trigger('click');
        }
        $('#viewAccountDetails').click(function () {
            debugger;
            var accountno = document.getElementById("AccountNo").value;
            var productcode = document.getElementById("Product").value;
            var logindate = document.getElementById("TransactionDate").value;
            $('#AccountPkey').val(accountno);
            //var todate = ConvertJsonDateString(vv);
            var fromdate = $('#fromdate').val();
            var w = 900;
            var h = 900;
            var left = (screen.width / 2) - (w / 2);
            var top = (screen.height / 2) - (h / 2);
            //var pageURL = "@Url.Action("AccountReport2", "TransactionPayment", new { area = "FAS", AccountCode = "accountno", ProductID = "product", fromdate = "Fromdate", todate = "Todate" })"
            var pageURL = "@Url.Action("AccountReportParallelRun2", "TransactionPaymentParallelRun", new { area = "FAS", AccountCode = "accountno", ProductID = "product", fromdate = "Fromdate", todate = "Todate" })"
            pageURL = pageURL.replace('accountno', accountno);
            pageURL = pageURL.replace('product', productcode);
            pageURL = pageURL.replace('Fromdate', fromdate);
            pageURL = pageURL.replace('Todate', logindate);
            pageURL = pageURL.replace('amp;', '');
            pageURL = pageURL.replace('amp;', '');
            pageURL = pageURL.replace('amp;', '');
            var title = '@resFasLables.AccountDetails';
            var targetWin = window.open(pageURL, title, 'toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=' + w + ', height=' + h + ', top=' + top + ', left=' + left);
            return targetWin;
            window.open("", "", "width=200, height=100");
        });

        $('#TermInterestPayment').click(function () {
            ;
            var accountno = document.getElementById("AccountNo").value;
            var productcode = document.getElementById("Product").value;
            var admissionPkey = document.getElementById("AddmissionPkey").value;
            $('#AccountPkey').val(accountno);
            var w = 900;
            var h = 800;
            var left = (screen.width / 2) - (w / 2);
            var top = (screen.height / 2) - (h / 2);
            var pageURL = "@Url.Action("TermInterestPayment", "TermInterestPayment", new { area = "TermDeposits", AddmissionPkey = "addmissionkey", ProductID = "product", AccountCode = "accountno" })"
            pageURL = pageURL.replace('addmissionkey', admissionPkey);
            pageURL = pageURL.replace('product', productcode);
            pageURL = pageURL.replace('accountno', accountno);
            pageURL = pageURL.replace('amp;', '');
            pageURL = pageURL.replace('amp;', '');
            var title = '@resInvestmentLables.InterestPaymentDetails';
            var targetWin = window.open(pageURL, title, 'toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=' + w + ', height=' + h + ', top=' + top + ', left=' + left);
            return targetWin;
            window.open("", "", "width=200, height=100");
        });

        $('#TermForeClosure').click(function () {
            ;
            var accountno = document.getElementById("AccountNo").value;
            var productcode = document.getElementById("Product").value;
            var admissionPkey = document.getElementById("AddmissionPkey").value;
            $('#AccountPkey').val(accountno);
            var w = 900;
            var h = 800;
            var left = (screen.width / 2) - (w / 2);
            var top = (screen.height / 2) - (h / 2);
            var pageURL = "@Url.Action("TermDepositForeClosure", "TermDepositForeClosure", new { area = "TermDeposits", AddmissionNo = "addmissionkey", TermDepositNo = "accountno", TermProduct = "product" })"
            pageURL = pageURL.replace('addmissionkey', admissionPkey);
            pageURL = pageURL.replace('product', productcode);
            pageURL = pageURL.replace('accountno', accountno);
            pageURL = pageURL.replace('amp;', '');
            pageURL = pageURL.replace('amp;', '');
            var title = '@resInvestmentLables.ForeclosureDetails';
            var targetWin = window.open(pageURL, title, 'toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=' + w + ', height=' + h + ', top=' + top + ', left=' + left);
            return targetWin;
            window.open("", "", "width=200, height=100");
        });

        $('#TermClosure').click(function () {
            ;
            var accountno = document.getElementById("AccountNo").value;
            var productcode = document.getElementById("Product").value;
            var admissionPkey = document.getElementById("AddmissionPkey").value;
            $('#AccountPkey').val(accountno);
            var w = 900;
            var h = 800;
            var left = (screen.width / 2) - (w / 2);
            var top = (screen.height / 2) - (h / 2);
            var pageURL = "@Url.Action("TermDepositClosure", "TermDepositForeClosure", new { area = "TermDeposits", AddmissionNo = "addmissionkey", TermDepositNo = "accountno", TermProduct = "product" })"
            pageURL = pageURL.replace('addmissionkey', admissionPkey);
            pageURL = pageURL.replace('product', productcode);
            pageURL = pageURL.replace('accountno', accountno);
            pageURL = pageURL.replace('amp;', '');
            pageURL = pageURL.replace('amp;', '');
            var title = '@resInvestmentLables.ClosureDetails';
            var targetWin = window.open(pageURL, title, 'toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=' + w + ', height=' + h + ', top=' + top + ', left=' + left);
            return targetWin;
            window.open("", "", "width=200, height=100");
        });
    });

    function ConvertJsonDateString(jsonDate) {
        var shortDate = null;
        if (jsonDate) {
            var regex = /-?\d+/;
            var matches = regex.exec(jsonDate);
            var dt = new Date(parseInt(matches[0]));
            var month = dt.getMonth() + 1;
            var monthString = month > 9 ? month : '0' + month;
            var day = dt.getDate();
            var dayString = day > 9 ? day : '0' + day;
            var year = dt.getFullYear();
            shortDate = year + '-' + monthString + '-' + dayString;

        }
        return shortDate;
    };
    function ConvertJsonDateStringinDDMMYYYY(jsonDate) {
        var shortDate = null;
        if (jsonDate) {
            var regex = /-?\d+/;
            var matches = regex.exec(jsonDate);
            var dt = new Date(parseInt(matches[0]));
            var month = dt.getMonth() + 1;
            var monthString = month > 9 ? month : '0' + month;
            var day = dt.getDate();
            var dayString = day > 9 ? day : '0' + day;
            var year = dt.getFullYear();
            //shortDate = year + '-' + monthString + '-' + dayString;
            shortDate = dayString + '-' + monthString + '-' + year;
        }
        return shortDate;
    };



    $(function () {
        $("#AccountNo").change(function () {
            debugger;
            //debugger;            
            //var accountno = document.getElementById("AccountNo").value;
            //var productcode = document.getElementById("Product").value;
            //var logindate = document.getElementById("TransactionDate").value;
            //var admissionPkey = document.getElementById("AddmissionPkey").value;
            //var TransactionDetails = document.getElementById("ActivityType").value;
            //$('#AccountPkey').val(accountno);
            //$('#AccountCode').val(accountno);
            //$('#ProductID').val(productcode);
            //$('#todate').val(logindate);
            //$('#VoucherDetails tbody').empty();
            //debugger;
            //GetLastTransactionAndOpeningDate(accountno, productcode, logindate);
            //GetVoucherPrepareByActivityid(TransactionDetails, accountno, productcode, admissionPkey);
        }
            )
    });



    $(function () {
        $("#ActivityType").change(function () {
            //var stateid = document.getElementById("Item2_State").value;
            debugger;


            var TransactionDetails = document.getElementById("ActivityType").value;
            var accountno = $("#AccountNo option:selected").text()//document.getElementById("AccountNo").value;
            var productcode = document.getElementById("Product").value;
            var admissionPkey = document.getElementById("AddmissionPkey").value;
            var accpkey = $("#AccountNo option:selected").val()
            $('#AccountPkey').val(accpkey);
            GetVoucherPrepareByActivityid(TransactionDetails, accountno, productcode, admissionPkey);

        }
            )
    });



    $(function () {
        $("#Product").change(function () {
            ////var stateid = document.getElementById("Item2_State").value;
            //;
            debugger;
            var productcode = 34; //document.getElementById("Product").value;
            var accountNo = $("#AccountNo option:selected").text(); //$('#AccountNo').val();
            $('#XML').val('');
            $("#TotalAmount").val(parseFloat(''));
            $('#Narration').val('');
            $('#CollectonAmount').val(parseFloat(''));
            //$("#AccountNo").empty();
            //$('#AccountNo').append('<option value="0">--Select--</option>');
            $("#ActivityType").empty();
            $('#ActivityType').append('<option value="0">@resInvestmentLables.select</option>');
            $('#VoucherDetails tbody').empty();
            //$('#TempAccountNo').val('');
            GetAccountDetails(productcode, accountNo);
        }
            )
    });
    
    $(function () {
        $("#AccountNo").change(function () {
            debugger;
            //var productcode = document.getElementById("Product").value;
            //var accountNo = $('#AccountNo').val();
            var accountNo = $("#AccountNo option:selected").text();
            //debugger;
            //GetProductDetails(accountNo);
            //GetOpeningbalance();
            $('#Product').trigger('change');
            //var productcode = document.getElementById("Product").value;
            //var accountNo = $("#AccountNo option:selected").text(); //$('#AccountNo').val();
            //GetAccountDetails(productcode, accountNo);
        })
    })
    //$(function () {
    //    $("#AccountNo").focusout(function () {
    //        debugger;
    //        $('#Product').trigger('change');
    //    })
    //})
    //$(function () {
    //    $("#InvestmentType").change(function () {
    //        debugger;
    //        var InvestmentType = document.getElementById("InvestmentType").value;            
    //        GetBankTypeMasterBasedOnInvestmentType(InvestmentType);
    //    })
    //})

    function AddFields() {
        var LedgerId = document.getElementById("Ledger").value;
        var product = document.getElementById("Product").value;
        //var admissionno = $('#Admissionno').val();
        debugger;
        var amount = $('#Amount').val();
        if (amount == 0 && amount == "") {
            $('#Amount').focus();
            return false;
        }
        $.ajax({
            type: "Get",
            url: '@Url.Action("GetOtherChargeDetails", "TransactionPayment")',
            data: { ledgercode: LedgerId, productcode: product },
            datatype: "json",
            success: function (otherVoucherDetails) {
                debugger;
                if (otherVoucherDetails != null) {
                    var amount = $('#Amount').val();
                    var $tr = $('<tr>').append(
                        $('<td>').text(otherVoucherDetails.LedgerDescription),
                        $('<td style="text-align:right">').html("<input id='maxAmount' type='hidden' value=" + Number(amount).toFixed(2) + ">"),
                       $('<td style="text-align:center">').html("<input id='transrollDesc' type='hidden' value=" + otherVoucherDetails.TransRollDescription + "><input id='transrollid' type='hidden' value=" + otherVoucherDetails.TransRollID + "><input id='ledgerid' type='hidden' value=" + otherVoucherDetails.LedgerID + "><input id='vouchertext' class='form-control input-xs applydecimal' type='text'  style='text-align:right' maxlength='10' value=" + Number(amount).toFixed(2) + " onchange='ChangeAmount(this)' onkeyup='return AllowNumbersWithTwoDecimals(this)' >"),
                        $('<td hidden>').html("<input id='ledgerdesc' type='hidden' value=" + otherVoucherDetails.LedgerDescription + ">"),
                        $('<td hidden>').html("<input id='actualAmount' type='hidden' value=" + '' + ">")
                        ).appendTo('#VoucherDetails tbody');
                    ChangeAmount(this);
                    //sweetAlert("Data Added");
                    $('#Amount').val('');
                    $('#btnClose').trigger('click');
                    $('#Narration').focus();
                }
                else {
                    //swal({ title: "Unite", text: "<span><b>Admission No. does not exists</b></span>", html: true });
                    sweetAlert({ title: '@resFasMessages.Nodatafound', html: true });
                    //return false;
                }

            }
        })
    };

    function AddDenamination() {
        $('#denominationClose').trigger('click');
    }

    var MinShareBalance = "";
    $(document).ready(function () {
        MinShareBalance = '@ViewBag.MinShareBalance';
        $('.modal').on('shown.bs.modal', function (e) {

            $('#Ledger').focus(); //ControlId in id of control on popup
        });

        $('#TempAccountNo').focusout(function () {
            debugger;
            @*$('#btnerrordetails').hide();
            debugger;
            var tempAccNo = $('#TempAccountNo').val();
            var formid = '@ViewBag.FormID';
            if (tempAccNo == "" && tempAccNo =="0") {
                var formid = '@ViewBag.FormID';
                var logindate = '@ViewBag.logindate';
                var savup = $('#saveupdate').val();
                ResetFields(formid, logindate, savup);
                return;
            }
            $.ajax({
                type: "Get",
                url: '@Url.Action("GetAccountCodeByTempAcc", "TransactionPaymentsFirm")',
                data: { TempAccNo: tempAccNo},
                datatype: "json",
                success: function (result) {
                    debugger;
                    if (result != "") {
                        document.getElementById('AccountNo').value = result;
                        document.getElementById('TempAccountNo').value = tempAccNo;
                        GetProductDetails(result);
                        GetOpeningbalance();
                    }
                }
            })*@
        });

        $('#AccountNo').change(function () {
            $('#btnerrordetails').hide();
            //debugger;
            //var accountNo = $('#AccountNo').val();
            //GetProductDetails(accountNo);
            //GetOpeningbalance();
        })
        debugger;
        var admn = '@ViewBag.AdmissionNo';
        if (admn != "" && admn != "0") {
            $('#Admissionno').val(admn);
            $('#Admissionno').trigger('focusout');
            // $('#Admissionno').focusout();
        }
        else {
            $("#Admissionno").focus();
        }
        $('#btn_Add').attr('disabled', true);

    });



    function GetVoucherPrepareByActivityid(TransactionDetails, accountno, productcode, InvestType) {
        debugger;
        //var admission = $('#Admissionno').val();
        //var admissionpkey = document.getElementById("AddmissionPkey").value;
        var name = $('#MemberName').val();
        var logindate = document.getElementById("TransactionDate").value;
        //document.getElementById("AccountNo").value = accountno;
        var accountname = $("#AccountNo option:selected").text();
        var activity = $('#ActivityType option:selected').text();
        var activityId = $('#ActivityType option:selected').val();
        $("#TotalAmount").val('0.00');
        $('#CollectonAmount').val('0.00');
        var formid = $('#formid').val();
        var totalAmount = 0;
        var xml = "";
        var narration = "";
        if (accountno == "0") {
            return false;
        }
        $('#btnerrordetails').hide();
        debugger;
        //var admissionno = $('#Admissionno').val();
        $.ajax({
            type: "Get",
            url: '@Url.Action("GetVoucherPrepareDetails", "TransactionPaymentsFirm")',
            data: { TransactionType: TransactionDetails, AccountCode: accountno, productId: productcode, activityId: activityId, FormId: formid, InvestType: InvestType },

            datatype: "json",
            success: function (result) {
                debugger;
                var listVoucherDetails = result.object1;
                membclosid = result.object4;
                var errormessage = result.object2;
                var loantype = result.object3;
                var errorslist = result.object5;
                FillErrorsList(errorslist);
                if (errorslist != null && errorslist.length > 0) {
                    sweetAlert({ title: '@resFasMessages.CheckIssuesforParticularAccount', html: true });
                    $('#btnerrordetails').show();
                    debugger;
                }
                if (errormessage != null && errormessage != "") {
                    sweetAlert({ title: errormessage, html: true });
                    $('#btnerrordetails').show();
                    return false;
                }
                 ;
                if (listVoucherDetails != null && listVoucherDetails != false) {
                    var transactionid = listVoucherDetails[0].TransactionID;
                    var loanapplicationno = listVoucherDetails[0].LoanAPplicationNo;
                    $('#LoanApplicationNo').val(loanapplicationno);
                    if (transactionid != 0) {
                         ;
                        $("#VoucherDetails tbody").empty();
                         ;
                        var xmlDocument = $.parseXML("<root/>");
                        xml += "<Temp>";
                        var Docxml = $($.parseXML('<?xml version="1.0" encoding="utf-8" ?><root />'));
                        for (var row = 0; row < listVoucherDetails.length; row++) {
                            debugger;
                            $('#ProductTypeId').val(listVoucherDetails[row].ProductTypeID);
                            var ProductTypeID = listVoucherDetails[row].ProductTypeID;
                            var $tr = "";
                            if (ProductTypeID == 8 && productcode == 34 && formid==16002) {
                                debugger;
                                $tr = $('<tr>').append(
                                 $('<td>').html("<input id='hdnLedgerID' type='hidden' value=" + (listVoucherDetails[row].Ledger) + ">" + listVoucherDetails[row].LedgerDescription),
                                //$('<td style="text-align:right">').text(listVoucherDetails[row].MinAmount),
                                $('<td>').html("<input id='MaxAmounttext' class='form-control input-xs' type='number' min='0' max='9999999999' style='text-align:right' maxlength='10' value=" + Number(listVoucherDetails[row].MaxAmount).toFixed(2) + " disabled='disabled'>"),
                                $('<td style="text-align:center">').html("<input id='transrollDesc' type='hidden' value=" + listVoucherDetails[row].TransrollDescription + "><input id='transactionid' type='hidden' value=" + listVoucherDetails[row].TransactionID + "><input id='transrollid' type='hidden' value=" + listVoucherDetails[row].TransrollID + "><input id='ledgerid' type='hidden' value=" + listVoucherDetails[row].Ledger + "><input id='vouchertext' class='form-control input-xs applydecimal' type='text'  style='text-align:right' maxlength='10' autocomplete='off' class='form-control input-xs' value=" + Number(listVoucherDetails[row].Amount).toFixed(2) + ">"),
                                $('<td hidden>').html("<input id='ledgerdesc' type='hidden' value='" + listVoucherDetails[row].LedgerDescription + "'>"),
                                $('<td hidden >').html("<input id='ledgerGeneral' type='hidden' value='" + listVoucherDetails[row].LedgerName + "'>"),
                                $('<td hidden >').html("<input id='ledgerRegional' type='hidden' value='" + listVoucherDetails[row].RegionalLedgerDescription + "'>"),
                                $('<td hidden >').html("<input id='maxAmount' type='hidden' value=" + Number(listVoucherDetails[row].MaxAmount).toFixed(2) + ">"),
                                $('<td hidden >').html("<input id='ProductTypeid' type='hidden' value=" + (listVoucherDetails[row].ProductTypeID) + ">")
                                ).appendTo('#VoucherDetails tbody');
                            }
                            else {
                                $tr = $('<tr>').append(
                                     $('<td>').html("<input id='hdnLedgerID' type='hidden' value=" + (listVoucherDetails[row].Ledger) + ">" + listVoucherDetails[row].LedgerDescription),
                                    //$('<td style="text-align:right">').text(listVoucherDetails[row].MinAmount),
                                    $('<td>').html("<input id='MaxAmounttext' class='form-control input-xs' type='number' min='0' max='9999999999' style='text-align:right' maxlength='10' value=" + Number(listVoucherDetails[row].MaxAmount).toFixed(2) + " disabled='disabled'>"),
                                    $('<td style="text-align:center">').html("<input id='transrollDesc' type='hidden' value=" + listVoucherDetails[row].TransrollDescription + "><input id='transactionid' type='hidden' value=" + listVoucherDetails[row].TransactionID + "><input id='transrollid' type='hidden' value=" + listVoucherDetails[row].TransrollID + "><input id='ledgerid' type='hidden' value=" + listVoucherDetails[row].Ledger + "><input id='vouchertext' class='form-control input-xs applydecimal' type='text'  style='text-align:right' maxlength='10' autocomplete='off' class='form-control input-xs' value=" + Number(listVoucherDetails[row].Amount).toFixed(2) + " onchange='ChangeAmount(this)' onkeyup='return AllowNumbersWithTwoDecimals(this)'>"),
                                    $('<td hidden>').html("<input id='ledgerdesc' type='hidden' value=" + listVoucherDetails[row].LedgerDescription + ">"),
                                    //$('<td hidden >').html("<input id='minAmount' type='hidden' value=" + listVoucherDetails[row].MinAmount + ">"),
                                    $('<td hidden >').html("<input id='maxAmount' type='hidden' value=" + Number(listVoucherDetails[row].MaxAmount).toFixed(2) + ">"),
                                    $('<td hidden >').html("<input id='ProductTypeid' type='hidden' value=" + (listVoucherDetails[row].ProductTypeID) + ">")
                                    ).appendTo('#VoucherDetails tbody');
                            }
                            //if (membclosid == '21') {
                            //    debugger
                            //    var maxamt = $(this).find('input[id="maxAmount"]').val();
                            //    $(this).find('input[id="vouchertext"]').val(parseFloat(maxamt).fi(2));
                            //    $(this).find('input[id="vouchertext"]').attr('disabled', true);
                            //}
                            debugger;
                            if (listVoucherDetails[row].ProductTypeID == 3) {
                                debugger;
                                $('#btnviewsanctions').show();
                                $('#collectionAmountID').show();
                                if (loantype == 1)
                                {
                                    $('#btnupdatesanctions').show();
                                }
                                var transactiondate = $('#TransactionDate').val();
                                 ;
                                //  $('#btnaddmoredisbursemetns').show();
                                var productname = $('#Product option:selected').text();
                                var accountname = $('#AccountNo option:selected').text();                                
                            }

                            else {
                                $('#btnviewsanctions').hide();
                            }

                            debugger;

                            xml += "<row>";
                            xml += "<LedgerID>" + listVoucherDetails[row].Ledger + "</LedgerID>";
                            xml += "<LedgerDescription>" + listVoucherDetails[row].LedgerDescription + "</LedgerDescription>";
                            xml += "<TransrollID>" + listVoucherDetails[row].TransrollID + "</TransrollID>";
                            xml += "<Amount>" + Number(listVoucherDetails[row].Amount).toFixed(2) + "</Amount>";
                            xml += "<MaxAmount>" + Number(listVoucherDetails[row].MaxAmount).toFixed(2) + "</MaxAmount>";
                            //xml += "<MinAmount>" + listVoucherDetails[row].MinAmount + "</MinAmount>";
                            xml += "<TransactionID>" + listVoucherDetails[row].TransactionID + "</TransactionID>";
                            xml += "<TransrollDescription>" + listVoucherDetails[row].TransrollDescription + "</TransrollDescription>";
                            //narration += listVoucherDetails[row].LedgerDescription + "-" + listVoucherDetails[row].Amount + " ";
                            xml += "</row>";
                            var tot = parseFloat(listVoucherDetails[row].Amount) + parseFloat(totalAmount);

                            totalAmount = tot;
                        }

                         ;
                        GetLinkVisibleStatu(transactionid);
                        xml += "</Temp>";
                        //narration += name + "/Admission no " + admissionno + "/Account no " + accountname + "";
                        $('#XML').val(xml);
                        $("#TotalAmount").val(Number(totalAmount).toFixed(2));
                        var amount = Number(totalAmount).toFixed(2);
                        var accountname = $('#AccountNo option:selected').text();
                        narration += "Being " + activity + " from " + " /Account no. " + accountname + " on credit for INR" + amount;
                        GetAmountDecsription(totalAmount);
                        $('#Narration').val(narration);
                        $('#CollectonAmount').val(Number(totalAmount).toFixed(2));
                        debugger;
                    }
                    else {
                        sweetAlert({ title: '@resFasMessages.Nodatafound', html: true });
                        return false;
                        //swal({ title: "Unite", text: "<span><b>Admission No. does not exists</b></span>", html: true });
                    }

                }
                else {
                    sweetAlert({ title: '@resFasMessages.Nodatafound', html: true });
                    return false;
                }
            }

        })
    }
    function FillErrorsList(Result) {
        debugger;
        $('#tblerrorslist tbody tr').remove();

        if (Result != "" || Result != null) {
            debugger;
            if (Result != null && Result.length > 0) {

                debugger;
                for (var i = 0; i < Result.length; i++) {
                    var $tr = $('<tr>').append($('<td>').text(i + 1),
               $(' <td> ').text(Result[i].AdmissionNo),
               $('<td>').text(Result[i].LoanNo), $('<td>').text(Result[i].ProductDescription),
               $('<td>').text(Result[i].ErrorDescription)).appendTo('#tblerrorslist tbody');
                }
            }
        }
        debugger;
    }
    function GetLinkVisibleStatu(transactionid) {
         ;
        var logindate = '@ViewBag.logindate';
        $('#viewdemand').hide();
        $('#InstalmentChart').hide();
        $('#checkno').hide();
        $('#checkdate').hide();
        
        $('#TermForeClosure').hide();
        $('#TermClosure').hide();
        $('#TermInterestPayment').hide();
        if (transactionid == 30013) {
            $('#checkno').show();
            $('#checkdate').show();
            $('#ChequeDate').val(logindate);
            

        }
        else if (transactionid == 90011) {
            $('#InstalmentChart').show();
        }      
        else if (transactionid == 90013) {
            $('#TermInterestPayment').show();
        }
        else if (transactionid == 90014) {
            $('#TermForeClosure').show();
        }
        else if (transactionid == 90015) {
            $('#TermClosure').show();
        }

    }

    function GetLastTransactionAndOpeningDate(accountno, productcode, logindate, formid) {
        debugger;
        $.ajax({
            type: "Get",
            url: '@Url.Action("GetPendingLastTransaction", "TransactionPaymentsFirm")',
            data: { AccountCode: accountno, productId: productcode },
            datatype: "json",
            success: function (result) {
                debugger;
                var status = result.data3;
                var TrDate = result.data4;
                var openingdate = result.data5;
                debugger;
                var voucherid = result.data6;
                var oldaccountno = result.data7;
                var errormessage = result.data8;
                var IsValidDate = result.data9;
                if (errormessage != "") {
                    $('#btnClear').click();
                    sweetAlert({ title: errormessage, html: true });
                    $('#btnClear').trigger('click')
                }
                else {
                    $('#TempAccountNo').val(oldaccountno);
                    debugger;
                    if (status == false) {
                        //$('#btnPost').click();
                        //sweetAlert("Last Transaction Pending");
                        //$('#AccountNo').append('<option value="0">--Select--</option>');
                        //$('#btnPost').click();
                        //sweetAlert("Last Transaction Pending");
                        //$('#AccountNo').append('<option value="0">--Select--</option>');
                        swal({
                            html:true,
                            title: '@resFasMessages.LastTransactionPendingDouwanttopost',
                            text: '@resFasMessages.Youwontbeabletorevertthis',
                            type: 'warning',
                            showCancelButton: true,
                            confirmButtonColor: '#3085d6',
                            cancelButtonColor: '#d33',
                            confirmButtonText: '@resFasLables.Yes',
                            cancelButtonText: '@resFasLables.Cancel',
                            closeOnConfirm: true
                        },
        function (isConfirm) {
            if (isConfirm) {
                debugger;
                //$('#saveupdate').val('true');
                $("#VoucherNoForPening").val(voucherid);
                $('#btnLastVchrPost').click();
            }
            else {
                var status = 'false';
                document.getElementById("saveupdate").value = status;
                ;
                $('#btnClear').trigger('click')

                $("#Product").attr('tabindex', '-1');
                $('#Admissionno').focus();
            }
        })
                    }
                }
                if (IsValidDate != null) {
                    if (!IsValidDate)
                    {
                        if (formid != "30021")
                        {
                            sweetAlert({ title: '@resFasMessages.LastTransactionisgreaterthanlogindate', html: true });
                            $('#btnClear').trigger('click')
                            return false;
                        }
                        else
                        {
                            return true;
                        }
                    }
                }
                @*if (TrDate != null) {
                    var da = ConvertJsonDateString(TrDate);

                    if (da > logindate) {
                        sweetAlert({ title: '@resFasMessages.LastTransactionisgreaterthanlogindate', html: true });
                        return false;
                    }
                }*@
                if (openingdate != null) {
                    var opDate = ConvertJsonDateString(openingdate);
                    $('#fromdate').val(opDate);

                }
            }
        })
    }
    $('#btnClear').click(function () {

        $('#Admissionno').focus();

    })
    function ShowDisbursments() {
        var producttypeid = 0;
        var status = false;
        $('#VoucherDetails tbody tr').each(function () {

            producttypeid = $(this).find('input[id="ProductTypeid"]').val();
            if (producttypeid == 3)
            { status = true; }
            else
            {
                status = false;
            }
        })
        return status;
    }


    function GetAccountDetails(productcode, TempaccountNo) {
        debugger;
        document.getElementById("Product").value = productcode;
        var logindate = document.getElementById("TransactionDate").value;
        var InvestType = document.getElementById("InvestmentType").value;
        var formid = $('#formid').val();
        //$("#AccountNo").empty();
        //$('#AccountNo').append('<option value="0">-Select-</option>');
        $("#ActivityType").empty();
        $('#ActivityType').append('<option value="0">@resInvestmentLables.select</option>');
        $('#VoucherDetails tbody').empty();
        //$('#TempAccountNo').val('');
        if (TempaccountNo == "") {
            return false;
        }
        $.ajax({
            type: "Get",
            url: '@Url.Action("GetAllAccountsByProductcode", "TransactionPaymentsFirm")',
            data: { productId: productcode, accountNo: TempaccountNo, FormID: formid, investType: InvestType },
            datatype: "json",
            async: false,
            success: function (result) {
                //;
                var listAccounts = result.data;
                var ListActivity = result.data2;
                var ListOtherCharges = result.data3;
                var depositType = result.data4;
                if (listAccounts == false) {
                    sweetAlert({ title: '@resFasMessages.SelectProduct', html: true });
                    //$("#AccountNo").empty();
                    //$('#AccountNo').append('<option value="0">-Select-</option>');
                    $("#ActivityType").empty();
                    $('#ActivityType').append('<option value="0">@resInvestmentLables.select</option>');
                    $('#VoucherDetails tbody').empty();
                    return false;

                }

                var id = 34;
                var name = '@resInvestmentLables.Investment';
                $("#Product").append("<option value=" + id + ">" + name + "</option>");

                if (depositType != "") {
                    document.getElementById("InvestmentDepositType").value = depositType
                }

                $("#AccountNo").empty();

                if (listAccounts.empty) {

                    $("#AccountNo").append("<option value=0>@resInvestmentLables.select</option>");
                }
                else {
                    debugger;
                    if (listAccounts.length == 1) {
                        var id = listAccounts[0].AccountID;
                        var name = listAccounts[0].AccountCode;
                        // Code Added by Sunil
                        $("#TempAccountNo").val(listAccounts[0].TempAccountNo);
                        $("#AccountNo").append("<option value=" + id + ">"+name+"</option>");
                        debugger;
                        var parallelrun = '@ViewBag.parallelrun';
                          if(parallelrun == 1)
                            {
                            //Code Changed by Sunil start
                            //GetLastTransactionAndOpeningDate(id, productcode, logindate, urlpendingVchr, formid);
                            //Code Changed by Sunil End
                            }
                            else{
                               GetLastTransactionAndOpeningDate(id, productcode, logindate, formid);
                            }
                        //GetLastTransactionAndOpeningDate(id, productcode, logindate, formid);
                    }
                    else {
                        debugger;
                        //$('#AccountNo').append('<option value="0">-Select-</option>');
                        //for (var k = 0; k < listAccounts.length; k++) {
                        //    // $("#AccountNo").append("<option>" + listAccounts[k].AccountCode + "</option>");
                        //    $("#AccountNo").append("<option value=" + listAccounts[k].AccountID + ">" + listAccounts[k].AccountCode + "</option>");
                        //}
                        $("#ActivityType").empty();
                        $('#ActivityType').append('<option value="0">@resInvestmentLables.select</option>');
                        $('#VoucherDetails tbody').empty();
                    }
                }

                if (ListActivity == false) {
                    sweetAlert({ title: '@resFasMessages.SelectActivity', html: true }); 
                    $('#VoucherDetails tbody').empty();
                    return false;
                    //return Notify('Something Went Wrong!', 'top-full-width', '10000', 'danger', 'fa-bolt', true);
                }
                $("#ActivityType").empty();

                if (ListActivity.empty) {

                    $("#ActivityType").append("<option value=0>@resInvestmentLables.select</option>");
                }
                else {
                    if (ListActivity.length == 1) {

                        var id = ListActivity[0].Activities.ActivityId;
                        var name = ListActivity[0].Activities.ActivityDescription;
                        $("#ActivityType").append("<option value=" + id + ">"+name+"</option>");
                        debugger;
                        var accountno = $("#AccountNo option:selected").text();//$('#AccountNo').val();
                        GetVoucherPrepareByActivityid(id, accountno, productcode,InvestType);
                        debugger;
                    }
                    else {
                        $('#ActivityType').append('<option value="0">@resInvestmentLables.select</option>');
                        for (var i = 0; i < ListActivity.length; i++) {
                            $("#ActivityType").append("<option value=" + ListActivity[i].PKey + ">" + ListActivity[i].Activities.ActivityDescription + "</option>");
                        }
                    }
                }


                if (ListOtherCharges == false || ListOtherCharges.length == 0) {
                    ;
                    $('#addtransctions').removeAttr("style");
                    $('#addtransctions').attr("style", "display:none");


                    return false;
                }
                else {
                    $('#addtransctions').removeAttr("style");
                    $('#addtransctions').attr("style", "color:blue");
                }

                $("#Ledger").empty();
                $('#Ledger').append('<option value="0">@resInvestmentLables.select</option>');
                if (ListOtherCharges.empty) {


                    $("#Ledger").append("<option value=0>@resInvestmentLables.select</option>");
                }
                else {
                    for (var i = 0; i < ListOtherCharges.length; i++) {

                        $("#Ledger").append("<option value=" + ListOtherCharges[i].LedgerID + ">" + ListOtherCharges[i].LedgerDescription + "</option>");
                    }
                }

            }
        })
        $('#viewAccountDetails').show();

    }



    function GetProductDetails(accountNo) {
        debugger;
        var v = accountNo;
        if (v == "") {
            return;
        }        
        var formid = '@ViewBag.FormID';        
        document.getElementById("formid").value = formid;
        $.ajax({
            type: "Get",
            url: '@Url.Action("GetProductDetailsBasedOnAccount", "TransactionPaymentsFirm")',
            data: { AccountNo: accountNo, FormID: formid },
            datatype: "json",
            success: function (result) {
                debugger;
                var listproducts = null;
                //var InvestType = null;
                if (result.object1.length > 0)
                {
                    listproducts = result.object1;
                }
                //if (result.object2.length > 0) {
                //    InvestType = result.object2;
                //}
                var combostring;
                if (listproducts == false || listproducts == 0) {
                    sweetAlert({ title: '@resFasMessages.Nodatafound', html: true }); 
                    //$('#AccountNo').empty();
                    //$("#AccountNo").append('<option value="0">-Select-</option>');
                    $('#ActivityType').empty();
                    $("#ActivityType").append('<option value="0"@resInvestmentLables.select</option>');
                    $('#VoucherDetails tbody').empty();
                    return false;
                }
                $("#Product").empty();
                //$("#InvestmentType").empty();
                if (listproducts.empty) {
                    $("#Product").append("<option value=0>@resInvestmentLables.select</option>");
                }
                else {
                    if (listproducts.length == 1) {

                        var id = listproducts[0].ProductTypeID;
                        var name = listproducts[0].ProductTypeDescription;
                        $("#Product").append("<option value=" + id + ">"+name+"</option>");
                        //GetAccountDetails(id, accountNo);
                        
                        //$('#InvestmentType').append('<option value="0">-Select-</option>');
                        //for (var i = 0; i < InvestType.length; i++) {
                        //    var id = InvestType[i].InvestTypeID;
                        //    var name = InvestType[i].InvestTypeDescription;
                        //    combostring += "<option value=" + id + ">" + name + "</option>"
                        //}
                        //$("#InvestmentType").append(combostring);
                    }
                    else {
                        $('#Product').append('<option value="0">@resInvestmentLables.select/option>');
                        for (var i = 0; i < listproducts.length; i++) {
                            var id = listproducts[i].ProductTypeID;
                            var name = listproducts[i].ProductTypeDescription;
                            combostring += "<option value=" + id + ">"+name+"</option>"

                        }
                        //$('#AccountNo').empty();
                        //$("#AccountNo").append('<option value="0">-Select-</option>');
                        $('#ActivityType').empty();
                        $("#ActivityType").append('<option value="0">@resInvestmentLables.select</option>');
                        $('#VoucherDetails tbody').empty();
                        $("#Product").append(combostring);
                    }
                }
            }
        })
    }

    $(function () {
        $("#ValueDate").focusout(function () {

            var valuedate = document.getElementById("ValueDate").value;
            var LoginDate = '@ViewBag.logindate';
            if (LoginDate < valuedate) {
                swal({ title: '@resFasMessages.Valuedatemustbelessthanorequaltologindate', html: true },
                    function (isConfirm) { if (isConfirm) { $('#ValueDate').val(LoginDate); $('#ValueDate').focus(); } })
            }
        })
    });
    var membclosid = "";
    function ChangeAmount(row) {
        debugger
        var hdnLedgrid = $(row).closest('tr').find('input[id="hdnLedgerID"]').val();
        var CurrSharAmt = $(row).closest('tr').find('input[id="vouchertext"]').val();
        var LimtAmt = $(row).closest('tr').find('input[id="maxAmount"]').val();
        debugger;
        if (membclosid == '21') {
            if (parseFloat(LimtAmt) !== parseFloat(CurrSharAmt)) {
                $(row).closest('tr').find('input[id="vouchertext"]').val('0.00'); $(row).closest('tr').find('input[id="vouchertext"]').focus();
                sweetAlert({ title: '@resFasMessages.Shouldentermaximumsharebalance' + LimtAmt + '.00 ' + '@resFasMessages.rupees', html:true }); 
                return false;
            } else { }
        } else {
            if (hdnLedgrid == 2) {
                $(row).closest('tr').find('input[id="vouchertext"]').attr('disabled', false);
                var balnAmt = parseFloat(LimtAmt) - parseFloat(CurrSharAmt);
                if (MinShareBalance > 0) {
                    if (balnAmt < MinShareBalance) {
                        $(row).closest('tr').find('input[id="vouchertext"]').val('0.00'); $(row).closest('tr').find('input[id="vouchertext"]').focus(); $("#TotalAmount").val('0.00'); $('#CollectonAmount').val('0.00'); $('#AmountInWords').val(''); $('#Narration').val(''); totalAmount = 0; narration = "";
    sweetAlert({ title: '@resFasMessages.Cannotwithdrawshouldmaintainminimumsharebalance' + MinShareBalance + '@resFasMessages.rupees', html:true });
                        return false;
                    }
                }
            }
        }
        
        @*if (parseFloat(CurrSharAmt) > parseFloat(MinShareBalance)) {
            $(row).closest('tr').find('input[id="vouchertext"]').val('');
            $("#TotalAmount").val('0.00');
            $('#CollectonAmount').val('0.00');
            $('#AmountInWords').val('');
            $('#Narration').val('');
            totalAmount = 0; narration = "";
            debugger; 
    sweetAlert({ title: '@resFasMessages.amountmustbeLessthanorequaltomaxamount' + MinShareBalance , html:true });
            return false;
        }*@

        debugger;
        var accountno = document.getElementById("AccountNo").value;
        var formid = '@ViewBag.FormID';
        $('#AccountPkey').val(accountno);
        var accountname = $("#AccountNo option:selected").text();
        var productcode = document.getElementById("Product").value;
        var ProductTypeId = document.getElementById("ProductTypeId").value;
        var admissionno = $('#Admissionno').val();
        var name = $('#MemberName').val();
        var amount = $('#ledgerid').val();
        var ChequeNo = $('#ChequeNo').val();
        var activity = $('#ActivityType option:selected').text();
        $('#XML').val('');
        var product = $("#Product").val();
        var xml = "";
        var totalAmount = 0;
        var narration = "";
        var narrationForPassBook = "";
        xml = "<Temp>"
        var xmlDocument = $.parseXML("<root/>");
        debugger;
        var Docxml = $($.parseXML('<?xml version="1.0" encoding="utf-8" ?><root />'));
        $('#VoucherDetails tbody tr').each(function () {
            debugger;

            var transrolldesc = $(this).find('input[id="transrollDesc"]').val();
            var transrollid = $(this).find('input[id="transrollid"]').val();
            var ledgerdesc = $(this).find('input[id="ledgerdesc"]').val();
            var ledgerid = $(this).find('input[id="ledgerid"]').val();
            var amount = $(this).find('input[id="vouchertext"]').val();
            var maxamount = $(this).find('input[id="maxAmount"]').val();
            //var minamount = $(this).find('input[id="minAmount"]').val();
            var transactionid = $(this).find('input[id="transactionid"]').val();

            @*if ((ProductTypeId == 11 || ProductTypeId == 2) && ledgerdesc == "Interest") {
                debugger;
                maxamount = parseFloat(amount);
                //$(this).find('input[id="maxAmount"]').val(Number(maxamount).toFixed(2));
                $('#maxAmount').attr('disabled', false);
                $('#maxAmount').html(maxamount);
                $('#maxAmount').attr('disabled', true);
                //$("label[for='maxamount']")
                //$('#maxAmount').text(maxamount)
                var depositAmt = parseFloat(totalAmount);
                if (maxamount > depositAmt)
                {
                    swal({
                        title: '@resFasMessages.amountmustbeLessthanorequaltomaxamount',html:true
                    });
                }
                debugger;
            }
            else if (parseFloat(maxamount) < parseFloat(amount)) {
                    ;
                amount = 0;
                $(this).find('input[id="vouchertext"]').val('');
                $(this).find('input[id="vouchertext"]').focus();
                swal({
                    title:'@resFasMessages.InterestAmountShouldBeLessThanDepositAmount' ,html:true
                },
                 function (isConfirm) {
                     $(this).find('input[id="vouchertext"]').focus();
                 });

            }*@
            xml += "<row>";
            xml += "<LedgerID>" + ledgerid + "</LedgerID>";
            xml += "<LedgerDescription>" + ledgerdesc + "</LedgerDescription>";
            xml += "<TransrollID>" + transrollid + "</TransrollID>";

            xml += "<Amount>" + Number(amount).toFixed(2) + "</Amount>";

            xml += "<MaxAmount>" + Number(maxamount).toFixed(2) + "</MaxAmount>";
            //xml += "<MinAmount>" + minamount + "</MinAmount>";
            xml += "<TransactionID>" + transactionid + "</TransactionID>";
            xml += "<TransrollDescription>" + transrolldesc + "</TransrollDescription>";
            xml += "</row>";


            var tot = parseFloat(amount) + parseFloat(totalAmount);

            totalAmount = tot;//$("#TotalAmount").val(tot);
            //narration += ledgerdesc + "-" + amount + " ";

            $('root', Docxml).append($('<LedgerID />', Docxml).text(ledgerid));

            $('#XMLDoc').val((new XMLSerializer()).serializeToString(Docxml.context));
        });
        xml += "</Temp>";
        debugger;
        //narration += name + "/Admission no " + admissionno + "/Account no " + accountname + "";
        $('#XML').val(xml);
        $("#TotalAmount").val(Number(totalAmount).toFixed(2));
        var amount = Number(totalAmount).toFixed(2);
        if (formid == "30006")
        {
            
        }
        else
        {
            narration = "Being " + activity + " from " + name + " /Admission no. " + admissionno + " /Account no. " + accountname + " on debit for INR " + amount;
        }
        GetAmountDecsription(parseFloat(totalAmount));
        $('#Narration').val(narration);
        $('#CollectonAmount').val(Number(totalAmount).toFixed(2));
    }

    function GetAmountDecsription(totalAmount) {
        $('#TotalAmount').val(Number(totalAmount).toFixed(2));

        var TotalAmount = document.getElementById("TotalAmount").value;
        $.ajax({
            type: "Get",
            url: '@Url.Action("GetAmountInWards", "TransactionReceipt")',
            data: { Amount: TotalAmount },

            datatype: "json",
            success: function (amountinwords) {
                if (amountinwords != null) {
                    document.getElementById("AmountInWords").value = amountinwords;
                }
                else {

                    return false;
                }
            }
        });
    }




    $(function () {
        $("#VoucherType").change(function () {

            $('#voucherno').hide();
            var post = '@ViewBag.Posted';
            var vchrtype = document.getElementById("VoucherType").value;
            var TransactionDetails = document.getElementById("ActivityType").value;
            var admissionpkey = $('#AddmissionPkey').val();
            var productcode = document.getElementById("Product").value;
            var denominationstatus = '@ViewBag.denomination';
            if (denominationstatus == 'Y') {
                $('#cashdenomination').show();
            }
            else {
                $('#cashdenomination').hide();
            }
            if (post == "2")
            {
                $('#Transferdialog').dialog({
                    autoOpen: false,
                    width: 800,
                    height: 550,
                    resizable: false,
                    title: 'Batch Creation',
                    modal: true,
                    open: function (event, ui) {
                        $(this).load("@Url.Action("TransferBatchGeneration", "TransferBatchGeneration", new { area="FAS"})");
                    },
                    buttons: {

                    }
                });
            }
            vouchertypeselection(vchrtype, TransactionDetails, admissionpkey, productcode, post);
            if (vchrtype == 3) {
                @*var urlproduct = '@Url.Action("GetContraProductByActivityTypeInvestments", "TransactionReceiptFirm")';*@
                //FillContraProductAndAccount(productcode, admissionpkey, TransactionDetails, urlproduct);

                @*var productcode = $('#ContraProduct').val();
                if (productcode != "") {
                    var urlaccount = '@Url.Action("GetContraAccountByActivityType", "TransactionReceipt")';

                    GetContraAccountNo(admissionpkey, productcode, urlaccount);
                }*@
                $.ajax({
                    url: '@Url.Action("GetContraProductByActivityTypeInvestments", "TransactionPaymentsFirm")',
                    type: 'Get',
                    data: {  },
                    dataType: 'json',
                    contentType: 'application/json',
                    async: false,
                    success: function (result) {
                        debugger;
                        var listcontraProducts = result.data;

                        if (listcontraProducts != null && listcontraProducts.length > 0) {

                            if (listcontraProducts == false || listcontraProducts == null) {

                                return false;
                            }
                            $("#ContraProduct").empty();

                            if (listcontraProducts == null && listcontraProducts.length == 0) {

                                $("#ContraProduct").append("<option value=" + Select + ">" + Select + "</option>");
                            }

                            else {
                                if (listcontraProducts.length == 1) {
                                    //var id = listcontraProducts[0].LedgerId;
                                    //var name = listcontraProducts[0].LedgerName;
                                    //$("#ContraProduct").append("<option value=" + id + ">" + name + "</option>");
                                    ////$("#ContraProduct").val() = id;

                                    $('#ContraProduct').append('<option value="0">--Select--</option>');
                                    for (var k = 0; k < listcontraProducts.length; k++) {

                                        $("#ContraProduct").append("<option value=" + listcontraProducts[k].LedgerId + ">" + listcontraProducts[k].LedgerName + "</option>");
                                    }
                                }
                                else {
                                    $('#ContraProduct').append('<option value="0">--Select--</option>');
                                    for (var k = 0; k < listcontraProducts.length; k++) {

                                        $("#ContraProduct").append("<option value=" + listcontraProducts[k].LedgerId + ">" + listcontraProducts[k].LedgerName + "</option>");
                                    }
                                }
                            }

                        }
                    }


                })
            }
        }
            )
    });

    $(function () {
        $("#ContraProduct").change(function () {
            @*var url = '@Url.Action("GetContraAccountByActivityTypeInvestment", "TransactionReceiptFirm")';
            var productcode = $('#ContraProduct').val();
            GetContraAccountNo(admissionpkey, productcode, url);*@

            var productcode = $('#ContraProduct').val();
            $.ajax({
                url: '@Url.Action("GetContraAccountByActivityTypeInvestment", "TransactionPaymentsFirm")',
                type: 'Get',
                data: { productId: 27, ParentLedger: productcode },
                dataType: 'json',
                contentType: 'application/json',
                async: false,
                success: function (result) {
                    var listcontraAccounts = result.data;
                    if (listcontraAccounts != null && listcontraAccounts.length > 0) {
                        if (listcontraAccounts == false) {
                            return false;
                        }
                        $("#ContraAccountNo").empty();

                        if (listcontraAccounts.empty) {
                            $("#ContraAccountNo").append("<option value=" + Select + ">" + Select + "</option>");
                        }

                        else {
                            if (listcontraAccounts.length == 1) {
                                var id = listcontraAccounts[0].AccountID;
                                var name = listcontraAccounts[0].AccountCode;
                                $("#ContraAccountNo").append("<option value=" + id + ">" + name + "</option>");
                            }
                            else {
                                $('#ContraAccountNo').append('<option value="0">--Select--</option>');
                                for (var k = 0; k < listcontraAccounts.length; k++) {
                                    //$("#AccountNo").append("<option>" + listAccounts[k].AccountCode + "</option>");
                                    $("#ContraAccountNo").append("<option value=" + listcontraAccounts[k].AccountID + ">" + listcontraAccounts[k].AccountCode + "</option>");
                                }
                            }
                        }
                    }
                }
            })
        })
    });

    $(function () {
        $('#ContraAccountNo').focusout(
            function () {

                @*var contraaccount = $('#ContraAccountNo').val();
                var oBurl = '@Url.Action("GetMemberBalence", "TransactionReceipt")';
                GetAccountbalance(contraaccount, oBurl);*@
                var contraaccount = $('#ContraAccountNo').val();
                $.ajax({
                    type: "Get",
                    url: '@Url.Action("GetMemberBalence", "TransactionReceipt")',
                    data: { contraaccountpkey: contraaccount },
                    dataType: 'json',
                    contentType: 'application/json',
                    async: false,
                    success: function (amount) {
                        debugger;
                        if (amount == false) {
                            document.getElementById("ContraAccountBalance").value = 0;
                            return false;
                        }
                        else {

                            document.getElementById("ContraAccountBalance").value = amount;
                        }
                    }
                })
            });
    });

    function rowselect(vv) {
        var voucherindex;

        voucherindex = $(vv).find('td').eq(0).text();
        voucherNo = $(vv).find('td').eq(1).text();
        //sweetAlert(voucherindex);
        document.getElementById("BatchID").value = voucherindex.trim();
        document.getElementById("txtbatchid").value = voucherindex.trim();
    }

    function GetOpeningbalance() {
        $.ajax({
            url: '@Url.Action("GetCashbalance", "TransactionPaymentsFirm")',
            type: 'Get',

            dataType: 'json',
            contentType: 'application/json',
            success: function (amount) {

                if (amount == false) {

                    return false;
                }
                else {

                    document.getElementById("CashBalance").value = parseFloat(amount);
                }
            }
        })
    }


    $(function () {
        $('#CollectonAmount').focusout(

            function () {

                var collectionamount = document.getElementById("CollectonAmount").value;
                var admissionno = $('#Admissionno').val();
                var name = $('#MemberName').val();
                var accountno = document.getElementById("AccountNo").value;
                $('#AccountPkey').val(accountno);
                var accountname = $("#AccountNo option:selected").text();
                var activity = $('#ActivityType option:selected').text();
                var vchrtype = $('#VoucherType').val();
                if (vchrtype == 0) {
                    $("#VoucherType").trigger('change');
                }

                if (collectionamount != "" && collectionamount > 0) {
                    $.ajax({
                        url: '@Url.Action("BuildAdjustmentOrderForLoans")',
                        type: 'Get',
                        data: { Collectionamount: collectionamount },
                        dataType: 'json',
                        contentType: 'application/json',
                        success: function (listVoucherDetails) {

                            if (listVoucherDetails == false) {

                                return false;
                            }
                            else {
                                var transactionid = listVoucherDetails[0].TransactionID;
                                if (listVoucherDetails != null && transactionid != 0) {

                                    var amount = $('#ledgerid').val();

                                    $('#XML').val('');
                                    var xml = "";
                                    var totalAmount = 0;
                                    var narration = "";

                                    var xmlDocument = $.parseXML("<root/>");

                                    var Docxml = $($.parseXML('<?xml version="1.0" encoding="utf-8" ?><root />'));
                                    $("#VoucherDetails tbody").empty();

                                    xml += "<Temp>";
                                    var Docxml = $($.parseXML('<?xml version="1.0" encoding="utf-8" ?><root />'));
                                    for (var row = 0; row < listVoucherDetails.length; row++) {

                                        var $tr = $('<tr>').append(
                                            $('<td>').text(listVoucherDetails[row].LedgerDescription),
                                            //$('<td style="text-align:right">').text(listVoucherDetails[row].MinAmount),
                                             $('<td style="text-align:right">').text(Number(listVoucherDetails[row].MaxAmount).toFixed(2)),
                                           $('<td style="text-align:center">').html("<input id='transrollDesc' type='hidden' value=" + listVoucherDetails[row].TransrollDescription + "><input id='transactionid' type='hidden' value=" + listVoucherDetails[row].TransactionID + "><input id='transrollid' type='hidden' value=" + listVoucherDetails[row].TransrollID + "><input id='ledgerid' type='hidden' value=" + listVoucherDetails[row].Ledger + "><input id='vouchertext' class='form-control input-xs applydecimal' type='text' style='text-align:right' maxlength='10' value=" + Number(listVoucherDetails[row].Amount).toFixed(2) + " onchange='ChangeAmount(this)'onkeyup='return AllowNumbersWithTwoDecimals(this)'>"),
                                            $('<td hidden>').html("<input id='ledgerdesc' type='hidden' value=" + listVoucherDetails[row].LedgerDescription + ">"),
                                           // $('<td hidden >').html("<input id='minAmount' type='hidden' value=" + listVoucherDetails[row].MinAmount + ">"),
                                            $('<td hidden >').html("<input id='maxAmount' type='hidden' value=" + Number(listVoucherDetails[row].MaxAmount).toFixed(2) + ">"),
                                            $('<td hidden >').html("<input id='ProductTypeid' type='hidden' value=" + (listVoucherDetails[row].ProductTypeID) + ">")
                                            ).appendTo('#VoucherDetails tbody');
                                        xml += "<row>";
                                        xml += "<LedgerID>" + listVoucherDetails[row].Ledger + "</LedgerID>";
                                        xml += "<LedgerDescription>" + listVoucherDetails[row].LedgerDescription + "</LedgerDescription>";
                                        xml += "<TransrollID>" + listVoucherDetails[row].TransrollID + "</TransrollID>";
                                        xml += "<Amount>" + Number(listVoucherDetails[row].Amount).toFixed(2) + "</Amount>";
                                        xml += "<MaxAmount>" + Number(listVoucherDetails[row].MaxAmount).toFixed(2) + "</MaxAmount>";
                                        xml += "<TransactionID>" + listVoucherDetails[row].TransactionID + "</TransactionID>";
                                        xml += "<TransrollDescription>" + listVoucherDetails[row].TransrollDescription + "</TransrollDescription>";
                                        xml += "</row>";
                                        //narration += listVoucherDetails[row].LedgerDescription + "-" + listVoucherDetails[row].Amount + " ";
                                    }
                                    xml += "</Temp>";

                                    //narration += name + "/Admission no " + admissionno + "/Account no " + accountname + "";
                                    $('#XML').val(xml);
                                    $("#TotalAmount").val(Number(collectionamount).toFixed(2));
                                    var amount = Number(collectionamount).toFixed(2);
                                    narration = "Being " + activity + " from " + name + " /Admission no. " + admissionno + " /Account no. " + accountname + " on debit for INR" + amount;
                                    $('#Narration').val(narration);
                                    GetAmountDecsription(parseFloat(collectionamount));
                                    $('#vouchertext').focus();
                                }
                                else {
    sweetAlert({ title: '@resFasMessages.Nodatafound' + MinShareBalance , html:true });
                                    return false;
                                    //swal({ title: "Unite", text: "<span><b>Admission No. does not exists</b></span>", html: true });
                                }

                            }
                        }
                    });
                }
                $('#VoucherDetails').focus();
            });
        $('#VoucherDetails').focus();
    });


</script>

<script>
    shortcut.add("f2", function () {

        document.getElementById('btnClear').click();
        //$('#btnClear').focus().Click();
    });

    shortcut.add("f9", function () {

        document.getElementById('btnSave').click();

    });

    shortcut.add("f8", function () {

        document.getElementById('btnAdd').click();

    });
    //shortcut.add("f9", function () {
    //
    //    document.getElementById('btnClose').click();

    //});


    $('.applydecimal').blur(function () {
        extractNumber(this, 2, false);
    });
    $('.applydecimal').keyup(function () {
        extractNumber(this, 2, false);
    });
    $('.applydecimal').keypress(function () {
        return blockNonNumbers(this, event, true, false);
    });

    $('.applynumbers').blur(function () {
        extractNumber(this, 0, false);
    });
    $('.applynumbers').keyup(function () {
        extractNumber(this, 0, false);
    });
    $('.applynumbers').keypress(function () {
        return blockNonNumbers(this, event, false, false);
    });
 
</script>

<script>
    $(document).ready(function () {                
        debugger;
        document.getElementById("FinancialTransactionType").value = 2;
        var logindate = '@ViewBag.logindate';
        var cutoffdate = '@ViewBag.CutoffDate';
         document.getElementById('IsBankControlesVisible').style.visibility = "hidden";
        var isforbackdate = '@ViewBag.IsForBackDate';
        if (isforbackdate == "Y")
        {
            if (Date.parse(cutoffdate) < Date.parse(logindate))
            {
    sweetAlert({ title: '@resFasMessages.Transactionsarenotallowedaftercutoffdate' , html:true });
                $('#Admissionno').attr('readonly', true);
                $('#iconsearch').hide();
                return;
            }
        }
        else
        {
            GetDayEndChecking(logindate);
        }
        $('#InvestmentDepositType').prop('readonly', true);
        var denominationstatus = '@ViewBag.denomination';
        var status = 'true';
        document.getElementById("saveupdate").value = status;
        debugger;
        resetFields();
        debugger;
        GetOpeningbalance();
    });
    function GetDayEndChecking(v) {
        if (v == "") {
            return;
        }
        $.ajax({
            type: "Get",
            url: '@Url.Action("GetDayEndDetails", "TransactionReceipt")',
            data: { date: v },
            datatype: "json",
            success: function (dayendstatus) {

                var combostring;
                if (dayendstatus.data == false) {

                    //return Notify('Something Went Wrong!', 'top-full-width', '10000', 'danger', 'fa-bolt', true);
                    $('#btnClear').click();
    sweetAlert({ title: '@resFasMessages.Lastdayenddateis' + '' + dayendstatus.data2 , html:true });
                }
            }
        })
    }

    function resetPostFields2() {
         ;
        var accountno = document.getElementById("AccountNo").value;
        var productcode = document.getElementById("Product").value;
        var accountType = document.getElementById("ActivityType").value;
        var denominationstatus = '@ViewBag.denomination';
        $('#AccountPkey').val(accountno);
        var admissionno = $('#Admissionno').val();
        if (admissionno != "") {

            var VchrType = $('#VoucherType').val();
            var denominationstatus = '@ViewBag.denomination';
            var denominationAmount = $('#objDenominationDTO_Total').val();
            var totalamount = $('#TotalAmount').val();
            if (productcode == "" || productcode == "0") {
                $("#Product").focus();
    sweetAlert({ title: '@resFasMessages.SelectProduct'  , html:true });
            }
            else if (accountno == "" || accountno == "0") {
                $("#AccountNo").focus();
    sweetAlert({ title: '@resFasMessages.SelectAccountNo'  , html:true });
            }
            else if (accountType == "" || accountType == "0") {
                $("#ActivityType").focus();
    sweetAlert({ title: '@resFasMessages.SelectActivity'  , html:true });
            }
            else if (VchrType == "" || VchrType == null) {
                $("#VoucherType").focus();
    sweetAlert({ title: '@resFasMessages.SelectVoucherType'  , html:true });
            }
            else if (totalamount != 0) {
                if (VchrType == 3) {
                    var product = $("#ContraProduct").val();
                    var account = $("#ContraAccountNo").val();
                    if (product == "0") {
    sweetAlert({ title: '@resFasMessages.SelectContraProduct'  , html:true });
                    }
                    else if (account == "0") {
    sweetAlert({ title: '@resFasMessages.SelectContraAccountNo'  , html:true });
                    }                    
                }

                if (VchrType == 1 && denominationstatus == 'Y' && denominationAmount != 0) {
                    var OutdenominationAmount = $('#objDenominationDTO_OutTotal').val();
                    denominationAmount = parseFloat(denominationAmount) - parseFloat(OutdenominationAmount);
                    if (denominationAmount != totalamount) {
    sweetAlert({ title: '@resFasMessages.EnterCorrectDenominationDetails'  , html:true });
                    }
                    else {
                        var cashbalance = $('#CashBalance').val();
                        if (parseFloat(totalamount) > parseFloat(cashbalance)) {
    sweetAlert({ title: '@resFasMessages.Noenoughcashbalance'  , html:true });
                        }                        
                    }
                }                
            }            
        }

        else {
            $('#InvestmentType').focus();
    sweetAlert({ title: '@resFasMessages.EnterTempAccountNumber'  , html:true });

        }
    }
    function resetPostFields() {
         debugger;
        var accountno = document.getElementById("AccountNo").value;
        var productcode = document.getElementById("Product").value;
        var accountType = document.getElementById("ActivityType").value;
        var denominationstatus = '@ViewBag.denomination';
        $('#AccountPkey').val(accountno);
        var accnoInv = $("#AccountNo option:selected").text();
        $("#InvestmentAccToPost").val(accnoInv);
        var TempAccountNo = $('#TempAccountNo').val();
        if (accnoInv != "") {
            var VchrType = $('#VoucherType').val();
            var denominationstatus = '@ViewBag.denomination';
            var denominationAmount = $('#objDenominationDTO_Total').val();
            var totalamount = $('#TotalAmount').val();
            if (productcode == "" || productcode == "0") {
                $("#Product").focus();
                sweetAlert("@resFasMessages.SelectProduct");
            }
            else if (accountno == "" || accountno == "0") {
                $("#AccountNo").focus();
                sweetAlert("@resFasMessages.SelectAccountNo");
            }
            else if (accountType == "" || accountType == "0") {
                $("#ActivityType").focus();
                sweetAlert("@resFasMessages.SelectActivity");
            }
            else if (VchrType == "" || VchrType == null) {
                $("#VoucherType").focus();
                sweetAlert("@resFasMessages.SelectVoucherType")
            }          
            else if (totalamount != 0 && totalamount!="NaN") {
                var LedgerXML = $('#XML').val();
                var accountId = $("#AccountNo option:selected").text();//accountno;
                $.ajax({
                    url: '@Url.Action("GetLastPostTransactionDetails", "TransactionPaymentsFirm")',
                    type: 'GET',
                    data: { 'XML': LedgerXML, 'AccountId': accountId },
                    dataType:"JSON",
                    contentType: 'application/json',
                    success: function (result) {
                        debugger;
                        if (result.length > 0) {
                            LastVoucherRecord(result);
                            var header = '@resFasMessages.LastTransactionDetails' + $('#LastVoucherDetailsDiv').html();
                            var voucherdetails = result[0].AmountInWords;
                            if (result.length == 1) {
                                header = "";
                            }


                            swal({
                                html: true,
                                title: header,
                                text: voucherdetails,
                                type: 'warning',
                                showCancelButton: true,
                                confirmButtonColor: '#3085d6',
                                cancelButtonColor: '#d33',
                                confirmButtonText: '@resFasLables.Yes',
                                cancelButtonText: '@resFasLables.Cancel',
                                closeOnConfirm: false
                            },
               function (isConfirm) {
                   if (isConfirm) {
                       debugger;
                       //swal.close();//swal Activity available in getpostdeatils so swal.close written code wrong so commit this code
                       GetpostDetails();

                   }
                   else {
                       debugger;
                       $('#btnClear').trigger('click')
                       return false

                   }
               })
                        }

                    }
                })
            }
            else {
                $('#vouchertext').focus();

                swal({
                    title: '@resFasMessages.EnterAmount'
                },
                 function (isConfirm) {
                     $('#vouchertext').focus();
                     $('#vouchertext').val("0.00");
                     $('#TotalAmount').val("0.00");
                 });
            }
        }

        @*else {
            $('#InvestmentType').focus();
            sweetAlert("@resFasMessages.EnterTempAccountNumber")
        }*@
    }


    function GetpostDetails()
    {
        var accountno = document.getElementById("AccountNo").value;
        var productcode = document.getElementById("Product").value;
        var accountType = document.getElementById("ActivityType").value;
        var denominationstatus = '@ViewBag.denomination';
        $('#AccountPkey').val(accountno);
        var TempAccountNo = $('#TempAccountNo').val();
        var denominationstatus = '@ViewBag.denomination';
        var denominationAmount = $('#objDenominationDTO_Total').val();
        var totalamount = $('#TotalAmount').val();
        var VchrType = $('#VoucherType').val();
        if (VchrType == 3) {
            var product = $("#ContraProduct").val();
            var account = $("#ContraAccountNo").val();
            if (product == "0") {
                sweetAlert('@resFasMessages.SelectContraProduct');
            }
            else if (account == "0") {
                sweetAlert('@resFasMessages.SelectContraAccountNo');
            }            
        }
        if (VchrType == 1 && denominationstatus == 'Y' && denominationAmount != 0) {
            var OutdenominationAmount = $('#objDenominationDTO_OutTotal').val();
            denominationAmount = parseFloat(denominationAmount) - parseFloat(OutdenominationAmount);
            if (denominationAmount != totalamount) {
                sweetAlert("@resFasMessages.EnterCorrectDenominationDetails")
            }
            else {
                var cashbalance = $('#CashBalance').val();
                if (parseFloat(totalamount) > parseFloat(cashbalance)) {
                    sweetAlert("@resFasMessages.Noenoughcashbalance");
                }
                else {
                    var status = ShowDisbursments();
                    if (status) {

                        swal({
                            title:'@resFasMessages.AddDisbursementDetails',
                            text:'@resFasMessages.ProvideDisbursementDetails',
                            type: 'info',
                            showCancelButton: true,
                            confirmButtonColor: '#3085d6',
                            cancelButtonColor: '#d33',
                            confirmButtonText: '@resFasLables.Yes',
                            cancelButtonText: '@resFasLables.Cancel',

                            closeOnConfirm: true
                        },
                        function (isConfirm) {
                            if (isConfirm) {
                                $('#btnaddmoredisbursemetns').click();
                                // $('#btnPost').trigger('click');
                            }
                            else {

                            }
                        })
                    }
                    else {
                        $('#btnPost').trigger('click');
                    }

                }
            }
        }
        else {
            var status = ShowDisbursments();
            if (status) {

                swal({

                    title: '@resFasMessages.AddDisbursementDetails',
                    text: '@resFasMessages.ProvideDisbursementDetails',
                    type: 'info',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: '@resFasLables.Yes',
                    cancelButtonText: '@resFasLables.Cancel',

                    closeOnConfirm: true
                },
                function (isConfirm) {
                    if (isConfirm) {
                        $('#btnaddmoredisbursemetns').click();
                        // $('#btnPost').trigger('click');
                    }
                })
            }
            else {
                $('#btnPost').trigger('click');
            }

        }
    }



</script>
<script>

    $(function () {
        $("#objDenominationDTO_Thousands").focusout(function () {
            ;
            var count = $("#objDenominationDTO_Thousands").val();
            if (count == "") {
                count = 0;
            }
            var total = (parseFloat(count) * 1000)

            $('#objDenominationDTO_ThousandsTotal').val(Number(total).toFixed(2));
            calculateDenominationTotal();
        })
    })

    $(function () {
        $("#objDenominationDTO_FiveHundreds").focusout(function () {
            ;
            var count = $("#objDenominationDTO_FiveHundreds").val();
            if (count == "") {
                count = 0;
            }
            var total = (parseFloat(count) * 500)

            $('#objDenominationDTO_FiveHundredsTotal').val(Number(total).toFixed(2));
            calculateDenominationTotal();
        })
    })

    $(function () {
        $("#objDenominationDTO_Hundreds").focusout(function () {
            ;
            var count = $("#objDenominationDTO_Hundreds").val();
            if (count == "") {
                count = 0;
            }
            var total = (parseFloat(count) * 100)

            $('#objDenominationDTO_HundredsTotal').val(Number(total).toFixed(2));
            calculateDenominationTotal();
        })
    })

    $(function () {
        $("#objDenominationDTO_Fifties").focusout(function () {
            ;
            var count = $("#objDenominationDTO_Fifties").val();
            if (count == "") {
                count = 0;
            }
            var total = (parseFloat(count) * 50)

            $('#objDenominationDTO_FiftiesTotal').val(Number(total).toFixed(2));
            calculateDenominationTotal();
        })
    })

    $(function () {
        $("#objDenominationDTO_Twenties").focusout(function () {
            ;
            var count = $("#objDenominationDTO_Twenties").val();
            if (count == "") {
                count = 0;
            }
            var total = (parseFloat(count) * 20)

            $('#objDenominationDTO_TwentiesTotal').val(Number(total).toFixed(2));
            calculateDenominationTotal();
        })
    })

    $(function () {
        $("#objDenominationDTO_Tens").focusout(function () {
            ;
            var count = $("#objDenominationDTO_Tens").val();
            if (count == "") {
                count = 0;
            }
            var total = (parseFloat(count) * 10)

            $('#objDenominationDTO_TensTotal').val(Number(total).toFixed(2));
            calculateDenominationTotal();
        })
    })

    $(function () {
        $("#objDenominationDTO_Fives").focusout(function () {
            ;
            var count = $("#objDenominationDTO_Fives").val();
            if (count == "") {
                count = 0;
            }
            var total = (parseFloat(count) * 5)

            $('#objDenominationDTO_FivesTotal').val(Number(total).toFixed(2));
            calculateDenominationTotal();
        })
    })

    $(function () {
        $("#objDenominationDTO_Twos").focusout(function () {
            ;
            var count = $("#objDenominationDTO_Twos").val();
            if (count == "") {
                count = 0;
            }
            var total = (parseFloat(count) * 2)

            $('#objDenominationDTO_TwosTotal').val(Number(total).toFixed(2));
            calculateDenominationTotal();
        })
    })

    $(function () {
        $("#objDenominationDTO_Ones").focusout(function () {
            ;
            var count = $("#objDenominationDTO_Ones").val();
            if (count == "") {
                count = 0;
            }
            var total = (parseFloat(count) * 1)

            $('#objDenominationDTO_OnesTotal').val(Number(total).toFixed(2));
            calculateDenominationTotal();
        })
    })

    function calculateDenominationTotal() {
        ;
        var Thousands = $('#objDenominationDTO_ThousandsTotal').val();
        if (Thousands == "") {
            Thousands = 0;
        }
        var FiveHundreds = $('#objDenominationDTO_FiveHundredsTotal').val();
        if (FiveHundreds == "") {
            FiveHundreds = 0;
        }
        var Hundreds = $('#objDenominationDTO_HundredsTotal').val();
        if (Hundreds == "") {
            Hundreds = 0;
        }
        var Fifties = $('#objDenominationDTO_FiftiesTotal').val();
        if (Fifties == "") {
            Fifties = 0;
        }
        var Twenties = $('#objDenominationDTO_TwentiesTotal').val();
        if (Twenties == "") {
            Twenties = 0;
        }
        var Tens = $('#objDenominationDTO_TensTotal').val();
        if (Tens == "") {
            Tens = 0;
        }
        var Fives = $('#objDenominationDTO_FivesTotal').val();
        if (Fives == "") {
            Fives = 0;
        }
        var Twos = $('#objDenominationDTO_TwosTotal').val();
        if (Twos == "") {
            Twos = 0;
        }
        var Ones = $('#objDenominationDTO_OnesTotal').val();
        if (Ones == "") {
            Ones = 0;
        }
        var denominationtotal = 0;
        denominationtotal = (parseFloat(Thousands) + parseFloat(FiveHundreds) + parseFloat(Hundreds) + parseFloat(Fifties) + parseFloat(Twenties) + parseFloat(Tens) + parseFloat(Fives) + parseFloat(Twos) + parseFloat(Ones));
        $('#objDenominationDTO_Total').val(Number(denominationtotal).toFixed(2));
        //$('#TotalAmount').val(parseFloat(denominationtotal));
        //GetAmountDecsription(parseFloat(denominationtotal));
    }

    $(function () {
        $("#objDenominationDTO_OutThousands").focusout(function () {
            ;
            var count = $("#objDenominationDTO_OutThousands").val();
            if (count == "") {
                count = 0;
            }
            var total = (parseFloat(count) * 1000)

            $('#objDenominationDTO_OutThousandsTotal').val(Number(total).toFixed(2));
            calculateOutDenominationTotal();
        })
    })

    $(function () {
        $("#objDenominationDTO_OutFiveHundreds").focusout(function () {
            ;
            var count = $("#objDenominationDTO_OutFiveHundreds").val();
            if (count == "") {
                count = 0;
            }
            var total = (parseFloat(count) * 500)

            $('#objDenominationDTO_OutFiveHundredsTotal').val(Number(total).toFixed(2));
            calculateOutDenominationTotal();
        })
    })

    $(function () {
        $("#objDenominationDTO_OutHundreds").focusout(function () {
            ;
            var count = $("#objDenominationDTO_OutHundreds").val();
            if (count == "") {
                count = 0;
            }
            var total = (parseFloat(count) * 100)

            $('#objDenominationDTO_OutHundredsTotal').val(Number(total).toFixed(2));
            calculateOutDenominationTotal();
        })
    })

    $(function () {
        $("#objDenominationDTO_OutFifties").focusout(function () {
            ;
            var count = $("#objDenominationDTO_OutFifties").val();
            if (count == "") {
                count = 0;
            }
            var total = (parseFloat(count) * 50)

            $('#objDenominationDTO_OutFiftiesTotal').val(Number(total).toFixed(2));
            calculateOutDenominationTotal();
        })
    })

    $(function () {
        $("#objDenominationDTO_OutTwenties").focusout(function () {
            ;
            var count = $("#objDenominationDTO_OutTwenties").val();
            if (count == "") {
                count = 0;
            }
            var total = (parseFloat(count) * 20)

            $('#objDenominationDTO_OutTwentiesTotal').val(Number(total).toFixed(2));
            calculateOutDenominationTotal();
        })
    })

    $(function () {
        $("#objDenominationDTO_OutTens").focusout(function () {
            ;
            var count = $("#objDenominationDTO_OutTens").val();
            if (count == "") {
                count = 0;
            }
            var total = (parseFloat(count) * 10)

            $('#objDenominationDTO_OutTensTotal').val(Number(total).toFixed(2));
            calculateOutDenominationTotal();
        })
    })

    $(function () {
        $("#objDenominationDTO_OutFives").focusout(function () {
            ;
            var count = $("#objDenominationDTO_OutFives").val();
            if (count == "") {
                count = 0;
            }
            var total = (parseFloat(count) * 5)

            $('#objDenominationDTO_OutFivesTotal').val(Number(total).toFixed(2));
            calculateOutDenominationTotal();
        })
    })

    $(function () {
        $("#objDenominationDTO_OutTwos").focusout(function () {
            ;
            var count = $("#objDenominationDTO_OutTwos").val();
            if (count == "") {
                count = 0;
            }
            var total = (parseFloat(count) * 2)

            $('#objDenominationDTO_OutTwosTotal').val(Number(total).toFixed(2));
            calculateOutDenominationTotal();
        })
    })

    $(function () {
        $("#objDenominationDTO_OutOnes").focusout(function () {
            ;
            var count = $("#objDenominationDTO_OutOnes").val();
            if (count == "") {
                count = 0;
            }
            var total = (parseFloat(count) * 1)

            $('#objDenominationDTO_OutOnesTotal').val(Number(total).toFixed(2));
            calculateOutDenominationTotal();
        })
    })

    function calculateOutDenominationTotal() {
        ;
        var OutThousands = $('#objDenominationDTO_OutThousandsTotal').val();
        if (OutThousands == "") {
            OutThousands = 0;
        }
        var OutFiveHundreds = $('#objDenominationDTO_OutFiveHundredsTotal').val();
        if (OutFiveHundreds == "") {
            OutFiveHundreds = 0;
        }
        var OutHundreds = $('#objDenominationDTO_OutHundredsTotal').val();
        if (OutHundreds == "") {
            OutHundreds = 0;
        }
        var OutFifties = $('#objDenominationDTO_OutFiftiesTotal').val();
        if (OutFifties == "") {
            OutFifties = 0;
        }
        var OutTwenties = $('#objDenominationDTO_OutTwentiesTotal').val();
        if (OutTwenties == "") {
            OutTwenties = 0;
        }
        var OutTens = $('#objDenominationDTO_OutTensTotal').val();
        if (OutTens == "") {
            OutTens = 0;
        }
        var OutFives = $('#objDenominationDTO_OutFivesTotal').val();
        if (OutFives == "") {
            OutFives = 0;
        }
        var OutTwos = $('#objDenominationDTO_OutTwosTotal').val();
        if (OutTwos == "") {
            OutTwos = 0;
        }
        var OutOnes = $('#objDenominationDTO_OutOnesTotal').val();
        if (OutOnes == "") {
            OutOnes = 0;
        }
        var OutDenominationtotal = 0;
        OutDenominationtotal = (parseFloat(OutThousands) + parseFloat(OutFiveHundreds) + parseFloat(OutHundreds) + parseFloat(OutFifties) + parseFloat(OutTwenties) + parseFloat(OutTens) + parseFloat(OutFives) + parseFloat(OutTwos) + parseFloat(OutOnes));
        $('#objDenominationDTO_OutTotal').val(Number(OutDenominationtotal).toFixed(2));

    }

</script>

<script>

    $(document).ready(function () {
        $('#CashDenominationDetails').on('hidden.bs.modal', function (e) {
            ;
            $(e.target).removeData('bs.modal');
        });
        $('.modal').on('shown.bs.modal', function (e) {
            ;
            //$('#Item1_BaseUnitDescription').val('');
            $('#objDenominationDTO_Thousands ').focus();

        });




    });
    function AllowNumbers(control) {
        extractNumber(control, 0, false);
    }
    function AllowNumbersWithTwoDecimals(control) {
        extractNumber(control, 2, false);
    }
</script>
<script>
    function GetControlRecord() {
         ;

        var accountno = $('#AccountNo option:selected').text();
        var TempAccountNo = $('#TempAccountNo').val();;
        $.ajax({
            url: '@Url.Action("GetControlRecordData", "TransactionReceipt")',
            type: 'Get',
            data: { AccountCode: accountno, AdmissionNo: TempAccountNo },
            dataType: 'json',
            contentType: 'application/json',
            success: function (data) {
                 ;
                var _data = data;
                CommonControlRecord(_data);
            }
        });
    }

  
    function GetScrollRecord() {
         ;
        var transactiondate = $('#TransactionDate').val();
        var transactiontype = "2";
        var Module = $('#ModulName').val();
        var PassStatus = $('#PassStatus').val();
        var Transactionid = $('#Activity').val();
        if (Module == "") {
            Module = 0;
        }
        if (PassStatus == "") {
            PassStatus = 0;
        }
        if (Transactionid == "") {
            Transactionid = 0;
        }
        $.ajax({
            url: '@Url.Action("GetScrollRecordsData", "TransactionReceipt")',
            type: 'Get',
            data: { TransactionDate: transactiondate, TransactionType: transactiontype, module: Module, passStatus: PassStatus, transrolid: Transactionid },
            dataType: 'json',
            conentType: 'application/json',
            success: function (result) {
                 ;
                if (result != false) {
                    var _scrollrecords = result.scrollrecords;
                    var _products = result.products;
                    var _activity = result.activitys;
                    if (Module == 0) {
                        $("#ModulName").empty();

                        if (_products.empty) {

                            $("#ModulName").append("<option value=0>@resInvestmentLables.select</option>");
                        }
                        else {
                            $('#ModulName').append('<option value="0">@resInvestmentLables.select</option>');

                            for (var i = 0; i < _products.length; i++) {
                                $("#ModulName").append("<option value=" + _products[i].ProductTypeID + ">" + _products[i].ProductTypeDescription + "</option>");
                            }
                        }
                    }

                    if (Transactionid == 0) {
                        $("#Activity").empty();

                        if (_activity.empty) {

                            $("#Activity").append("<option value=0>@resInvestmentLables.select</option>");
                        }
                        else {
                            $('#Activity').append('<option value="0">@resInvestmentLables.select</option>');

                            for (var i = 0; i < _activity.length; i++) {
                                $("#Activity").append("<option value=" + _activity[i].TransactionId + ">" + _activity[i].ActivityTypeDescription + "</option>");
                            }
                        }
                    }

                    if (_scrollrecords != false) {
                        ScrollRecord(_scrollrecords);
                    }
                    else {
                        $('#ScrollRecord tbody tr').remove();
                        $('#TotalPayment').text("");
                    }
                }
            }
        })
    }

    function ScrollRecord(data) {
         ;

        if (data == false) {
            $('#ScrollRecord tbody tr').remove();
            var $tr = $('<tr >').append(
             $('<td colspan="20">').text('@resFasMessages.NoRowsFound')

             ).appendTo('#ScrollRecord');
            return false;
        }
        else {
            var ScrollData = data;
            var totalPayments = 0;
             ;
            $('#ScrollRecord tbody tr').remove();
            for (var row = 0; row < ScrollData.length; row++) {
                 ;
                if (ScrollData[row].Debit != 0) {
                    if (ScrollData[row].status == false) {
                        var $tr = $('<tr >').append(
                            $('<td style="text-align:center;color:red">').text(ScrollData[row].VoucherNo),
                            $('<td style="text-align:center;color:red">').text(ConvertJsonDateStringinDDMMYYYY(ScrollData[row].TransactionDate)),
                            $('<td style="text-align:center;color:red">').text(ScrollData[row].Module),
                            $('<td style="text-align:center;color:red">').text(ScrollData[row].Activity),
                            $('<td style="text-align:left;color:red">').text(ScrollData[row].Particulars),
                            $('<td style="text-align:center;color:red">').text('@resFasLables.NotPosted'),
                           $('<td style="text-align:Right;color:red">').text(Number(ScrollData[row].Debit).toFixed(2))
                            ).appendTo('#ScrollRecord');
                    }
                    else {
                        if (row % 2 == 0) {
                            var $tr = $('<tr >').append(
                               $('<td style="text-align:center;color:blue">').text(ScrollData[row].VoucherNo),
                               $('<td style="text-align:center;color:blue">').text(ConvertJsonDateStringinDDMMYYYY(ScrollData[row].TransactionDate)),
                                $('<td style="text-align:center;color:blue">').text(ScrollData[row].Module),
                                 $('<td style="text-align:center;color:blue">').text(ScrollData[row].Activity),
                               $('<td style="text-align:left;color:blue">').text(ScrollData[row].Particulars),
                               $('<td style="text-align:center;color:blue">').text('@resFasLables.Posted'),
                              $('<td style="text-align:Right;color:blue">').text(Number(ScrollData[row].Debit).toFixed(2))
                              //$('<td>').text(ScrollData[row].KeyValue)
                               ).appendTo('#ScrollRecord');
                        }
                        else {
                            var $tr = $('<tr >').append(

                                $('<td style="text-align:center">').text(ScrollData[row].VoucherNo),
                                $('<td style="text-align:center">').text(ConvertJsonDateStringinDDMMYYYY(ScrollData[row].TransactionDate)),
                                 $('<td style="text-align:center">').text(ScrollData[row].Module),
                                  $('<td style="text-align:center">').text(ScrollData[row].Activity),
                                $('<td style="text-align:left">').text(ScrollData[row].Particulars),

                                $('<td style="text-align:center">').text('@resFasLables.Posted'),

                                //$('<td>').text(ScrollData[row].Debit),
                               $('<td style="text-align:Right">').text(Number(ScrollData[row].Debit).toFixed(2))
                               //$('<td>').text(ScrollData[row].KeyValue)

                                ).appendTo('#ScrollRecord');
                        }
                    }
                    var totDebit = parseFloat(ScrollData[row].Debit) + parseFloat(totalPayments);

                    totalPayments = totDebit;
                }
            }

            $('#TotalPayment').text(Number(totalPayments).toFixed(2));
        }
    }
    function LastVoucherRecord(data) {

        if (data == false) {
            $('#LastVoucherDetails tbody tr').remove();
            var $tr = $('<tr >').append(
             $('<td colspan="20">').text('@resFasMessages.NoRowsFound')

             ).appendTo('#LastVoucherDetails');
            return false;
        }
        else {
            debugger;
            var ScrollData = data;
            var totalReceipts = 0;
          
            $('#LastVoucherDetails tbody tr').remove();
            for (var row = 0; row < ScrollData.length; row++) {
                 var vouvhdate =ScrollData[row].TransactionDate;
                 var converteddate = ConvertJsonDateStringinDDMMYYYY(vouvhdate);

                $('#LastVoucherDetails tbody').append('<tr><td>' + converteddate + '</td><td>' + ScrollData[row].Particulars + '</td><td>' + ScrollData[row].Debit + '</td><td>' + ScrollData[row].Credit + '</td></tr>');


            }


        }
    }

    //function ConvertJsonDateStringinDDMMYYYY(jsonDate) {
    //    var shortDate = null;
    //    if (jsonDate) {
    //        var regex = /-?\d+/;
    //        var matches = regex.exec(jsonDate);
    //        var dt = new Date(parseInt(matches[0]));
    //        var month = dt.getMonth() + 1;
    //        var monthString = month > 9 ? month : '0' + month;
    //        var day = dt.getDate();
    //        var dayString = day > 9 ? day : '0' + day;
    //        var year = dt.getFullYear();
    //        //shortDate = year + '-' + monthString + '-' + dayString;
    //        shortDate = dayString + '-' + monthString + '-' + year;
    //    }
    //    return shortDate;
    //};

    function ConvertJsonDateStringinDDMMYYYY(jsonDate) {
    var shortDate = null;
    if (jsonDate) {
        var date = new Date(jsonDate);
        var day = date.getDate();
        var month = date.getMonth() + 1; // Month is zero-based, so add 1
        var year = date.getFullYear();
        var formattedDate = padNumber(day) + '/' + padNumber(month) + '/' + year;
        shortDate = formattedDate;
    }
    return shortDate;
}

function padNumber(number) {
    return (number < 10 ? '0' : '') + number;
}

</script>

@*BankType Change*@
<script>
    $(function () {
        $('#InvestmentBankType').change(function () {
                
            var BankType = $('#InvestmentBankType').val();
            var message = "NoBanksMappedForSelectedBankType";
            if (BankType > 0) {
                //BankTypeChange(BankType, message);

                $.ajax({
                    url: '@Url.Action("GetBankDetails")',
                    type: 'Get',
                    data: { bankType: BankType },
                    datatype: 'json',
                    contentType: 'application/json',
                    success: function (result) {
                        debugger;
                        var banks = result.object1;
                        debugger;
                        if (banks.length > 0) {
                            debugger;
                            $("#InvestmentBank option").remove();
                            $("#InvestmentBankBranch option").remove();
                            $('<option/>').val(0).html('@resInvestmentLables.select').appendTo('#InvestmentBank');
                            $('<option/>').val(0).html('@resInvestmentLables.select').appendTo('#InvestmentBankBranch');
                            var bankTypeMstr = banks.length;
                            for (var i = 0; i < bankTypeMstr ; i++) {
                                debugger;
                                $('<option/>').val(banks[i].BankId).html(banks[i].BankName).appendTo('#InvestmentBank');

                            };
                        }
                        else {
                            debugger;
                            $("#InvestmentBank option").remove();
                            $("#InvestmentBankBranch option").remove();
                            $('<option/>').val(0).html('@resInvestmentLables.select').appendTo('#InvestmentBank');
                            $('<option/>').val(0).html('@resInvestmentLables.select').appendTo('#InvestmentBankBranch');
                            swal({ title: message }, function (isConfirm) { if (isConfirm) { $('#InvestmentBank').focus(); } })
                        }
                    }
                });
            }
            else { }
        })
    })

</script>

@*Bank Change*@
<script>
    $(function () {
        $('#InvestmentBank').change(function () {
            debugger;
            var Bank = $('#InvestmentBank').val();
            var message = @resInvestmentLables.NoofSharesBalance;
            if (Bank > 0) {
                //BankTypeChange(BankType, message);

                $.ajax({
                    url: '@Url.Action("GetBankBranchDetails")',
                    type: 'Get',
                    data: { bankId: Bank },
                    datatype: 'json',
                    contentType: 'application/json',
                    success: function (result) {
                        debugger;
                        var banks = result.object1;
                        debugger;
                        if (banks.length > 0) {
                            debugger;
                            $("#InvestmentBankBranch option").remove();
                            $('<option/>').val(0).html('@resInvestmentLables.select').appendTo('#InvestmentBankBranch');
                            var bankTypeMstr = banks.length;
                            for (var i = 0; i < bankTypeMstr ; i++) {
                                debugger;
                                $('<option/>').val(banks[i].SlNo).html(banks[i].BranchName).appendTo('#InvestmentBankBranch');

                            };
                        }
                        else {
                            debugger;
                            $("#InvestmentBankBranch option").remove();
                            $('<option/>').val(0).html('@resInvestmentLables.select').appendTo('#InvestmentBankBranch');
                            swal({ title: message }, function (isConfirm) { if (isConfirm) { $('#InvestmentBankBranch').focus(); } })
                        }
                    }
                });
            }
            else { }
        })
    })
</script>

@*Bank Change*@
<script>
    $(function () {
        $('#InvestmentType').change(function () {

            //Code Added by Sunil
            debugger;
            var BankBranch = $('#InvestmentBankBranch').val();
            var InvestmentBankType = $('#InvestmentBankType').val();
            if (InvestmentBankType == "" || InvestmentBankType == null)
                InvestmentBankType = 0;
            var InvestmentBank = $('#InvestmentBank').val();
            if (InvestmentBank == "" || InvestmentBank == null)
                InvestmentBank = 0;
            var InvestmentType = $('#InvestmentType').val();
            if(InvestmentType == 72)
            {
                $('#depositname').hide();
            }
            else
            {
                $('#depositname').show();
            }
            if (InvestmentType == "" || InvestmentType == null)
                InvestmentType = 0;
            var message ='No Account Exists';
            var formId = $('#formid').val();
            if (InvestmentType > 0) {
                //BankTypeChange(BankType, message);

                $.ajax({
                    url: '@Url.Action("GetInvestmentAccDetails")',
                    type: 'Get',
                    data: { bankType: InvestmentBankType, bank: InvestmentBank, bankBranch: BankBranch, investmentType: InvestmentType, FormId: formId },
                    datatype: 'json',
                    contentType: 'application/json',
                    success: function (result) {
                        debugger;
                        var banks = result.object1;
                        debugger;
                        if (banks.length > 0) {
                            debugger;
                            $("#AccountNo option").remove();
                            $('<option/>').val(0).html('@resInvestmentLables.select').appendTo('#AccountNo');
                            var bankTypeMstr = banks.length;
                            for (var i = 0; i < bankTypeMstr ; i++) {
                                debugger;
                                $('<option/>').val(banks[i]).html(banks[i]).appendTo('#AccountNo');

                            };
                        }
                        else {
                            debugger;
                            $("#AccountNo option").remove();
                            $('<option/>').val(0).html('@resInvestmentLables.select').appendTo('#AccountNo');
                            swal({ title: message }, function (isConfirm) { if (isConfirm) { $('#AccountNo').focus(); } })
                        }
                    }
                });
            }
            else { }
        })
    })
</script>