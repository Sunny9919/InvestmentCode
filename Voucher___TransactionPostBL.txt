using Intellect.Unite.WebPackages.FAS.BL;
using Intellect.Unite.WebPackages.FAS.Model;
using Intellect.Unite.WebPackages.Loans.BL;
using Intellect.Unite.WebPackages.Loans.DTO;
using Intellect.Unite.WebPackages.Loans.Model;
using Intellect.Unite.WebPackages.Mdm.BL;
using Intellect.Unite.WebPackages.Mdm.Model;
using Intellect.Unite.WebPackages.Membership.Model;
using Intellect.Unite.WebPackages.SavingsDeposit.Model;
using Intellect.Unite.WebPackages.UserManagement.Model;
using Intellect.Unite.WebPackages.VoucherProcessing.Model;
using Intellect.Unite.WebPackages.VoucherProcessing.Model.DTO;
//using Newtonsoft.Json;
using NHibernate;using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Net;
using System.Net.Mail;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using System.Xml;
using System.Net.Http.Headers;
using System.Net.Http;

using System.Data.SqlClient;
using UniteERPQuery;
using System.Globalization;

using Intellect.Unite.WebPackages.TermDeposits.Model;


namespace Intellect.Unite.WebPackages.VoucherProcessing.BL
{
    public partial class TransactionBL : IDisposable
    {

        /// <summary>
        /// 
        /// </summary>
        /// <param name="objTransactionDTO"></param>
        /// <param name="userCredentials"></param>
        /// <returns></returns>
        List<Transfers> transferslist = new List<Transfers>();
        public VoucherMainTemp FillNewVoucher(TransactionDTO objTransactionDTO, UserCredentials userCredentials, long admissionnopkey, ProductWiseActivities activityType, FinancialYearMaster finyear, bool isParellRun = false)
        {
            #region start log
            if (log.IsErrorEnabled == true)
            {
                if (userCredentials.IsDebugEnabled == true)
                {
                    log.Error("Enter  FillNewVoucher  ");
                }
            }
            else
            {
                if (userCredentials.IsDebugEnabled == true)
                {
                    log.Debug("Enter FillNewVoucher ");
                }
            }
            #endregion
            try
            {
                CommonFasBL fascommonbl = new CommonFasBL(session);
                VoucherMainTemp objVoucherMain = new VoucherMainTemp();
                IList<VoucherDetailsTemp> voucherdetailslist = new List<VoucherDetailsTemp>();
                // ProductWiseActivities activityType = session.Load<ProductWiseActivities>(objTransactionDTO.ActivityType);

                if (Convert.ToInt64(objTransactionDTO.BatchID) != 0)
                {
                    #region start log
                    if (log.IsErrorEnabled == true)
                    {
                        if (userCredentials.IsDebugEnabled == true)
                        {
                            log.Error("Enter  FillNewVoucher in GetVchrMainTempByBatchid ");
                        }
                    }
                    else
                    {
                        if (userCredentials.IsDebugEnabled == true)
                        {
                            log.Debug("Enter FillNewVoucher in GetVchrMainTempByBatchid");
                        }
                    }
                    #endregion

                    objVoucherMain = GetVchrMainTempByBatchid(Convert.ToInt64(objTransactionDTO.BatchID), userCredentials.PacsId, userCredentials.BranchId);

                    #region start log
                    if (log.IsErrorEnabled == true)
                    {
                        if (userCredentials.IsDebugEnabled == true)
                        {
                            log.Error("Leave  FillNewVoucher in GetVchrMainTempByBatchid ");
                        }
                    }
                    else
                    {
                        if (userCredentials.IsDebugEnabled == true)
                        {
                            log.Debug("Leave FillNewVoucher in GetVchrMainTempByBatchid");
                        }
                    }
                    #endregion
                    if (objVoucherMain != null)
                    {
                        voucherdetailslist = objVoucherMain.VoucherDetailsTemp;
                    }
                    else
                    {
                        objVoucherMain = new VoucherMainTemp();
                        #region start log
                        if (log.IsErrorEnabled == true)
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Error("Enter  FillNewVoucher in FillVouchermaintemp ");
                            }
                        }
                        else
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Enter FillNewVoucher in FillVouchermaintemp");
                            }
                        }
                        #endregion
                        objVoucherMain = FillVouchermaintemp(userCredentials, objTransactionDTO, activityType, finyear);
                        #region start log
                        if (log.IsErrorEnabled == true)
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Error("Leave  FillNewVoucher in FillVouchermaintemp ");
                            }
                        }
                        else
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Leave FillNewVoucher in FillVouchermaintemp");
                            }
                        }
                        #endregion
                    }
                }
                else
                {
                    objVoucherMain = new VoucherMainTemp();
                    #region start log
                    if (log.IsErrorEnabled == true)
                    {
                        if (userCredentials.IsDebugEnabled == true)
                        {
                            log.Error("Enter  FillNewVoucher in FillVouchermaintemp ");
                        }
                    }
                    else
                    {
                        if (userCredentials.IsDebugEnabled == true)
                        {
                            log.Debug("Enter FillNewVoucher in FillVouchermaintemp");
                        }
                    }
                    #endregion
                    objVoucherMain = FillVouchermaintemp(userCredentials, objTransactionDTO, activityType, finyear);
                    #region start log
                    if (log.IsErrorEnabled == true)
                    {
                        if (userCredentials.IsDebugEnabled == true)
                        {
                            log.Error("Leave  FillNewVoucher in FillVouchermaintemp ");
                        }
                    }
                    else
                    {
                        if (userCredentials.IsDebugEnabled == true)
                        {
                            log.Debug("Leave FillNewVoucher in FillVouchermaintemp");
                        }
                    }
                    #endregion
                }
                long CashBookId = userCredentials.CashBookId;
                if (userCredentials.CashBookId != 0)
                {
                    #region start log
                    if (log.IsErrorEnabled == true)
                    {
                        if (userCredentials.IsDebugEnabled == true)
                        {
                            log.Error("Enter  FillNewVoucher in Getcashcounterid ");
                        }
                    }
                    else
                    {
                        if (userCredentials.IsDebugEnabled == true)
                        {
                            log.Debug("Enter FillNewVoucher in Getcashcounterid");
                        }
                    }
                    #endregion
                    CashBookId = fascommonbl.Getcashcounterid(userCredentials.UserName, userCredentials.PacsId, userCredentials.BranchId);
                    #region start log
                    if (log.IsErrorEnabled == true)
                    {
                        if (userCredentials.IsDebugEnabled == true)
                        {
                            log.Error("Leave  FillNewVoucher in Getcashcounterid ");
                        }
                    }
                    else
                    {
                        if (userCredentials.IsDebugEnabled == true)
                        {
                            log.Debug("Leave FillNewVoucher in Getcashcounterid");
                        }
                    }
                    #endregion
                }

                objVoucherMain.CashBookId = CashBookId;
                if (objTransactionDTO.ProductTypeId == 3)
                {
                    #region For Loans
                    if (activityType.FinTransactionType.TransactionTypeId != 2)
                    {
                        if (activityType.Activities.ActivityId == 8)
                        {
                            #region For Subevention
                            #region start log
                            if (log.IsErrorEnabled == true)
                            {
                                if (userCredentials.IsDebugEnabled == true)
                                {
                                    log.Error("Enter  FillNewVoucher in FillVoucherDetailsTempForSubvention ");
                                }
                            }
                            else
                            {
                                if (userCredentials.IsDebugEnabled == true)
                                {
                                    log.Debug("Enter FillNewVoucher in FillVoucherDetailsTempForSubvention");
                                }
                            }
                            #endregion
                            voucherdetailslist = FillVoucherDetailsTempForSubvention(voucherdetailslist, false, objTransactionDTO, userCredentials, CashBookId, activityType, admissionnopkey, finyear);
                            #region start log
                            if (log.IsErrorEnabled == true)
                            {
                                if (userCredentials.IsDebugEnabled == true)
                                {
                                    log.Error("Leave  FillNewVoucher in FillVoucherDetailsTempForSubvention ");
                                }
                            }
                            else
                            {
                                if (userCredentials.IsDebugEnabled == true)
                                {
                                    log.Debug("Leave FillNewVoucher in FillVoucherDetailsTempForSubvention");
                                }
                            }
                            #endregion
                            //var vdetails = GetAccountVoucherForSubvention(objTransactionDTO, userCredentials, CashBookId, activityType, admissionnopkey);
                            //voucherdetailslist.Add(vdetails);
                            #endregion
                        }
                        else
                        {
                            var pacswiserecievableslist = session.QueryOver<PacsWiseConfigurationTransaction>().Where(i => i.ApplidPacs == true && i.PacsId == userCredentials.PacsId && i.Branchid == userCredentials.BranchId && i.ProductID.Slno == activityType.Product.Slno).List();
                            if (pacswiserecievableslist != null && pacswiserecievableslist.Count > 0)//Receivables Exists
                            {
                                #region For Recievables

                                bool BelowreceivableAmt = false;
                                decimal ReamingAdjustprincipalbasedrecivableamt = 0;
                                VoucherDetailsTemp bovoucher = new VoucherDetailsTemp();
                                AccountDetails objAccountDetails = new AccountDetails();

                                if (finyear != null)
                                {
                                    bovoucher.YearCode = finyear;
                                }
                                else
                                {
                                    bovoucher.YearCode = GetFinancialYearCode(objTransactionDTO.TransactionDate);
                                }

                                var recievableslist = session.QueryOver<Receivables>().Where(i => i.Admissionno == admissionnopkey && i.Loanno == objTransactionDTO.AccountCode && i.Productid == activityType.Product.Slno).OrderBy(i => i.Date).Asc.List();
                                decimal Contravalueforrecevable = 0;


                                decimal Receivableinterest = recievableslist.Sum(i => i.Interest) + recievableslist.Sum(i => i.PenalInterest) + recievableslist.Sum(i => i.Iod);

                                XmlDocument xd = new XmlDocument();
                                xd.LoadXml(objTransactionDTO.XML.ToString());
                                TransactionTypeMasterDTO obj;
                                listTransaction = new List<TransactionTypeMasterDTO>();
                                XmlNodeList xnList = xd.SelectNodes("/Temp/row");
                                foreach (XmlNode xn in xnList)
                                {
                                    obj = new TransactionTypeMasterDTO();
                                    obj.Ledger = Convert.ToInt64(xn["LedgerID"].InnerText);
                                    obj.LedgerDescription = xn["LedgerDescription"].InnerText;
                                    obj.TransrollID = Convert.ToInt32(xn["TransrollID"].InnerText);
                                    obj.TransrollDescription = xn["TransrollDescription"].InnerText;
                                    obj.Amount = Convert.ToDecimal(xn["Amount"].InnerText);
                                    listTransaction.Add(obj);
                                }
                                if (recievableslist != null && recievableslist.Count > 0)
                                {
                                    if (listTransaction.Where(i => i.TransrollID != 1).Count() > 0)
                                    {
                                        if (listTransaction.Where(i => i.TransrollID != 1).Sum(i => i.Amount) >= Receivableinterest)
                                        {
                                            Contravalueforrecevable = Convert.ToDecimal(listTransaction.Where(i => i.TransrollID != 1).Sum(i => i.Amount)) - Receivableinterest;
                                        }
                                        else
                                        {
                                            if (Receivableinterest != 0)
                                            {
                                                BelowreceivableAmt = true;
                                                decimal PrincipalAmt = Convert.ToDecimal(listTransaction.Where(i => i.TransrollID == 1).Sum(i => i.Amount));

                                                ReamingAdjustprincipalbasedrecivableamt = Receivableinterest - Convert.ToDecimal(listTransaction.Where(i => i.TransrollID != 1).Sum(i => i.Amount));

                                                if (ReamingAdjustprincipalbasedrecivableamt != 0)
                                                {
                                                    Receivableinterest = Convert.ToDecimal(listTransaction.Where(i => i.TransrollID != 1).Sum(i => i.Amount));
                                                    Contravalueforrecevable = 0;
                                                }
                                                else
                                                {

                                                    Contravalueforrecevable = 0;
                                                }
                                            }
                                            //  Convert.ToDecimal((listTransaction.Where(i => i.TransrollID == 1).Sum(i => i.Amount))= PrincipalAmt - Contravalueforrecevable;


                                            // Receivableinterest = 0;
                                        }

                                        #region start log
                                        if (log.IsErrorEnabled == true)
                                        {
                                            if (userCredentials.IsDebugEnabled == true)
                                            {
                                                log.Error("Enter  FillNewVoucher in GetProductDetailsByslno ");
                                            }
                                        }
                                        else
                                        {
                                            if (userCredentials.IsDebugEnabled == true)
                                            {
                                                log.Debug("Enter FillNewVoucher in GetProductDetailsByslno");
                                            }
                                        }
                                        #endregion
                                        bovoucher.ProductId = GetProductDetailsByslno(activityType.Product.Slno);
                                        #region start log
                                        if (log.IsErrorEnabled == true)
                                        {
                                            if (userCredentials.IsDebugEnabled == true)
                                            {
                                                log.Error("Leave  FillNewVoucher in GetProductDetailsByslno ");
                                            }
                                        }
                                        else
                                        {
                                            if (userCredentials.IsDebugEnabled == true)
                                            {
                                                log.Debug("Leave FillNewVoucher in GetProductDetailsByslno");
                                            }
                                        }
                                        #endregion

                                        #region start log
                                        if (log.IsErrorEnabled == true)
                                        {
                                            if (userCredentials.IsDebugEnabled == true)
                                            {
                                                log.Error("Enter  FillNewVoucher in GetLedgerByProductSlNoAndTransrollID ");
                                            }
                                        }
                                        else
                                        {
                                            if (userCredentials.IsDebugEnabled == true)
                                            {
                                                log.Debug("Enter FillNewVoucher in GetLedgerByProductSlNoAndTransrollID");
                                            }
                                        }
                                        #endregion
                                        var objLedger = fascommonbl.GetLedgerByProductSlNoAndTransrollID(bovoucher.ProductId.Slno, 2, 3, userCredentials.PacsId, userCredentials.BranchId);
                                        #region start log
                                        if (log.IsErrorEnabled == true)
                                        {
                                            if (userCredentials.IsDebugEnabled == true)
                                            {
                                                log.Error("Leave  FillNewVoucher in GetLedgerByProductSlNoAndTransrollID ");
                                            }
                                        }
                                        else
                                        {
                                            if (userCredentials.IsDebugEnabled == true)
                                            {
                                                log.Debug("Leave FillNewVoucher in GetLedgerByProductSlNoAndTransrollID");
                                            }
                                        }
                                        #endregion
                                        bovoucher.ProductTypeID = bovoucher.ProductId.ProductTypeID;// session.Load<ProductTypeMaster>();

                                        bovoucher.Debit = 0;
                                        bovoucher.Credit = Contravalueforrecevable;
                                        #region start log
                                        if (log.IsErrorEnabled == true)
                                        {
                                            if (userCredentials.IsDebugEnabled == true)
                                            {
                                                log.Error("Enter  FillNewVoucher in GetAccountDetails ");
                                            }
                                        }
                                        else
                                        {
                                            if (userCredentials.IsDebugEnabled == true)
                                            {
                                                log.Debug("Enter FillNewVoucher in GetAccountDetails");
                                            }
                                        }
                                        #endregion
                                        objAccountDetails = GetAccountDetails(activityType.Product.Slno, objTransactionDTO.AccountNo, userCredentials.PacsId, userCredentials.BranchId, admissionnopkey);
                                        #region start log
                                        if (log.IsErrorEnabled == true)
                                        {
                                            if (userCredentials.IsDebugEnabled == true)
                                            {
                                                log.Error("Leave  FillNewVoucher in GetAccountDetails ");
                                            }
                                        }
                                        else
                                        {
                                            if (userCredentials.IsDebugEnabled == true)
                                            {
                                                log.Debug("Leave FillNewVoucher in GetAccountDetails");
                                            }
                                        }
                                        #endregion
                                        bovoucher.AccountCode = objAccountDetails;

                                        bovoucher.LedgerCode = objLedger;
                                        if (bovoucher.LedgerCode.AccountType.AccountTypeID == 1)
                                        {
                                            #region start log
                                            if (log.IsErrorEnabled == true)
                                            {
                                                if (userCredentials.IsDebugEnabled == true)
                                                {
                                                    log.Error("Enter  FillNewVoucher in fascommonbl.GetCashBalance ");
                                                }
                                            }
                                            else
                                            {
                                                if (userCredentials.IsDebugEnabled == true)
                                                {
                                                    log.Debug("Enter FillNewVoucher in fascommonbl.GetCashBalance");
                                                }
                                            }
                                            #endregion
                                            bovoucher.OpeningAmount = fascommonbl.GetCashBalance(userCredentials.PacsId, userCredentials.BranchId, Convert.ToDateTime(bovoucher.TransactionDate.AddDays(1)), bovoucher.YearCode.YearCode, CashBookId, 0);
                                            #region start log
                                            if (log.IsErrorEnabled == true)
                                            {
                                                if (userCredentials.IsDebugEnabled == true)
                                                {
                                                    log.Error("Leave  FillNewVoucher in fascommonbl.GetCashBalance :" + bovoucher.OpeningAmount);
                                                }
                                            }
                                            else
                                            {
                                                if (userCredentials.IsDebugEnabled == true)
                                                {
                                                    log.Debug("Leave FillNewVoucher in fascommonbl.GetCashBalance:" + bovoucher.OpeningAmount);
                                                }
                                            }
                                            #endregion
                                        }
                                        else if (bovoucher.AccountCode != null)
                                        {
                                            #region start log
                                            if (log.IsErrorEnabled == true)
                                            {
                                                if (userCredentials.IsDebugEnabled == true)
                                                {
                                                    log.Error("Enter  FillNewVoucher in fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID ");
                                                }
                                            }
                                            else
                                            {
                                                if (userCredentials.IsDebugEnabled == true)
                                                {
                                                    log.Debug("Enter FillNewVoucher in fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID");
                                                }
                                            }
                                            #endregion
                                            long accountid = bovoucher.AccountCode.AccountID;
                                            bovoucher.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(bovoucher.LedgerCode.LedgerId, userCredentials.PacsId, userCredentials.BranchId, bovoucher.YearCode.YearCode, Convert.ToDateTime(bovoucher.TransactionDate.AddDays(1)), bovoucher.LedgerCode.LedgerType.LedgerTypeId, accountid);
                                            #region start log
                                            if (log.IsErrorEnabled == true)
                                            {
                                                if (userCredentials.IsDebugEnabled == true)
                                                {
                                                    log.Error("Leave  FillNewVoucher in fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID :" + bovoucher.OpeningAmount);
                                                }
                                            }
                                            else
                                            {
                                                if (userCredentials.IsDebugEnabled == true)
                                                {
                                                    log.Debug("Leave FillNewVoucher in fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID:" + bovoucher.OpeningAmount);
                                                }
                                            }
                                            #endregion
                                            // bovoucher.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(bovoucher.LedgerCode, userCredentials.PacsId, userCredentials.BranchId, bovoucher.YearCode, Convert.ToDateTime(bovoucher.TransactionDate.AddDays(1)), accountid);
                                        }
                                        else
                                        {
                                            #region start log
                                            if (log.IsErrorEnabled == true)
                                            {
                                                if (userCredentials.IsDebugEnabled == true)
                                                {
                                                    log.Error("Enter  FillNewVoucher in fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID ");
                                                }
                                            }
                                            else
                                            {
                                                if (userCredentials.IsDebugEnabled == true)
                                                {
                                                    log.Debug("Enter FillNewVoucher in fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID");
                                                }
                                            }
                                            #endregion
                                            bovoucher.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(bovoucher.LedgerCode.LedgerId, userCredentials.PacsId, userCredentials.BranchId, bovoucher.YearCode.YearCode, Convert.ToDateTime(bovoucher.TransactionDate.AddDays(1)), bovoucher.LedgerCode.LedgerType.LedgerTypeId);
                                            #region start log
                                            if (log.IsErrorEnabled == true)
                                            {
                                                if (userCredentials.IsDebugEnabled == true)
                                                {
                                                    log.Error("Leave  FillNewVoucher in fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID :" + bovoucher.OpeningAmount);
                                                }
                                            }
                                            else
                                            {
                                                if (userCredentials.IsDebugEnabled == true)
                                                {
                                                    log.Debug("Leave FillNewVoucher in fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID:" + bovoucher.OpeningAmount);
                                                }
                                            }
                                            #endregion
                                            //bovoucher.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(bovoucher.LedgerCode, userCredentials.PacsId, userCredentials.BranchId, bovoucher.YearCode, Convert.ToDateTime(bovoucher.TransactionDate.AddDays(1)));
                                        }


                                        if (bovoucher.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.liabilities) || bovoucher.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.income))
                                        {
                                            bovoucher.BalanceAmount = bovoucher.OpeningAmount + bovoucher.Credit - bovoucher.Debit;
                                        }
                                        else if (bovoucher.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.asset) || bovoucher.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.Expenditure))
                                        {
                                            bovoucher.BalanceAmount = bovoucher.OpeningAmount - bovoucher.Credit + bovoucher.Debit;
                                        }
                                        bovoucher.CashBookId = CashBookId;
                                        bovoucher.Narration = objAccountDetails.AccountCode + " " + "Interest receivaed  Amount:" + Contravalueforrecevable; //bovoucher.Narration; //"share deposit"; //GetNarrationTemplateDetails(104).DebitCashNarration;
                                        bovoucher.TransrollID = 2;
                                        bovoucher.TransactionDate = Convert.ToDateTime(objTransactionDTO.TransactionDate).Date;
                                        bovoucher.ValueDate = Convert.ToDateTime(objTransactionDTO.ValueDate.ToShortDateString() + " " + DateTime.Now.TimeOfDay);
                                        bovoucher.VoucherDetailID = 0;
                                        bovoucher.PacsId = userCredentials.PacsId;
                                        bovoucher.BranchId = userCredentials.BranchId;
                                        bovoucher.IDGeneratorForPacs = userCredentials.PacsId;
                                        bovoucher.SerialNumberOfPacs = userCredentials.PACSSerialNumber;
                                        // objVoucherDetailsTemp.TransactionID = 40011;
                                        TransactionBL objTransactionBL = new TransactionBL(session);
                                        #region start log
                                        if (log.IsErrorEnabled == true)
                                        {
                                            if (userCredentials.IsDebugEnabled == true)
                                            {
                                                log.Error("Enter  FillNewVoucher in objTransactionBL.GetTransactionID ");
                                            }
                                        }
                                        else
                                        {
                                            if (userCredentials.IsDebugEnabled == true)
                                            {
                                                log.Debug("Enter FillNewVoucher in objTransactionBL.GetTransactionID");
                                            }
                                        }
                                        #endregion
                                        bovoucher.TransactionID = objTransactionBL.GetTransactionID(objTransactionDTO.ActivityType);
                                        #region start log
                                        if (log.IsErrorEnabled == true)
                                        {
                                            if (userCredentials.IsDebugEnabled == true)
                                            {
                                                log.Error("Leave  FillNewVoucher in objTransactionBL.GetTransactionID:" + bovoucher.TransactionID);
                                            }
                                        }
                                        else
                                        {
                                            if (userCredentials.IsDebugEnabled == true)
                                            {
                                                log.Debug("Leave FillNewVoucher in objTransactionBL.GetTransactionID:" + bovoucher.TransactionID);
                                            }
                                        }
                                        #endregion
                                        voucherdetailslist.Add(bovoucher);
                                        if (Receivableinterest != 0 && recievableslist.Count > 0)
                                        {
                                            bovoucher = new VoucherDetailsTemp();
                                            #region start log
                                            if (log.IsErrorEnabled == true)
                                            {
                                                if (userCredentials.IsDebugEnabled == true)
                                                {
                                                    log.Error("Enter  FillNewVoucher in GetProductDetailsByslno ");
                                                }
                                            }
                                            else
                                            {
                                                if (userCredentials.IsDebugEnabled == true)
                                                {
                                                    log.Debug("Enter FillNewVoucher in GetProductDetailsByslno");
                                                }
                                            }
                                            #endregion
                                            bovoucher.ProductId = GetProductDetailsByslno(activityType.Product.Slno);
                                            #region start log
                                            if (log.IsErrorEnabled == true)
                                            {
                                                if (userCredentials.IsDebugEnabled == true)
                                                {
                                                    log.Error("Enter  FillNewVoucher in GetProductDetailsByslno ");
                                                }
                                            }
                                            else
                                            {
                                                if (userCredentials.IsDebugEnabled == true)
                                                {
                                                    log.Debug("Enter FillNewVoucher in GetProductDetailsByslno");
                                                }
                                            }
                                            #endregion

                                            #region start log
                                            if (log.IsErrorEnabled == true)
                                            {
                                                if (userCredentials.IsDebugEnabled == true)
                                                {
                                                    log.Error("Enter  FillNewVoucher in fascommonbl.GetLedgerByProductSlNoAndTransrollID ");
                                                }
                                            }
                                            else
                                            {
                                                if (userCredentials.IsDebugEnabled == true)
                                                {
                                                    log.Debug("Enter FillNewVoucher in fascommonbl.GetLedgerByProductSlNoAndTransrollID");
                                                }
                                            }
                                            #endregion
                                            objLedger = fascommonbl.GetLedgerByProductSlNoAndTransrollID(bovoucher.ProductId.Slno, 130, 3, userCredentials.PacsId, userCredentials.BranchId);
                                            #region start log
                                            if (log.IsErrorEnabled == true)
                                            {
                                                if (userCredentials.IsDebugEnabled == true)
                                                {
                                                    log.Error("Leave  FillNewVoucher in fascommonbl.GetLedgerByProductSlNoAndTransrollID ");
                                                }
                                            }
                                            else
                                            {
                                                if (userCredentials.IsDebugEnabled == true)
                                                {
                                                    log.Debug("Leave FillNewVoucher in fascommonbl.GetLedgerByProductSlNoAndTransrollID");
                                                }
                                            }
                                            #endregion
                                            bovoucher.ProductTypeID = bovoucher.ProductId.ProductTypeID;// session.Load<ProductTypeMaster>();

                                            bovoucher.Debit = 0;
                                            bovoucher.Credit = Receivableinterest;
                                            bovoucher.TransactionDate = Convert.ToDateTime(objTransactionDTO.TransactionDate).Date;
                                            #region start log
                                            if (log.IsErrorEnabled == true)
                                            {
                                                if (userCredentials.IsDebugEnabled == true)
                                                {
                                                    log.Error("Enter  FillNewVoucher in GetAccountDetails");
                                                }
                                            }
                                            else
                                            {
                                                if (userCredentials.IsDebugEnabled == true)
                                                {
                                                    log.Debug("Enter FillNewVoucher in GetAccountDetails");
                                                }
                                            }
                                            #endregion
                                            objAccountDetails = GetAccountDetails(activityType.Product.Slno, objTransactionDTO.AccountNo, userCredentials.PacsId, userCredentials.BranchId, admissionnopkey);
                                            #region start log
                                            if (log.IsErrorEnabled == true)
                                            {
                                                if (userCredentials.IsDebugEnabled == true)
                                                {
                                                    log.Error("Leave  FillNewVoucher in GetAccountDetails ");
                                                }
                                            }
                                            else
                                            {
                                                if (userCredentials.IsDebugEnabled == true)
                                                {
                                                    log.Debug("Leave FillNewVoucher in GetAccountDetails");
                                                }
                                            }
                                            #endregion
                                            bovoucher.AccountCode = null;

                                            if (finyear != null)
                                            {
                                                bovoucher.YearCode = finyear;
                                            }
                                            else
                                            {
                                                bovoucher.YearCode = GetFinancialYearCode(objTransactionDTO.TransactionDate);
                                            }

                                            bovoucher.LedgerCode = objLedger;
                                            if (bovoucher.LedgerCode.AccountType.AccountTypeID == 1)
                                            {
                                                #region start log
                                                if (log.IsErrorEnabled == true)
                                                {
                                                    if (userCredentials.IsDebugEnabled == true)
                                                    {
                                                        log.Error("Enter  FillNewVoucher in fascommonbl.GetCashBalance ");
                                                    }
                                                }
                                                else
                                                {
                                                    if (userCredentials.IsDebugEnabled == true)
                                                    {
                                                        log.Debug("Enter FillNewVoucher in fascommonbl.GetCashBalance");
                                                    }
                                                }
                                                #endregion
                                                bovoucher.OpeningAmount = fascommonbl.GetCashBalance(userCredentials.PacsId, userCredentials.BranchId, Convert.ToDateTime(bovoucher.TransactionDate.AddDays(1)), bovoucher.YearCode.YearCode, CashBookId, 0);
                                                #region start log
                                                if (log.IsErrorEnabled == true)
                                                {
                                                    if (userCredentials.IsDebugEnabled == true)
                                                    {
                                                        log.Error("Leave  FillNewVoucher in fascommonbl.GetCashBalance :" + bovoucher.OpeningAmount);
                                                    }
                                                }
                                                else
                                                {
                                                    if (userCredentials.IsDebugEnabled == true)
                                                    {
                                                        log.Debug("Leave FillNewVoucher in fascommonbl.GetCashBalance:" + bovoucher.OpeningAmount);
                                                    }
                                                }
                                                #endregion
                                            }
                                            else if (bovoucher.AccountCode != null)
                                            {
                                                #region start log
                                                if (log.IsErrorEnabled == true)
                                                {
                                                    if (userCredentials.IsDebugEnabled == true)
                                                    {
                                                        log.Error("Enter  FillNewVoucher in fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID ");
                                                    }
                                                }
                                                else
                                                {
                                                    if (userCredentials.IsDebugEnabled == true)
                                                    {
                                                        log.Debug("Enter FillNewVoucher in fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID");
                                                    }
                                                }
                                                #endregion
                                                long accountid = bovoucher.AccountCode.AccountID;
                                                bovoucher.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(bovoucher.LedgerCode.LedgerId, userCredentials.PacsId, userCredentials.BranchId, bovoucher.YearCode.YearCode, Convert.ToDateTime(bovoucher.TransactionDate.AddDays(1)), bovoucher.LedgerCode.LedgerType.LedgerTypeId, accountid);
                                                #region start log
                                                if (log.IsErrorEnabled == true)
                                                {
                                                    if (userCredentials.IsDebugEnabled == true)
                                                    {
                                                        log.Error("Leave  FillNewVoucher in fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID :" + bovoucher.OpeningAmount);
                                                    }
                                                }
                                                else
                                                {
                                                    if (userCredentials.IsDebugEnabled == true)
                                                    {
                                                        log.Debug("Leave FillNewVoucher in fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID:" + bovoucher.OpeningAmount);
                                                    }
                                                }
                                                #endregion
                                                //bovoucher.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(bovoucher.LedgerCode, userCredentials.PacsId, userCredentials.BranchId, bovoucher.YearCode, Convert.ToDateTime(bovoucher.TransactionDate.AddDays(1)), accountid);
                                            }
                                            else
                                            {
                                                #region start log
                                                if (log.IsErrorEnabled == true)
                                                {
                                                    if (userCredentials.IsDebugEnabled == true)
                                                    {
                                                        log.Error("Enter  FillNewVoucher in fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID ");
                                                    }
                                                }
                                                else
                                                {
                                                    if (userCredentials.IsDebugEnabled == true)
                                                    {
                                                        log.Debug("Enter FillNewVoucher in fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID");
                                                    }
                                                }
                                                #endregion
                                                bovoucher.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(bovoucher.LedgerCode.LedgerId, userCredentials.PacsId, userCredentials.BranchId, bovoucher.YearCode.YearCode, Convert.ToDateTime(bovoucher.TransactionDate.AddDays(1)), bovoucher.LedgerCode.LedgerType.LedgerTypeId);
                                                #region start log
                                                if (log.IsErrorEnabled == true)
                                                {
                                                    if (userCredentials.IsDebugEnabled == true)
                                                    {
                                                        log.Error("Leave  FillNewVoucher in fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID :" + bovoucher.OpeningAmount);
                                                    }
                                                }
                                                else
                                                {
                                                    if (userCredentials.IsDebugEnabled == true)
                                                    {
                                                        log.Debug("Leave FillNewVoucher in fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID:" + bovoucher.OpeningAmount);
                                                    }
                                                }
                                                #endregion
                                                //bovoucher.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(bovoucher.LedgerCode, userCredentials.PacsId, userCredentials.BranchId, bovoucher.YearCode, Convert.ToDateTime(bovoucher.TransactionDate.AddDays(1)));
                                            }
                                            bovoucher.AccountCode = objAccountDetails;


                                            if (bovoucher.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.liabilities) || bovoucher.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.income))
                                            {
                                                bovoucher.BalanceAmount = bovoucher.OpeningAmount - bovoucher.Credit + bovoucher.Debit;
                                            }
                                            else if (bovoucher.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.asset) || bovoucher.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.Expenditure))
                                            {
                                                bovoucher.BalanceAmount = bovoucher.OpeningAmount - bovoucher.Credit + bovoucher.Debit;
                                            }
                                            bovoucher.CashBookId = CashBookId;
                                            bovoucher.Narration = objAccountDetails.AccountCode + " " + "Interest Receivable Amount collected:" + Receivableinterest; //"share deposit"; //GetNarrationTemplateDetails(104).DebitCashNarration;
                                            bovoucher.TransrollID = 2;
                                            bovoucher.TransactionDate = Convert.ToDateTime(objTransactionDTO.TransactionDate).Date;
                                            bovoucher.ValueDate = Convert.ToDateTime(objTransactionDTO.ValueDate.ToShortDateString() + " " + DateTime.Now.TimeOfDay);
                                            bovoucher.VoucherDetailID = 0;
                                            bovoucher.PacsId = userCredentials.PacsId;
                                            bovoucher.BranchId = userCredentials.BranchId;
                                            bovoucher.IDGeneratorForPacs = userCredentials.PacsId;
                                            bovoucher.SerialNumberOfPacs = userCredentials.PACSSerialNumber;
                                            #region start log
                                            if (log.IsErrorEnabled == true)
                                            {
                                                if (userCredentials.IsDebugEnabled == true)
                                                {
                                                    log.Error("Enter  FillNewVoucher in objTransactionBL.GetTransactionID ");
                                                }
                                            }
                                            else
                                            {
                                                if (userCredentials.IsDebugEnabled == true)
                                                {
                                                    log.Debug("Enter FillNewVoucher in objTransactionBL.GetTransactionID");
                                                }
                                            }
                                            #endregion
                                            bovoucher.TransactionID = objTransactionBL.GetTransactionID(objTransactionDTO.ActivityType);
                                            #region start log
                                            if (log.IsErrorEnabled == true)
                                            {
                                                if (userCredentials.IsDebugEnabled == true)
                                                {
                                                    log.Error("Leave  FillNewVoucher in objTransactionBL.GetTransactionID " + bovoucher.TransactionID);
                                                }
                                            }
                                            else
                                            {
                                                if (userCredentials.IsDebugEnabled == true)
                                                {
                                                    log.Debug("Leave FillNewVoucher in objTransactionBL.GetTransactionID " + bovoucher.TransactionID);
                                                }
                                            }
                                            #endregion
                                            voucherdetailslist.Add(bovoucher);
                                        }
                                    }

                                    if (BelowreceivableAmt == true)
                                    {
                                        if (listTransaction.Where(i => i.TransrollID == 1).Count() > 0)
                                        {
                                            if (listTransaction.Where(i => i.TransrollID == 1).LastOrDefault().Amount != 0)
                                            {
                                                if (listTransaction.Where(i => i.TransrollID == 1).LastOrDefault().TransrollID == 1)
                                                {
                                                    #region start log
                                                    if (log.IsErrorEnabled == true)
                                                    {
                                                        if (userCredentials.IsDebugEnabled == true)
                                                        {
                                                            log.Error("Enter  FillNewVoucher in FillVoucherDetailTemp ");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (userCredentials.IsDebugEnabled == true)
                                                        {
                                                            log.Debug("Enter FillNewVoucher in FillVoucherDetailTemp");
                                                        }
                                                    }
                                                    #endregion
                                                    VoucherDetailsTemp listVoucherTemp = FillVoucherDetailTemp(objTransactionDTO, userCredentials, bovoucher.YearCode, activityType, listTransaction.Where(i => i.TransrollID == 1).LastOrDefault().Amount - ReamingAdjustprincipalbasedrecivableamt, listTransaction.Where(i => i.TransrollID == 1).LastOrDefault().Ledger, listTransaction.Where(i => i.TransrollID == 1).LastOrDefault().TransrollID, CashBookId, false, admissionnopkey);
                                                    #region start log
                                                    if (log.IsErrorEnabled == true)
                                                    {
                                                        if (userCredentials.IsDebugEnabled == true)
                                                        {
                                                            log.Error("Leave  FillNewVoucher in FillVoucherDetailTemp ");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (userCredentials.IsDebugEnabled == true)
                                                        {
                                                            log.Debug("Leave FillNewVoucher in FillVoucherDetailTemp");
                                                        }
                                                    }
                                                    #endregion
                                                    voucherdetailslist.Add(listVoucherTemp);

                                                }
                                            }
                                        }
                                        BelowreceivableAmt = false;
                                    }
                                    else
                                    {
                                        if (listTransaction.Where(i => i.TransrollID == 1).Count() > 0)
                                        {
                                            if (listTransaction.Where(i => i.TransrollID == 1).LastOrDefault().Amount != 0)
                                            {
                                                if (listTransaction.Where(i => i.TransrollID == 1).LastOrDefault().TransrollID == 1)
                                                {
                                                    #region start log
                                                    if (log.IsErrorEnabled == true)
                                                    {
                                                        if (userCredentials.IsDebugEnabled == true)
                                                        {
                                                            log.Error("Enter  FillNewVoucher in FillVoucherDetailTemp ");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (userCredentials.IsDebugEnabled == true)
                                                        {
                                                            log.Debug("Enter FillNewVoucher in FillVoucherDetailTemp");
                                                        }
                                                    }
                                                    #endregion
                                                    VoucherDetailsTemp listVoucherTemp = FillVoucherDetailTemp(objTransactionDTO, userCredentials, bovoucher.YearCode, activityType, listTransaction.Where(i => i.TransrollID == 1).LastOrDefault().Amount, listTransaction.Where(i => i.TransrollID == 1).LastOrDefault().Ledger, listTransaction.Where(i => i.TransrollID == 1).LastOrDefault().TransrollID, CashBookId, false, admissionnopkey);
                                                    #region start log
                                                    if (log.IsErrorEnabled == true)
                                                    {
                                                        if (userCredentials.IsDebugEnabled == true)
                                                        {
                                                            log.Error("Leave  FillNewVoucher in FillVoucherDetailTemp ");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (userCredentials.IsDebugEnabled == true)
                                                        {
                                                            log.Debug("Leave FillNewVoucher in FillVoucherDetailTemp");
                                                        }
                                                    }
                                                    #endregion
                                                    voucherdetailslist.Add(listVoucherTemp);

                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    #region Normal
                                    #region start log
                                    if (log.IsErrorEnabled == true)
                                    {
                                        if (userCredentials.IsDebugEnabled == true)
                                        {
                                            log.Error("Enter  FillNewVoucher in FillVoucherDetailsTempData ");
                                        }
                                    }
                                    else
                                    {
                                        if (userCredentials.IsDebugEnabled == true)
                                        {
                                            log.Debug("Enter FillNewVoucher in FillVoucherDetailsTempData");
                                        }
                                    }
                                    #endregion
                                    voucherdetailslist = FillVoucherDetailsTempData(voucherdetailslist, false, objTransactionDTO, userCredentials, CashBookId, activityType, admissionnopkey, finyear, isParellRun);
                                    #region start log
                                    if (log.IsErrorEnabled == true)
                                    {
                                        if (userCredentials.IsDebugEnabled == true)
                                        {
                                            log.Error("Leave  FillNewVoucher in FillVoucherDetailsTempData ");
                                        }
                                    }
                                    else
                                    {
                                        if (userCredentials.IsDebugEnabled == true)
                                        {
                                            log.Debug("Leave FillNewVoucher in FillVoucherDetailsTempData");
                                        }
                                    }
                                    #endregion
                                    #endregion
                                }
                                #endregion
                            }
                            else
                            {
                                #region Normal
                                #region start log
                                if (log.IsErrorEnabled == true)
                                {
                                    if (userCredentials.IsDebugEnabled == true)
                                    {
                                        log.Error("Enter  FillNewVoucher in FillVoucherDetailsTempData ");
                                    }
                                }
                                else
                                {
                                    if (userCredentials.IsDebugEnabled == true)
                                    {
                                        log.Debug("Enter FillNewVoucher in FillVoucherDetailsTempData");
                                    }
                                }
                                #endregion
                                voucherdetailslist = FillVoucherDetailsTempData(voucherdetailslist, false, objTransactionDTO, userCredentials, CashBookId, activityType, admissionnopkey, finyear, isParellRun);
                                #region start log
                                if (log.IsErrorEnabled == true)
                                {
                                    if (userCredentials.IsDebugEnabled == true)
                                    {
                                        log.Error("Leave  FillNewVoucher in FillVoucherDetailsTempData ");
                                    }
                                }
                                else
                                {
                                    if (userCredentials.IsDebugEnabled == true)
                                    {
                                        log.Debug("Leave FillNewVoucher in FillVoucherDetailsTempData");
                                    }
                                }
                                #endregion
                                #endregion
                            }
                        }

                    }
                    else
                    {
                        #region start log
                        if (log.IsErrorEnabled == true)
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Error("Enter  FillNewVoucher in FillVoucherDetailsTempData ");
                            }
                        }
                        else
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Enter FillNewVoucher in FillVoucherDetailsTempData");
                            }
                        }
                        #endregion
                        voucherdetailslist = FillVoucherDetailsTempData(voucherdetailslist, false, objTransactionDTO, userCredentials, CashBookId, activityType, admissionnopkey, finyear, isParellRun);
                        #region start log
                        if (log.IsErrorEnabled == true)
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Error("Leave  FillNewVoucher in FillVoucherDetailsTempData ");
                            }
                        }
                        else
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Leave FillNewVoucher in FillVoucherDetailsTempData");
                            }
                        }
                        #endregion
                    }
                    #endregion
                }
                else
                {
                    #region start log
                    if (log.IsErrorEnabled == true)
                    {
                        if (userCredentials.IsDebugEnabled == true)
                        {
                            log.Error("Enter  FillNewVoucher in FillVoucherDetailsTempData ");
                        }
                    }
                    else
                    {
                        if (userCredentials.IsDebugEnabled == true)
                        {
                            log.Debug("Enter FillNewVoucher in FillVoucherDetailsTempData");
                        }
                    }
                    #endregion
                    voucherdetailslist = FillVoucherDetailsTempData(voucherdetailslist, false, objTransactionDTO, userCredentials, CashBookId, activityType, admissionnopkey, finyear, isParellRun);
                    #region start log
                    if (log.IsErrorEnabled == true)
                    {
                        if (userCredentials.IsDebugEnabled == true)
                        {
                            log.Error("Leave  FillNewVoucher in FillVoucherDetailsTempData ");
                        }
                    }
                    else
                    {
                        if (userCredentials.IsDebugEnabled == true)
                        {
                            log.Debug("Leave FillNewVoucher in FillVoucherDetailsTempData");
                        }
                    }
                    #endregion

                }
                if (objTransactionDTO.VoucherType == 1)
                {
                    objTransactionDTO.BatchID = 0;
                    #region start log
                    if (log.IsErrorEnabled == true)
                    {
                        if (userCredentials.IsDebugEnabled == true)
                        {
                            log.Error("Enter  FillNewVoucher in FillVoucherDetailsTempData ");
                        }
                    }
                    else
                    {
                        if (userCredentials.IsDebugEnabled == true)
                        {
                            log.Debug("Enter FillNewVoucher in FillVoucherDetailsTempData");
                        }
                    }
                    #endregion
                    voucherdetailslist = FillVoucherDetailsTempData(voucherdetailslist, true, objTransactionDTO, userCredentials, CashBookId, activityType, admissionnopkey, finyear, isParellRun);
                    #region start log
                    if (log.IsErrorEnabled == true)
                    {
                        if (userCredentials.IsDebugEnabled == true)
                        {
                            log.Error("Leave  FillNewVoucher in FillVoucherDetailsTempData ");
                        }
                    }
                    else
                    {
                        if (userCredentials.IsDebugEnabled == true)
                        {
                            log.Debug("Leave FillNewVoucher in FillVoucherDetailsTempData");
                        }
                    }
                    #endregion
                    objVoucherMain.VoucherDetailsTemp = voucherdetailslist;
                }
                else if (objTransactionDTO.VoucherType == 2)
                {
                    //voucherdetailslist = FillVoucherDetailsTempData(voucherdetailslist,true, objTransactionDTO, userCredentials);

                    objVoucherMain.VoucherDetailsTemp = voucherdetailslist;

                    if (objVoucherMain.BatchId > 0)
                    {

                        //SWActivityTypeMaster activityType = session.Load<SWActivityTypeMaster>(objTransactionDTO.ActivityType);

                        Transfers objTransfers = new Transfers();
                        #region start log
                        if (log.IsErrorEnabled == true)
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Error("Enter  FillNewVoucher in GetBatchByBatchId ");
                            }
                        }
                        else
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Enter FillNewVoucher in GetBatchByBatchId");
                            }
                        }
                        #endregion
                        objTransfers = GetBatchByBatchId(Convert.ToInt64(objTransactionDTO.BatchID), userCredentials.PacsId, userCredentials.BranchId);
                        #region start log
                        if (log.IsErrorEnabled == true)
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Error("Leave  FillNewVoucher in GetBatchByBatchId ");
                            }
                        }
                        else
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Leave FillNewVoucher in GetBatchByBatchId");
                            }
                        }
                        #endregion
                        if (objTransfers == null)
                        {
                            transferslist = new List<Transfers>();
                            #region start log
                            if (log.IsErrorEnabled == true)
                            {
                                if (userCredentials.IsDebugEnabled == true)
                                {
                                    log.Error("Enter  FillNewVoucher in FillBatchDetails ");
                                }
                            }
                            else
                            {
                                if (userCredentials.IsDebugEnabled == true)
                                {
                                    log.Debug("Enter FillNewVoucher in FillBatchDetails");
                                }
                            }
                            #endregion
                            objTransfers = FillBatchDetails(userCredentials, objTransactionDTO, objVoucherMain.VoucherDetailsTemp);
                            #region start log
                            if (log.IsErrorEnabled == true)
                            {
                                if (userCredentials.IsDebugEnabled == true)
                                {
                                    log.Error("Leave  FillNewVoucher in FillBatchDetails ");
                                }
                            }
                            else
                            {
                                if (userCredentials.IsDebugEnabled == true)
                                {
                                    log.Debug("Leave FillNewVoucher in FillBatchDetails");
                                }
                            }
                            #endregion
                            transferslist.Add(objTransfers);
                        }
                        else
                        {
                            objTransfers = new Transfers();
                            if (objTransactionDTO.BatchID > 0)
                            {
                                transferslist = new List<Transfers>();
                                objTransfers = new Transfers();
                                #region start log
                                if (log.IsErrorEnabled == true)
                                {
                                    if (userCredentials.IsDebugEnabled == true)
                                    {
                                        log.Error("Enter  FillNewVoucher in FillBatchDetails ");
                                    }
                                }
                                else
                                {
                                    if (userCredentials.IsDebugEnabled == true)
                                    {
                                        log.Debug("Enter FillNewVoucher in FillBatchDetails");
                                    }
                                }
                                #endregion
                                objTransfers = GetBatchByBatchId(Convert.ToInt64(objTransactionDTO.BatchID), userCredentials.PacsId, userCredentials.BranchId);
                                #region start log
                                if (log.IsErrorEnabled == true)
                                {
                                    if (userCredentials.IsDebugEnabled == true)
                                    {
                                        log.Error("Leave  FillNewVoucher in FillBatchDetails ");
                                    }
                                }
                                else
                                {
                                    if (userCredentials.IsDebugEnabled == true)
                                    {
                                        log.Debug("Leave FillNewVoucher in FillBatchDetails");
                                    }
                                }
                                #endregion
                            }
                            objTransfers.Deposit = voucherdetailslist.Sum(i => i.Credit);
                            objTransfers.Withdrawl = voucherdetailslist.Sum(i => i.Debit);
                            transferslist.Add(objTransfers);
                        }
                    }
                    else
                    {
                        var pacswiserecievableslist = session.QueryOver<PacsWiseConfigurationTransaction>().Where(i => i.ApplidPacs == true && i.PacsId == userCredentials.PacsId && i.Branchid == userCredentials.BranchId && i.ProductID.Slno == activityType.Product.Slno).List();
                        if (pacswiserecievableslist != null && pacswiserecievableslist.Count > 0)
                        {
                            if (pacswiserecievableslist.FirstOrDefault().ScreenName != "Interest on Disbusement")
                            {
                                //Receivables Exists
                                var recievableslist = session.QueryOver<Receivables>().Where(i => i.Admissionno == admissionnopkey && i.Loanno == objTransactionDTO.AccountCode && i.Productid == activityType.Product.Slno).OrderBy(i => i.Date).Asc.List();
                                decimal Contravalueforrecevable = 0;

                                TransactionBL objTransactionBL = new TransactionBL(session);
                                decimal Receivableinterest = recievableslist.Sum(i => i.Interest) + recievableslist.Sum(i => i.PenalInterest) + recievableslist.Sum(i => i.Iod);
                                decimal principalpaymentamount = voucherdetailslist.Where(i => i.Debit > 0 && i.TransrollID == 1).ToList().Sum(i => i.Debit);
                                if (principalpaymentamount > 0)
                                {
                                    if ((objTransactionDTO.TotalAmount.Value - principalpaymentamount) > Receivableinterest)
                                    {
                                        Contravalueforrecevable = (objTransactionDTO.TotalAmount.Value - principalpaymentamount) - Receivableinterest;
                                    }
                                    else
                                    {
                                        Receivableinterest = (objTransactionDTO.TotalAmount.Value - principalpaymentamount);
                                    }

                                    var principalvoucher = GetDebitVoucherForSubventionPrncipalRecieved(objTransactionDTO, activityType, userCredentials, principalpaymentamount, fascommonbl, CashBookId, admissionnopkey, objTransactionBL, finyear);

                                    if (principalpaymentamount != null)
                                    {
                                        //voucherdetailslist.Add(principalvoucher);
                                    }
                                }
                                else
                                {
                                    if (objTransactionDTO.TotalAmount > Receivableinterest)
                                    {
                                        Contravalueforrecevable = Convert.ToDecimal(objTransactionDTO.TotalAmount) - Receivableinterest;
                                    }
                                    else
                                    {
                                        Receivableinterest = objTransactionDTO.TotalAmount.Value;
                                    }
                                }

                                #region start log
                                if (log.IsErrorEnabled == true)
                                {
                                    if (userCredentials.IsDebugEnabled == true)
                                    {
                                        log.Error("Enter  FillNewVoucher in GetDebitVoucherForSubventionInterestRecieved ");
                                    }
                                }
                                else
                                {
                                    if (userCredentials.IsDebugEnabled == true)
                                    {
                                        log.Debug("Enter FillNewVoucher in GetDebitVoucherForSubventionInterestRecieved");
                                    }
                                }
                                #endregion
                                var interestvoucher = GetDebitVoucherForSubventionInterestRecieved(objTransactionDTO, activityType, userCredentials, Contravalueforrecevable, fascommonbl, CashBookId, admissionnopkey, objTransactionBL, finyear);
                                #region start log
                                if (log.IsErrorEnabled == true)
                                {
                                    if (userCredentials.IsDebugEnabled == true)
                                    {
                                        log.Error("Leave  FillNewVoucher in GetDebitVoucherForSubventionInterestRecieved ");
                                    }
                                }
                                else
                                {
                                    if (userCredentials.IsDebugEnabled == true)
                                    {
                                        log.Debug("Leave FillNewVoucher in GetDebitVoucherForSubventionInterestRecieved");
                                    }
                                }
                                #endregion
                                if (interestvoucher != null)
                                {
                                    voucherdetailslist.Add(interestvoucher);
                                }

                                #region start log
                                if (log.IsErrorEnabled == true)
                                {
                                    if (userCredentials.IsDebugEnabled == true)
                                    {
                                        log.Error("Enter  FillNewVoucher in GetDebitVoucherForSubventionWithRecievables ");
                                    }
                                }
                                else
                                {
                                    if (userCredentials.IsDebugEnabled == true)
                                    {
                                        log.Debug("Enter FillNewVoucher in GetDebitVoucherForSubventionWithRecievables");
                                    }
                                }
                                #endregion
                                var recievablevoucher = GetDebitVoucherForSubventionWithRecievables(objTransactionDTO, activityType, userCredentials, Receivableinterest, fascommonbl, CashBookId, admissionnopkey, objTransactionBL, finyear);
                                #region start log
                                if (log.IsErrorEnabled == true)
                                {
                                    if (userCredentials.IsDebugEnabled == true)
                                    {
                                        log.Error("Leave  FillNewVoucher in GetDebitVoucherForSubventionWithRecievables ");
                                    }
                                }
                                else
                                {
                                    if (userCredentials.IsDebugEnabled == true)
                                    {
                                        log.Debug("Leave FillNewVoucher in GetDebitVoucherForSubventionWithRecievables");
                                    }
                                }
                                #endregion
                                if (recievablevoucher != null)
                                {
                                    voucherdetailslist.Add(recievablevoucher);
                                }
                            }
                            else
                            {
                                //Interest As disbursement Exists
                                #region start log
                                if (log.IsErrorEnabled == true)
                                {
                                    if (userCredentials.IsDebugEnabled == true)
                                    {
                                        log.Error("Enter  FillNewVoucher in GetAccountVoucherForSubvention ");
                                    }
                                }
                                else
                                {
                                    if (userCredentials.IsDebugEnabled == true)
                                    {
                                        log.Debug("Enter FillNewVoucher in GetAccountVoucherForSubvention");
                                    }
                                }
                                #endregion
                                var vdetails = GetAccountVoucherForSubvention(objTransactionDTO, userCredentials, CashBookId, activityType, admissionnopkey, finyear);
                                #region start log
                                if (log.IsErrorEnabled == true)
                                {
                                    if (userCredentials.IsDebugEnabled == true)
                                    {
                                        log.Error("Leave  FillNewVoucher in GetAccountVoucherForSubvention ");
                                    }
                                }
                                else
                                {
                                    if (userCredentials.IsDebugEnabled == true)
                                    {
                                        log.Debug("Leave FillNewVoucher in GetAccountVoucherForSubvention");
                                    }
                                }
                                #endregion
                                voucherdetailslist.Add(vdetails);
                            }
                        }
                        else
                        {
                            #region start log
                            if (log.IsErrorEnabled == true)
                            {
                                if (userCredentials.IsDebugEnabled == true)
                                {
                                    log.Error("Enter  FillNewVoucher in GetAccountVoucherForSubvention ");
                                }
                            }
                            else
                            {
                                if (userCredentials.IsDebugEnabled == true)
                                {
                                    log.Debug("Enter FillNewVoucher in GetAccountVoucherForSubvention");
                                }
                            }
                            #endregion
                            var vdetails = GetAccountVoucherForSubvention(objTransactionDTO, userCredentials, CashBookId, activityType, admissionnopkey, finyear);
                            #region start log
                            if (log.IsErrorEnabled == true)
                            {
                                if (userCredentials.IsDebugEnabled == true)
                                {
                                    log.Error("Leave  FillNewVoucher in GetAccountVoucherForSubvention ");
                                }
                            }
                            else
                            {
                                if (userCredentials.IsDebugEnabled == true)
                                {
                                    log.Debug("Leave FillNewVoucher in GetAccountVoucherForSubvention");
                                }
                            }
                            #endregion
                            voucherdetailslist.Add(vdetails);
                        }
                    }
                }
                else if (objTransactionDTO.VoucherType == 3)
                {
                    //var activity = session.Load<SWActivityTypeMaster>(objTransactionDTO.ActivityType);
                    if (activityType != null && activityType.Activities.ActivityId == 8)
                    {
                        objVoucherMain.VoucherDetailsTemp = voucherdetailslist;
                        #region start log
                        if (log.IsErrorEnabled == true)
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Error("Enter  FillNewVoucher in GetPreparedVoucherDetailsTempObjectForInterestRebateCollections ");
                            }
                        }
                        else
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Enter FillNewVoucher in GetPreparedVoucherDetailsTempObjectForInterestRebateCollections");
                            }
                        }
                        #endregion
                        VoucherDetailsTemp vtemp = GetPreparedVoucherDetailsTempObjectForInterestRebateCollections(objTransactionDTO, userCredentials, objVoucherMain.YearCode, activityType, voucherdetailslist.Sum(i => i.Credit), 0, 2, CashBookId);
                        #region start log
                        if (log.IsErrorEnabled == true)
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Error("Leave  FillNewVoucher in GetPreparedVoucherDetailsTempObjectForInterestRebateCollections ");
                            }
                        }
                        else
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Leave FillNewVoucher in GetPreparedVoucherDetailsTempObjectForInterestRebateCollections");
                            }
                        }
                        #endregion
                        if (vtemp != null)
                        {
                            objVoucherMain.VoucherDetailsTemp.Add(vtemp);
                        }
                    }
                    else
                    {
                        #region start log
                        if (log.IsErrorEnabled == true)
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Error("Enter  FillNewVoucher in FillVoucherDetailsTempDatafordefaultTransfer ");
                            }
                        }
                        else
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Enter FillNewVoucher in FillVoucherDetailsTempDatafordefaultTransfer");
                            }
                        }
                        #endregion
                        VoucherDetailsTemp objContraTemp = FillVoucherDetailsTempDatafordefaultTransfer(objTransactionDTO, userCredentials, objVoucherMain.YearCode, CashBookId);
                        #region start log
                        if (log.IsErrorEnabled == true)
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Error("Leave  FillNewVoucher in FillVoucherDetailsTempDatafordefaultTransfer ");
                            }
                        }
                        else
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Leave FillNewVoucher in FillVoucherDetailsTempDatafordefaultTransfer");
                            }
                        }
                        #endregion
                        voucherdetailslist.Add(objContraTemp);
                        objVoucherMain.VoucherDetailsTemp = voucherdetailslist;
                    }
                }
                objVoucherMain.Amount = listTransaction.Sum(i => i.Amount);
                #region start log
                if (log.IsErrorEnabled == true)
                {
                    if (userCredentials.IsDebugEnabled == true)
                    {
                        log.Error("Leave  FillNewVoucher  ");
                    }
                }
                else
                {
                    if (userCredentials.IsDebugEnabled == true)
                    {
                        log.Debug("Leave FillNewVoucher ");
                    }
                }
                #endregion
                return objVoucherMain;
            }
            catch (Exception ex)
            {
                //////TransactionErrorLogBL.TrackErrorLog(ex.Message, GlobalUserCredentials);
                log.Error(ex);
                return null;
            }
        }

        public VoucherDetailsTemp GetDebitVoucherForSubventionWithRecievables(TransactionDTO objTransactionDTO, ProductWiseActivities activityType, UserCredentials userCredentials, decimal Receivableinterest, FAS.BL.CommonFasBL fascommonbl, long CashBookId, long admissionnopkey, TransactionBL transactionbl, FinancialYearMaster finyear, bool isParellelRun = false)
        {
            try
            {
                var bovoucher = new VoucherDetailsTemp();
                #region start log
                if (log.IsErrorEnabled == true)
                {
                    if (userCredentials.IsDebugEnabled == true)
                    {
                        log.Error("Enter  GetDebitVoucherForSubventionWithRecievables in GetProductDetailsByslno ");
                    }
                }
                else
                {
                    if (userCredentials.IsDebugEnabled == true)
                    {
                        log.Debug("Enter GetDebitVoucherForSubventionWithRecievables in GetProductDetailsByslno ");
                    }
                }
                #endregion
                bovoucher.ProductId = GetProductDetailsByslno(activityType.Product.Slno);
                #region start log
                if (log.IsErrorEnabled == true)
                {
                    if (userCredentials.IsDebugEnabled == true)
                    {
                        log.Error("Leave  GetDebitVoucherForSubventionWithRecievables in GetProductDetailsByslno ");
                    }
                }
                else
                {
                    if (userCredentials.IsDebugEnabled == true)
                    {
                        log.Debug("Leave GetDebitVoucherForSubventionWithRecievables in GetProductDetailsByslno ");
                    }
                }
                #endregion

                #region start log
                if (log.IsErrorEnabled == true)
                {
                    if (userCredentials.IsDebugEnabled == true)
                    {
                        log.Error("Enter  GetDebitVoucherForSubventionWithRecievables in fascommonbl.GetLedgerByProductSlNoAndTransrollID ");
                    }
                }
                else
                {
                    if (userCredentials.IsDebugEnabled == true)
                    {
                        log.Debug("Enter GetDebitVoucherForSubventionWithRecievables in fascommonbl.GetLedgerByProductSlNoAndTransrollID ");
                    }
                }
                #endregion
                var objLedger = fascommonbl.GetLedgerByProductSlNoAndTransrollID(bovoucher.ProductId.Slno, 130, 3, userCredentials.PacsId, userCredentials.BranchId);
                #region start log
                if (log.IsErrorEnabled == true)
                {
                    if (userCredentials.IsDebugEnabled == true)
                    {
                        log.Error("Leave  GetDebitVoucherForSubventionWithRecievables in fascommonbl.GetLedgerByProductSlNoAndTransrollID ");
                    }
                }
                else
                {
                    if (userCredentials.IsDebugEnabled == true)
                    {
                        log.Debug("Leave GetDebitVoucherForSubventionWithRecievables in fascommonbl.GetLedgerByProductSlNoAndTransrollID ");
                    }
                }
                #endregion
                bovoucher.ProductTypeID = bovoucher.ProductId.ProductTypeID;// session.Load<ProductTypeMaster>();

                bovoucher.Debit = 0;
                bovoucher.Credit = Receivableinterest;
                bovoucher.TransactionDate = Convert.ToDateTime(objTransactionDTO.TransactionDate).Date;

                if (finyear != null)
                {
                    bovoucher.YearCode = finyear;
                }
                else
                {
                    bovoucher.YearCode = GetFinancialYearCode(objTransactionDTO.TransactionDate);
                }

                bovoucher.LedgerCode = objLedger;
                if (isParellelRun == false)
                {
                    if (bovoucher.LedgerCode.AccountType.AccountTypeID == 1)
                    {
                        #region start log
                        if (log.IsErrorEnabled == true)
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Error("Enter  GetDebitVoucherForSubventionWithRecievables in fascommonbl.GetCashBalance ");
                            }
                        }
                        else
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Enter GetDebitVoucherForSubventionWithRecievables in fascommonbl.GetCashBalance ");
                            }
                        }
                        #endregion
                        bovoucher.OpeningAmount = fascommonbl.GetCashBalance(userCredentials.PacsId, userCredentials.BranchId, Convert.ToDateTime(bovoucher.TransactionDate.AddDays(1)), bovoucher.YearCode.YearCode, CashBookId, 0);
                        #region start log
                        if (log.IsErrorEnabled == true)
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Error("Leave  GetDebitVoucherForSubventionWithRecievables in fascommonbl.GetCashBalance " + bovoucher.OpeningAmount);
                            }
                        }
                        else
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Leave GetDebitVoucherForSubventionWithRecievables in fascommonbl.GetCashBalance " + bovoucher.OpeningAmount);
                            }
                        }
                        #endregion
                    }
                    else if (bovoucher.AccountCode != null)
                    {
                        long accountid = bovoucher.AccountCode.AccountID;
                        #region start log
                        if (log.IsErrorEnabled == true)
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Error("Enter  GetDebitVoucherForSubventionWithRecievables in fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID ");
                            }
                        }
                        else
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Enter GetDebitVoucherForSubventionWithRecievables in fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID ");
                            }
                        }
                        #endregion
                        bovoucher.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(bovoucher.LedgerCode.LedgerId, userCredentials.PacsId, userCredentials.BranchId, bovoucher.YearCode.YearCode, Convert.ToDateTime(bovoucher.TransactionDate.AddDays(1)), bovoucher.LedgerCode.LedgerType.LedgerTypeId, accountid);
                        //bovoucher.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(bovoucher.LedgerCode, userCredentials.PacsId, userCredentials.BranchId, bovoucher.YearCode, Convert.ToDateTime(bovoucher.TransactionDate.AddDays(1)), accountid);
                        #region start log
                        if (log.IsErrorEnabled == true)
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Error("Leave  GetDebitVoucherForSubventionWithRecievables in fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID " + bovoucher.OpeningAmount);
                            }
                        }
                        else
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Leave GetDebitVoucherForSubventionWithRecievables in fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID " + bovoucher.OpeningAmount);
                            }
                        }
                        #endregion
                    }
                    else
                    {
                        #region start log
                        if (log.IsErrorEnabled == true)
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Error("Enter  GetDebitVoucherForSubventionWithRecievables in fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID ");
                            }
                        }
                        else
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Enter GetDebitVoucherForSubventionWithRecievables in fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID ");
                            }
                        }
                        #endregion
                        bovoucher.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(bovoucher.LedgerCode.LedgerId, userCredentials.PacsId, userCredentials.BranchId, bovoucher.YearCode.YearCode, Convert.ToDateTime(bovoucher.TransactionDate.AddDays(1)), bovoucher.LedgerCode.LedgerType.LedgerTypeId);
                        #region start log
                        if (log.IsErrorEnabled == true)
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Error("Leave  GetDebitVoucherForSubventionWithRecievables in fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID " + bovoucher.OpeningAmount);
                            }
                        }
                        else
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Leave GetDebitVoucherForSubventionWithRecievables in fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID " + bovoucher.OpeningAmount);
                            }
                        }
                        #endregion
                        //bovoucher.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(bovoucher.LedgerCode, userCredentials.PacsId, userCredentials.BranchId, bovoucher.YearCode, Convert.ToDateTime(bovoucher.TransactionDate.AddDays(1)));
                    }


                    if (bovoucher.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.liabilities) || bovoucher.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.income))
                    {
                        bovoucher.BalanceAmount = bovoucher.OpeningAmount + bovoucher.Credit - bovoucher.Debit;
                    }
                    else if (bovoucher.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.asset) || bovoucher.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.Expenditure))
                    {
                        bovoucher.BalanceAmount = bovoucher.OpeningAmount - bovoucher.Credit + bovoucher.Debit;
                    }
                }
                #region start log
                if (log.IsErrorEnabled == true)
                {
                    if (userCredentials.IsDebugEnabled == true)
                    {
                        log.Error("Enter  GetDebitVoucherForSubventionWithRecievables in GetAccountDetails ");
                    }
                }
                else
                {
                    if (userCredentials.IsDebugEnabled == true)
                    {
                        log.Debug("Enter GetDebitVoucherForSubventionWithRecievables in GetAccountDetails ");
                    }
                }
                #endregion
                var objAccountDetails = GetAccountDetails(activityType.Product.Slno, objTransactionDTO.AccountNo, userCredentials.PacsId, userCredentials.BranchId, admissionnopkey);
                #region start log
                if (log.IsErrorEnabled == true)
                {
                    if (userCredentials.IsDebugEnabled == true)
                    {
                        log.Error("Leave  GetDebitVoucherForSubventionWithRecievables in GetAccountDetails ");
                    }
                }
                else
                {
                    if (userCredentials.IsDebugEnabled == true)
                    {
                        log.Debug("Leave GetDebitVoucherForSubventionWithRecievables in GetAccountDetails ");
                    }
                }
                #endregion
                bovoucher.AccountCode = objAccountDetails;
                bovoucher.CashBookId = CashBookId;
                bovoucher.Narration = objAccountDetails.AccountCode + " " + "Interest Receivable Amount collected+:" + Receivableinterest; //"share deposit"; //GetNarrationTemplateDetails(104).DebitCashNarration;
                bovoucher.TransrollID = 2;
                bovoucher.TransactionDate = Convert.ToDateTime(objTransactionDTO.TransactionDate).Date;
                bovoucher.ValueDate = Convert.ToDateTime(objTransactionDTO.ValueDate.ToShortDateString() + " " + DateTime.Now.TimeOfDay);
                bovoucher.VoucherDetailID = 0;
                bovoucher.PacsId = userCredentials.PacsId;
                bovoucher.BranchId = userCredentials.BranchId;
                bovoucher.IDGeneratorForPacs = userCredentials.PacsId;
                bovoucher.SerialNumberOfPacs = userCredentials.PACSSerialNumber;
                // objVoucherDetailsTemp.TransactionID = 40011;

                bovoucher.TransactionID = transactionbl.GetTransactionID(objTransactionDTO.ActivityType);

                //   voucherdetailslist.Add(bovoucher);
                if (bovoucher.Credit > 0 || bovoucher.Debit > 0)
                {
                    return bovoucher;
                }
                else
                {
                    return null;
                }
            }
            catch (Exception ex)
            {
                //////TransactionErrorLogBL.TrackErrorLog(ex.Message, GlobalUserCredentials);
                log.Error(ex);
                return null;
            }
        }


        public VoucherDetailsTemp GetDebitVoucherForSubventionInterestRecieved(TransactionDTO objTransactionDTO, ProductWiseActivities activityType, UserCredentials userCredentials, decimal Contravalueforrecevable, FAS.BL.CommonFasBL fascommonbl, long CashBookId, long admissionnopkey, TransactionBL transactionbl, FinancialYearMaster finyear, bool isParellRun = false)
        {
            try
            {
                VoucherDetailsTemp bovoucher = new VoucherDetailsTemp();
                AccountDetails objAccountDetails = new AccountDetails();
                #region start log
                if (log.IsErrorEnabled == true)
                {
                    if (userCredentials.IsDebugEnabled == true)
                    {
                        log.Error("Enter  GetDebitVoucherForSubventionWithRecievables in GetProductDetailsByslno ");
                    }
                }
                else
                {
                    if (userCredentials.IsDebugEnabled == true)
                    {
                        log.Debug("Enter GetDebitVoucherForSubventionWithRecievables in GetProductDetailsByslno ");
                    }
                }
                #endregion
                bovoucher.ProductId = GetProductDetailsByslno(activityType.Product.Slno);
                #region start log
                if (log.IsErrorEnabled == true)
                {
                    if (userCredentials.IsDebugEnabled == true)
                    {
                        log.Error("Leave  GetDebitVoucherForSubventionWithRecievables in GetProductDetailsByslno ");
                    }
                }
                else
                {
                    if (userCredentials.IsDebugEnabled == true)
                    {
                        log.Debug("Leave GetDebitVoucherForSubventionWithRecievables in GetProductDetailsByslno ");
                    }
                }
                #endregion

                #region start log
                if (log.IsErrorEnabled == true)
                {
                    if (userCredentials.IsDebugEnabled == true)
                    {
                        log.Error("Enter  GetDebitVoucherForSubventionWithRecievables in GetLedgerByProductSlNoAndTransrollID ");
                    }
                }
                else
                {
                    if (userCredentials.IsDebugEnabled == true)
                    {
                        log.Debug("Enter GetDebitVoucherForSubventionWithRecievables in GetLedgerByProductSlNoAndTransrollID ");
                    }
                }
                #endregion
                var objLedger = fascommonbl.GetLedgerByProductSlNoAndTransrollID(bovoucher.ProductId.Slno, 2, 3, userCredentials.PacsId, userCredentials.BranchId);

                #region start log
                if (log.IsErrorEnabled == true)
                {
                    if (userCredentials.IsDebugEnabled == true)
                    {
                        log.Error("Leave  GetDebitVoucherForSubventionWithRecievables in GetLedgerByProductSlNoAndTransrollID ");
                    }
                }
                else
                {
                    if (userCredentials.IsDebugEnabled == true)
                    {
                        log.Debug("Leave GetDebitVoucherForSubventionWithRecievables in GetLedgerByProductSlNoAndTransrollID ");
                    }
                }
                #endregion
                bovoucher.ProductTypeID = bovoucher.ProductId.ProductTypeID;// session.Load<ProductTypeMaster>();

                bovoucher.Debit = 0;
                bovoucher.Credit = Contravalueforrecevable;

                if (finyear != null)
                {
                    bovoucher.YearCode = finyear;
                }
                else
                {
                    bovoucher.YearCode = GetFinancialYearCode(objTransactionDTO.TransactionDate);

                }

                bovoucher.LedgerCode = objLedger;
                if (isParellRun == false)
                {
                    if (bovoucher.LedgerCode.AccountType.AccountTypeID == 1)
                    {
                        #region start log
                        if (log.IsErrorEnabled == true)
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Error("Enter  GetDebitVoucherForSubventionWithRecievables in fascommonbl.GetCashBalance ");
                            }
                        }
                        else
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Enter GetDebitVoucherForSubventionWithRecievables in fascommonbl.GetCashBalance ");
                            }
                        }
                        #endregion
                        bovoucher.OpeningAmount = fascommonbl.GetCashBalance(userCredentials.PacsId, userCredentials.BranchId, Convert.ToDateTime(bovoucher.TransactionDate.AddDays(1)), bovoucher.YearCode.YearCode, CashBookId, 0);
                        #region start log
                        if (log.IsErrorEnabled == true)
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Error("Leave  GetDebitVoucherForSubventionWithRecievables in fascommonbl.GetCashBalance " + bovoucher.OpeningAmount);
                            }
                        }
                        else
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Leave GetDebitVoucherForSubventionWithRecievables in fascommonbl.GetCashBalance " + bovoucher.OpeningAmount);
                            }
                        }
                        #endregion
                    }
                    else if (bovoucher.AccountCode != null)
                    {
                        long accountid = bovoucher.AccountCode.AccountID;
                        #region start log
                        if (log.IsErrorEnabled == true)
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Error("Enter  GetDebitVoucherForSubventionWithRecievables in fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID ");
                            }
                        }
                        else
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Enter GetDebitVoucherForSubventionWithRecievables in fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID ");
                            }
                        }
                        #endregion
                        bovoucher.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(bovoucher.LedgerCode.LedgerId, userCredentials.PacsId, userCredentials.BranchId, bovoucher.YearCode.YearCode, Convert.ToDateTime(bovoucher.TransactionDate.AddDays(1)), bovoucher.LedgerCode.LedgerType.LedgerTypeId, accountid);
                        #region start log
                        if (log.IsErrorEnabled == true)
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Error("Leave  GetDebitVoucherForSubventionWithRecievables in fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID " + bovoucher.OpeningAmount);
                            }
                        }
                        else
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Leave GetDebitVoucherForSubventionWithRecievables in fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID " + bovoucher.OpeningAmount);
                            }
                        }
                        #endregion
                        //bovoucher.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(bovoucher.LedgerCode, userCredentials.PacsId, userCredentials.BranchId, bovoucher.YearCode, Convert.ToDateTime(bovoucher.TransactionDate.AddDays(1)), accountid);
                    }
                    else
                    {
                        #region start log
                        if (log.IsErrorEnabled == true)
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Error("Enter  GetDebitVoucherForSubventionWithRecievables in fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID ");
                            }
                        }
                        else
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Enter GetDebitVoucherForSubventionWithRecievables in fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID ");
                            }
                        }
                        #endregion
                        bovoucher.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(bovoucher.LedgerCode.LedgerId, userCredentials.PacsId, userCredentials.BranchId, bovoucher.YearCode.YearCode, Convert.ToDateTime(bovoucher.TransactionDate.AddDays(1)), bovoucher.LedgerCode.LedgerType.LedgerTypeId);
                        #region start log
                        if (log.IsErrorEnabled == true)
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Error("Leave  GetDebitVoucherForSubventionWithRecievables in fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID " + bovoucher.OpeningAmount);
                            }
                        }
                        else
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Leave GetDebitVoucherForSubventionWithRecievables in fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID " + bovoucher.OpeningAmount);
                            }
                        }
                        #endregion
                        //bovoucher.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(bovoucher.LedgerCode, userCredentials.PacsId, userCredentials.BranchId, bovoucher.YearCode, Convert.ToDateTime(bovoucher.TransactionDate.AddDays(1)));
                    }


                    if (bovoucher.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.liabilities) || bovoucher.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.income))
                    {
                        bovoucher.BalanceAmount = bovoucher.OpeningAmount + bovoucher.Credit - bovoucher.Debit;
                    }
                    else if (bovoucher.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.asset) || bovoucher.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.Expenditure))
                    {
                        bovoucher.BalanceAmount = bovoucher.OpeningAmount - bovoucher.Credit + bovoucher.Debit;
                    }
                }
                objAccountDetails = GetAccountDetails(objTransactionDTO.Product, objTransactionDTO.AccountNo, userCredentials.PacsId, userCredentials.BranchId, admissionnopkey);
                bovoucher.AccountCode = objAccountDetails;
                bovoucher.CashBookId = CashBookId;
                bovoucher.Narration = objAccountDetails.AccountCode + " " + "Interest receivaed  Amount+:" + Contravalueforrecevable; //bovoucher.Narration; //"share deposit"; //GetNarrationTemplateDetails(104).DebitCashNarration;
                bovoucher.TransrollID = 2;
                bovoucher.TransactionDate = Convert.ToDateTime(objTransactionDTO.TransactionDate).Date;
                bovoucher.ValueDate = Convert.ToDateTime(objTransactionDTO.ValueDate.ToShortDateString() + " " + DateTime.Now.TimeOfDay);
                bovoucher.VoucherDetailID = 0;
                bovoucher.PacsId = userCredentials.PacsId;
                bovoucher.BranchId = userCredentials.BranchId;
                bovoucher.IDGeneratorForPacs = userCredentials.PacsId;
                bovoucher.SerialNumberOfPacs = userCredentials.PACSSerialNumber;
                // objVoucherDetailsTemp.TransactionID = 40011;

                bovoucher.TransactionID = transactionbl.GetTransactionID(objTransactionDTO.ActivityType);
                if (bovoucher.Credit > 0 || bovoucher.Debit > 0)
                {
                    return bovoucher;
                }
                else
                {
                    return null;
                }
            }
            catch (Exception ex)
            {
                //////TransactionErrorLogBL.TrackErrorLog(ex.Message, GlobalUserCredentials);
                log.Error(ex);
                return null;
            }

        }

        public VoucherDetailsTemp GetDebitVoucherForSubventionPrncipalRecieved(TransactionDTO objTransactionDTO, ProductWiseActivities activityType, UserCredentials userCredentials, decimal Prinicple, FAS.BL.CommonFasBL fascommonbl, long CashBookId, long admissionnopkey, TransactionBL transactionbl, FinancialYearMaster finyear, bool isParellRun = false)
        {
            try
            {
                VoucherDetailsTemp bovoucher = new VoucherDetailsTemp();
                AccountDetails objAccountDetails = new AccountDetails();
                bovoucher.ProductId = GetProductDetailsByslno(activityType.Product.Slno);
                var objLedger = fascommonbl.GetLedgerByProductSlNoAndTransrollID(bovoucher.ProductId.Slno, 1, 3, userCredentials.PacsId, userCredentials.BranchId);
                bovoucher.ProductTypeID = bovoucher.ProductId.ProductTypeID;// session.Load<ProductTypeMaster>();

                bovoucher.Credit = Prinicple;
                bovoucher.Debit = 0;

                if (finyear != null)
                {
                    bovoucher.YearCode = finyear;
                }
                else
                {
                    bovoucher.YearCode = GetFinancialYearCode(objTransactionDTO.TransactionDate);
                }

                bovoucher.LedgerCode = objLedger;
                if (isParellRun == false)
                {
                    if (bovoucher.LedgerCode.AccountType.AccountTypeID == 1)
                    {
                        bovoucher.OpeningAmount = fascommonbl.GetCashBalance(userCredentials.PacsId, userCredentials.BranchId, Convert.ToDateTime(bovoucher.TransactionDate.AddDays(1)), bovoucher.YearCode.YearCode, CashBookId, 0);
                    }
                    else if (bovoucher.AccountCode != null)
                    {
                        long accountid = bovoucher.AccountCode.AccountID;
                        bovoucher.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(bovoucher.LedgerCode.LedgerId, userCredentials.PacsId, userCredentials.BranchId, bovoucher.YearCode.YearCode, Convert.ToDateTime(bovoucher.TransactionDate.AddDays(1)), bovoucher.LedgerCode.LedgerType.LedgerTypeId, accountid);
                        //bovoucher.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(bovoucher.LedgerCode, userCredentials.PacsId, userCredentials.BranchId, bovoucher.YearCode, Convert.ToDateTime(bovoucher.TransactionDate.AddDays(1)), accountid);
                    }
                    else
                    {
                        bovoucher.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(bovoucher.LedgerCode.LedgerId, userCredentials.PacsId, userCredentials.BranchId, bovoucher.YearCode.YearCode, Convert.ToDateTime(bovoucher.TransactionDate.AddDays(1)), bovoucher.LedgerCode.LedgerType.LedgerTypeId);
                        //bovoucher.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(bovoucher.LedgerCode, userCredentials.PacsId, userCredentials.BranchId, bovoucher.YearCode, Convert.ToDateTime(bovoucher.TransactionDate.AddDays(1)));
                    }


                    if (bovoucher.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.liabilities) || bovoucher.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.income))
                    {
                        bovoucher.BalanceAmount = bovoucher.OpeningAmount + bovoucher.Credit - bovoucher.Debit;
                    }
                    else if (bovoucher.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.asset) || bovoucher.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.Expenditure))
                    {
                        bovoucher.BalanceAmount = bovoucher.OpeningAmount - bovoucher.Credit + bovoucher.Debit;
                    }
                }
                objAccountDetails = GetAccountDetails(objTransactionDTO.Product, objTransactionDTO.AccountNo, userCredentials.PacsId, userCredentials.BranchId, admissionnopkey);
                bovoucher.AccountCode = objAccountDetails;
                bovoucher.CashBookId = CashBookId;
                bovoucher.Narration = objAccountDetails.AccountCode + " " + "Principal receivaed  Amount+:" + Prinicple; //bovoucher.Narration; //"share deposit"; //GetNarrationTemplateDetails(104).DebitCashNarration;
                bovoucher.TransrollID = 0;
                bovoucher.TransactionDate = Convert.ToDateTime(objTransactionDTO.TransactionDate).Date;
                bovoucher.ValueDate = Convert.ToDateTime(objTransactionDTO.ValueDate.ToShortDateString() + " " + DateTime.Now.TimeOfDay);
                bovoucher.VoucherDetailID = 0;
                bovoucher.PacsId = userCredentials.PacsId;
                bovoucher.BranchId = userCredentials.BranchId;
                bovoucher.IDGeneratorForPacs = userCredentials.PacsId;
                bovoucher.SerialNumberOfPacs = userCredentials.PACSSerialNumber;
                // objVoucherDetailsTemp.TransactionID = 40011;

                bovoucher.TransactionID = transactionbl.GetTransactionID(objTransactionDTO.ActivityType);
                if (bovoucher.Credit > 0 || bovoucher.Debit > 0)
                {
                    return bovoucher;
                }
                else
                {
                    return null;
                }
            }
            catch (Exception ex)
            {
                //////TransactionErrorLogBL.TrackErrorLog(ex.Message, GlobalUserCredentials);
                log.Error(ex);
                return null;
            }

        }



        public VoucherDetailsTemp GetVoucherDetailsForReceivables(ProductMaster pmaster, UserCredentials user, bool isContra, bool isTransfer, decimal amount, ISession _sessionfromvoucher, VoucherMainTemp vmaintemp, AccountDetails accountdetails, AccountDetails contraaccountdetails, decimal interestrecivable)
        {
            try
            {
                VoucherDetailsTemp objVchrDtls = new VoucherDetailsTemp();
                objVchrDtls.PacsId = user.PacsId;
                objVchrDtls.BranchId = user.BranchId;
                objVchrDtls.IDGeneratorForPacs = user.PacsId;
                objVchrDtls.SerialNumberOfPacs = user.PACSSerialNumber;
                var objLedg = new Ledger();
                var objOtherDebits = new OtherDebitsBl(session);
                objVchrDtls.TransactionDate = user.Logindatetime;
                objVchrDtls.TransactionID = 40011;
                objVchrDtls.ValueDate = user.Logindatetime;
                var bll = new CommonFasBL(session);
                if (isContra == false)
                {
                    if (isTransfer)
                    {
                        if (vmaintemp.VoucherDetailsTemp != null && vmaintemp.VoucherDetailsTemp.Count > 0)
                        {
                            VoucherDetailsTemp vtemp = vmaintemp.VoucherDetailsTemp.LastOrDefault();
                            objVchrDtls.Debit = 0;
                            objVchrDtls.BalanceAmount = amount;
                            objVchrDtls.Credit = amount;
                            objVchrDtls.LedgerCode = vtemp.LedgerCode;
                            objVchrDtls.TransrollID = vtemp.TransrollID;
                            objVchrDtls.ProductId = vtemp.ProductId;
                            objVchrDtls.ProductTypeID = objVchrDtls.ProductId.ProductTypeID;
                            objVchrDtls.AccountCode = contraaccountdetails;
                            //objVchrDtls.OpeningAmount = objOtherDebits.GetOpeningAmount(contraaccountdetails.AccountID,
                            // 188, user.PacsId, user.BranchId, vmaintemp.YearCode.YearCode, objVchrDtls.TransactionDate);
                        }
                    }
                    else
                    {
                        objVchrDtls.Debit = amount;
                        objVchrDtls.BalanceAmount = amount;
                        objVchrDtls.Credit = 0;
                        objVchrDtls.LedgerCode = _sessionfromvoucher.Load<Ledger>(Convert.ToInt64(EnumFixedLedgers.CashLedger));
                        objVchrDtls.ProductId = pmaster;
                        objVchrDtls.ProductTypeID = pmaster.ProductTypeID;
                        objVchrDtls.TransrollID = 99;
                        objVchrDtls.AccountCode = accountdetails;
                        objVchrDtls.OpeningAmount = objOtherDebits.GetOpeningAmount(accountdetails.AccountID,
                             objVchrDtls.LedgerCode, user.PacsId, user.BranchId, vmaintemp.YearCode, objVchrDtls.TransactionDate);
                    }

                }
                else
                {

                    var activitymaster = _sessionfromvoucher.QueryOver<ProductWiseActivities>().Where(i => i.Product.Slno == pmaster.Slno && i.ProductType.ProductTypeID == 3 && i.FinTransactionType.TransactionTypeId == 1 && i.Activities.ActivityId == 3).List().FirstOrDefault();

                    objVchrDtls.BalanceAmount = Convert.ToDecimal(amount);
                    objLedg = objOtherDebits.GetLedgerByProductWiseAcitivityPkeyandTransrollID(activitymaster.PKey, 130, user.PacsId, user.BranchId); // objOtherDebits.GetLedgerByTransrollId(trans.TransrollID, pcode.Slno, pacsid, purposepkey, branchid);
                    objVchrDtls.LedgerCode = objLedg;
                    objVchrDtls.TransrollID = 130;
                    objVchrDtls.OpeningAmount = objOtherDebits.GetOpeningAmount(accountdetails.AccountID,
                        objLedg, user.PacsId, user.BranchId, vmaintemp.YearCode, objVchrDtls.TransactionDate);
                    objVchrDtls.ProductId = pmaster;
                    objVchrDtls.ProductTypeID = pmaster.ProductTypeID;
                    objVchrDtls.TransactionDate = user.Logindatetime;
                    objVchrDtls.TransactionID = 40011;
                    objVchrDtls.ValueDate = user.Logindatetime;
                    objVchrDtls.AccountCode = accountdetails;
                    objVchrDtls.Credit = amount;
                    objVchrDtls.Debit = 0;
                }
                if (objVchrDtls.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.liabilities))
                {
                    objVchrDtls.BalanceAmount = objVchrDtls.OpeningAmount + objVchrDtls.Credit - objVchrDtls.Debit;
                }
                else if (objVchrDtls.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.asset))
                {
                    objVchrDtls.BalanceAmount = objVchrDtls.OpeningAmount - objVchrDtls.Credit + objVchrDtls.Debit;
                }
                objVchrDtls.Narration = "From receivable Collections";
                objVchrDtls.YearCode = vmaintemp.YearCode;
                return objVchrDtls;
            }
            catch (Exception ex)
            {
                //////TransactionErrorLogBL.TrackErrorLog(ex.Message, GlobalUserCredentials);
                log.Error(ex);
                return null;
            }
        }

        public VoucherDetailsTemp GetPreparedVoucherDetailsTempObjectForInterestRebateCollections(TransactionDTO objVchrTransDto, UserCredentials userCredentials, FinancialYearMaster yearcode, ProductWiseActivities activityType, decimal amount, int transrolid, int ledgertransroll, long CashBookId, bool isParellRun = false)
        {
            try
            {
                CommonFasBL fascommonbl = new CommonFasBL(session);
                TransactionBL bll = new TransactionBL(session);
                VoucherDetailsTemp listVchrTemp = new VoucherDetailsTemp();
                VoucherDetailsTemp objVoucherDetailsTemp = new VoucherDetailsTemp();
                if (amount > 0)
                {

                    var ledger = bll.GetLedgerDetails(objVchrTransDto.ActivityType, ledgertransroll, userCredentials.PacsId, userCredentials.BranchId);

                    objVoucherDetailsTemp.ProductId = GetProductDetailsByslno(26);
                    objVoucherDetailsTemp.ProductTypeID = objVoucherDetailsTemp.ProductId.ProductTypeID;// session.Load<ProductTypeMaster>();
                    objVoucherDetailsTemp.IDGeneratorForPacs = userCredentials.PacsId;
                    objVoucherDetailsTemp.SerialNumberOfPacs = userCredentials.PACSSerialNumber;
                    objVoucherDetailsTemp.AccountCode = null;
                    objVoucherDetailsTemp.YearCode = yearcode;

                    objVoucherDetailsTemp.Debit = amount;
                    objVoucherDetailsTemp.Credit = 0;

                    objVoucherDetailsTemp.LedgerCode = ledger;
                    if (isParellRun == false)
                    {
                        if (objVoucherDetailsTemp.LedgerCode.AccountType.AccountTypeID == 1)
                        {
                            objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetCashBalance(userCredentials.PacsId, userCredentials.BranchId, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), objVoucherDetailsTemp.YearCode.YearCode, CashBookId, 0);
                        }
                        else
                        {
                            objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(objVoucherDetailsTemp.LedgerCode.LedgerId, userCredentials.PacsId, userCredentials.BranchId, objVoucherDetailsTemp.YearCode.YearCode, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId);
                        }
                        //objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(objVoucherDetailsTemp.LedgerCode, userCredentials.PacsId, userCredentials.BranchId, objVoucherDetailsTemp.YearCode, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)));

                        if (objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.liabilities))
                        {
                            objVoucherDetailsTemp.BalanceAmount = objVoucherDetailsTemp.OpeningAmount + objVoucherDetailsTemp.Credit - objVoucherDetailsTemp.Debit;
                        }
                        else if (objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.asset))
                        {
                            objVoucherDetailsTemp.BalanceAmount = objVoucherDetailsTemp.OpeningAmount - objVoucherDetailsTemp.Credit + objVoucherDetailsTemp.Debit;
                        }
                    }
                    objVoucherDetailsTemp.CashBookId = CashBookId;
                    objVoucherDetailsTemp.Narration = objVchrTransDto.Narration; //"share deposit"; //GetNarrationTemplateDetails(104).DebitCashNarration;
                    objVoucherDetailsTemp.TransrollID = transrolid;
                    objVoucherDetailsTemp.TransactionDate = Convert.ToDateTime(objVchrTransDto.TransactionDate).Date;
                    objVoucherDetailsTemp.ValueDate = Convert.ToDateTime(objVchrTransDto.ValueDate.ToShortDateString() + " " + DateTime.Now.TimeOfDay);
                    objVoucherDetailsTemp.VoucherDetailID = 0;
                    objVoucherDetailsTemp.PacsId = userCredentials.PacsId;
                    objVoucherDetailsTemp.BranchId = userCredentials.BranchId;
                    objVoucherDetailsTemp.IDGeneratorForPacs = userCredentials.PacsId;
                    objVoucherDetailsTemp.SerialNumberOfPacs = userCredentials.PACSSerialNumber;
                    TransactionBL objTransactionBL = new TransactionBL(session);
                    objVoucherDetailsTemp.TransactionID = objTransactionBL.GetTransactionID(objVchrTransDto.ActivityType);// 10011;//(GetTransactionActivitiesDetails(10011, 1001)).Moduleactivityid;
                    return objVoucherDetailsTemp;
                }

                return null;
            }
            catch (Exception ex)
            {
                //////TransactionErrorLogBL.TrackErrorLog(ex.Message, GlobalUserCredentials);
                log.Error(ex);
                return null;
            }
        }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="userCredentials"></param>
        /// <param name="objTransactionDTO"></param>
        /// <returns></returns>

        private VoucherMainTemp FillVouchermaintemp(UserCredentials userCredentials, TransactionDTO objTransactionDTO, ProductWiseActivities activityType, FinancialYearMaster finyear)
        {

            #region start log
            if (log.IsErrorEnabled == true)
            {
                if (userCredentials.IsDebugEnabled == true)
                {
                    log.Error("Entering into FillVouchermaintemp");
                }
            }
            else
            {
                if (userCredentials.IsDebugEnabled == true)
                {
                    log.Debug("Entering into FillVouchermaintemp");
                }
            }
            #endregion
            try
            {
                VoucherMainTemp objVoucherMain = new VoucherMainTemp();
                objVoucherMain.IDGeneratorForPacs = userCredentials.PacsId;
                objVoucherMain.SerialNumberOfPacs = userCredentials.PACSSerialNumber;
                objVoucherMain.BranchId = userCredentials.BranchId;
                objVoucherMain.BatchId = objTransactionDTO.BatchID;
                // "share deposit";//GetNarrationTemplateDetails(5).CreditCashNarration;
                objVoucherMain.PacsId = userCredentials.PacsId;
                objVoucherMain.Narration = objTransactionDTO.NarrationGeneral;
                objVoucherMain.CashBookId = userCredentials.CashBookId;
                if (!string.IsNullOrEmpty(objTransactionDTO.NarrationRegional))
                {
                    objVoucherMain.NarrationRegional = objTransactionDTO.NarrationRegional;
                }
                //else
                //{
                //    objVoucherMain.Narration = "Being the amount received towards" + activitydetails + " from " + objTransactionDTO.CustomerName + " Admission no. " + objTransactionDTO.AdmissionNo + " Account no. " + objTransactionDTO.AccountCode;
                //}
                objVoucherMain.TransactionDate = objTransactionDTO.TransactionDate.Date;
                objVoucherMain.ValueDate = Convert.ToDateTime(objTransactionDTO.ValueDate.ToShortDateString() + " " + DateTime.Now.TimeOfDay);
                objVoucherMain.VisibleStatus = false;
                objVoucherMain.VoucherNo = 0;// objShareTransDto.VoucherNumber;
                objVoucherMain.SocityVoucherNo = objTransactionDTO.SocietyVoucherNo;
                objVoucherMain.VoucherType = session.Load<VoucherTypeMaster>(objTransactionDTO.VoucherType); //objCommonFasBL.GetVoucherType(1);
                #region start log
                if (log.IsErrorEnabled == true)
                {
                    if (userCredentials.IsDebugEnabled == true)
                    {
                        log.Error(" Leaving into objVoucherMain.VoucherType:" + objVoucherMain.VoucherType);
                    }
                }
                else
                {
                    if (userCredentials.IsDebugEnabled == true)
                    {
                        log.Debug(" Leaving into objVoucherMain.VoucherType:" + objVoucherMain.VoucherType);
                    }
                }
                #endregion
                //FATransactionMaster 1.Receipt;2.Payment;3.Transfer
                //VoucherType 1.Cash 2.Transfer 3.Bank 4.DefaultTransfer
                if (objTransactionDTO.VoucherType == 1)
                {
                    if (activityType.FinTransactionType.TransactionTypeId == 1)//receipt
                    {
                        objVoucherMain.TransactionType = session.Load<FATransactionMaster>(1);
                    }
                    else if (activityType.FinTransactionType.TransactionTypeId == 2)//payment
                    {
                        objVoucherMain.TransactionType = session.Load<FATransactionMaster>(2);
                    }
                }
                else //vouchertype=2=transfer
                {
                    objVoucherMain.TransactionType = session.Load<FATransactionMaster>(3);
                }
                #region start log
                if (log.IsErrorEnabled == true)
                {
                    if (userCredentials.IsDebugEnabled == true)
                    {
                        log.Error(" Leaving into objVoucherMain.TransactionType:" + objVoucherMain.TransactionType);
                    }
                }
                else
                {
                    if (userCredentials.IsDebugEnabled == true)
                    {
                        log.Debug(" Leaving into objVoucherMain.TransactionType:" + objVoucherMain.TransactionType);
                    }
                }
                #endregion
                objVoucherMain.VoucherDeleted = false;
                objVoucherMain.PassStatus = false;
                if (finyear != null)
                {
                    objVoucherMain.YearCode = finyear;
                }
                else
                {
                    objVoucherMain.YearCode = GetFinancialYearCode(objTransactionDTO.TransactionDate);

                }


                #region start log
                if (log.IsErrorEnabled == true)
                {
                    if (userCredentials.IsDebugEnabled == true)
                    {
                        log.Error(" Leaving into FillVouchermaintemp");
                    }
                }
                else
                {
                    if (userCredentials.IsDebugEnabled == true)
                    {
                        log.Debug(" Leaving into FillVouchermaintemp");
                    }
                }
                #endregion
                return objVoucherMain;
            }
            catch (Exception ex)
            {
                // ////TransactionErrorLogBL.TrackErrorLog(ex.Message, GlobalUserCredentials);
                log.Error(ex);
                return null;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="userCredentials"></param>
        /// <param name="objTransactionDTO"></param>
        /// <param name="voucherdetailslist"></param>
        /// <returns></returns>
        private Transfers FillBatchDetails(UserCredentials userCredentials, TransactionDTO objTransactionDTO, IList<VoucherDetailsTemp> voucherdetailslist)
        {
            #region start log
            if (log.IsErrorEnabled == true)
            {
                if (userCredentials.IsDebugEnabled == true)
                {
                    log.Error("Entering Transfers into FillBatchDetails");
                }
            }
            else
            {
                if (userCredentials.IsDebugEnabled == true)
                {
                    log.Debug("Entering Transfers into FillBatchDetails");
                }
            }
            #endregion

            Transfers objTransfers = new Transfers();
            try
            {
                objTransfers.BranchId = userCredentials.BranchId;
                objTransfers.PacsId = userCredentials.PacsId;
                objTransfers.ProductId = objTransactionDTO.Product.ToString();// "1001";
                if (objTransactionDTO.AdmissionNo != null)
                    objTransfers.AdmissionNo = objTransactionDTO.AdmissionNo.ToString();
                objTransfers.AccountNumber = objTransactionDTO.AccountNo;
                objTransfers.TransactionDate = Convert.ToDateTime(objTransactionDTO.TransactionDate);
                objTransfers.VoucherType = objTransactionDTO.VoucherType.ToString();//objVoucherMain.VoucherType
                objTransfers.VoucherNo = 0;// objShareTransDto.VoucherNumber;
                objTransfers.Deposit = voucherdetailslist.Sum(i => i.Credit);
                objTransfers.Withdrawl = voucherdetailslist.Sum(i => i.Debit);
                objTransfers.IDGeneratorForPacs = userCredentials.PacsId;
                objTransfers.SerialNumberOfPacs = userCredentials.PACSSerialNumber;

                #region start log
                if (log.IsErrorEnabled == true)
                {
                    if (userCredentials.IsDebugEnabled == true)
                    {
                        log.Error("Leaving Transfers into FillBatchDetails");
                    }
                }
                else
                {
                    if (userCredentials.IsDebugEnabled == true)
                    {
                        log.Debug("Leaving Transfers into FillBatchDetails");
                    }
                }
                #endregion
            }
            catch (Exception ex)
            {
                ////TransactionErrorLogBL.TrackErrorLog(ex.Message, GlobalUserCredentials);
                log.Error(ex);
                // return null;
            }
            return objTransfers;
        }


        /// <summary>
        /// Purpsoe:To fill vocher Details Temp data.
        /// </summary>
        /// <Author> Raj Pallati</Author>
        /// <CreatedDate>23/06/2015</CreatedDate>
        /// <FunctionName>FillVoucherDetailsTempData</FunctionName>
        /// <ReturnType>VoucherDetailsTemp</ReturnType>
        /// <param name="objVchrDtlsTemp"></param>
        /// <param name="contra"></param>
        /// <param name="objShareTransDto"></param>
        /// <DataBaseTables>FA_VoucherMainTemp</DataBaseTables>
        /// <ModifiedDate></ModifiedDate>
        /// <ChangesForModification></ChangesForModification>
        /// 
        IList<TransactionTypeMasterDTO> listTransaction = new List<TransactionTypeMasterDTO>();
        /// <summary>
        /// 
        /// </summary>
        /// <param name="listVchrTemp"></param>
        /// <param name="contra"></param>
        /// <param name="objVchrTransDto"></param>
        /// <param name="userCredentials"></param>
        /// <returns></returns>

        private IList<VoucherDetailsTemp> FillVoucherDetailsTempData(IList<VoucherDetailsTemp> listVchrTemp, bool contra, TransactionDTO objVchrTransDto, UserCredentials userCredentials, long CashBookId, ProductWiseActivities activityType, long admissionnopkey, FinancialYearMaster finyear, bool isParellRun)
        {

            #region start log
            if (log.IsErrorEnabled == true)
            {
                if (userCredentials.IsDebugEnabled == true)
                {
                    log.Error("Entering FillVoucherDetailsTempData");
                }
            }
            else
            {
                if (userCredentials.IsDebugEnabled == true)
                {
                    log.Debug("Entering FillVoucherDetailsTempData ");
                }
            }
            #endregion
            try
            {
                AccountDetails objAccountDetails = new AccountDetails();
                Ledger objLedger = new Ledger();
                VoucherDetailsTemp VchrContraDetailsTemp = new VoucherDetailsTemp();

                if (finyear != null)
                {
                    VchrContraDetailsTemp.YearCode = finyear;
                }
                else
                {
                    VchrContraDetailsTemp.YearCode = GetFinancialYearCode(objVchrTransDto.TransactionDate);
                }

                //SWActivityTypeMaster activityType = session.Load<SWActivityTypeMaster>(objVchrTransDto.ActivityType);
                if (contra == false)
                {
                    XmlDocument xd = new XmlDocument();
                    xd.LoadXml(objVchrTransDto.XML.ToString());
                    TransactionTypeMasterDTO obj;
                    listTransaction = new List<TransactionTypeMasterDTO>();
                    XmlNodeList xnList = xd.SelectNodes("/Temp/row");
                    foreach (XmlNode xn in xnList)
                    {
                        obj = new TransactionTypeMasterDTO();
                        obj.Ledger = Convert.ToInt64(xn["LedgerID"].InnerText);
                        obj.LedgerDescription = xn["LedgerDescription"].InnerText;
                        obj.TransrollID = Convert.ToInt32(xn["TransrollID"].InnerText);
                        obj.TransrollDescription = xn["TransrollDescription"].InnerText;
                        obj.Amount = Convert.ToDecimal(xn["Amount"].InnerText);

                        listTransaction.Add(obj);
                        #region start log
                        if (log.IsErrorEnabled == true)
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Error("Entering FillVoucherDetailsTempData into FillVoucherDetailTemp");
                            }
                        }
                        else
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Entering FillVoucherDetailsTempData into FillVoucherDetailTemp");
                            }
                        }
                        #endregion
                        VoucherDetailsTemp listVoucherTemp = FillVoucherDetailTemp(objVchrTransDto, userCredentials, VchrContraDetailsTemp.YearCode, activityType, obj.Amount, obj.Ledger, obj.TransrollID, CashBookId, false, admissionnopkey, isParellRun);
                        #region start log
                        if (log.IsErrorEnabled == true)
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Error("Leave FillVoucherDetailsTempData into FillVoucherDetailTemp");
                            }
                        }
                        else
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Leave FillVoucherDetailsTempData into FillVoucherDetailTemp");
                            }
                        }
                        #endregion
                        // listVoucherTemp.TransactionID=GetTransactionId(activityType.PKey,productc)

                        //if (activityType.ProductType.ProductTypeID == 3 && activityType.FinTransactionType.TransactionTypeId == 1)
                        //{
                        //    listVoucherTemp.TransactionID = 40011;
                        //}
                        if (listVoucherTemp.Credit != 0 || listVoucherTemp.Debit != 0)
                        {
                            listVchrTemp.Add(listVoucherTemp);
                        }
                    }
                }
                else
                {
                    #region start log
                    if (log.IsErrorEnabled == true)
                    {
                        if (userCredentials.IsDebugEnabled == true)
                        {
                            log.Error("Entering FillVoucherDetailsTempData into FillVoucherDetailTempCash");
                        }
                    }
                    else
                    {
                        if (userCredentials.IsDebugEnabled == true)
                        {
                            log.Debug("Entering FillVoucherDetailsTempData into FillVoucherDetailTempCash");
                        }
                    }
                    #endregion
                    VoucherDetailsTemp objVoucherDetailsTemp = FillVoucherDetailTempCash(objVchrTransDto, userCredentials, VchrContraDetailsTemp.YearCode, activityType, CashBookId, false, admissionnopkey, isParellRun);
                    #region start log
                    if (log.IsErrorEnabled == true)
                    {
                        if (userCredentials.IsDebugEnabled == true)
                        {
                            log.Error("Leave FillVoucherDetailsTempData into FillVoucherDetailTempCash");
                        }
                    }
                    else
                    {
                        if (userCredentials.IsDebugEnabled == true)
                        {
                            log.Debug("Leave FillVoucherDetailsTempData into FillVoucherDetailTempCash");
                        }
                    }
                    #endregion
                    //if (activityType.ProductType.ProductTypeID == 3 && activityType.FinTransactionType.TransactionTypeId == 1)
                    //{
                    //    objVoucherDetailsTemp.TransactionID = 40011;
                    //}
                    listVchrTemp.Add(objVoucherDetailsTemp);

                }
                //bool IsNonCumulativePenalty = true;
                if (objVchrTransDto.NonCumulativePenalty > 0)
                {
                    if (objVchrTransDto.ActivityType != 188000001)
                    {
                        #region start log
                        if (log.IsErrorEnabled == true)
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Error("Entering FillVoucherDetailsTempData into FillVoucherDetailTempNonCumPenaltyDepositAmountDebit");
                            }
                        }
                        else
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Entering FillVoucherDetailsTempData into FillVoucherDetailTempNonCumPenaltyDepositAmountDebit");
                            }
                        }
                        #endregion
                        VoucherDetailsTemp objVoucherDetailsTempNonCumPenaltyDepositAmount = FillVoucherDetailTempNonCumPenaltyDepositAmountDebit(objVchrTransDto, userCredentials, VchrContraDetailsTemp.YearCode, activityType, objVchrTransDto.NonCumulativePenalty, objVchrTransDto.Ledger, 8, CashBookId, false, admissionnopkey, isParellRun);
                        #region start log
                        if (log.IsErrorEnabled == true)
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Error("Leave FillVoucherDetailsTempData into FillVoucherDetailTempNonCumPenaltyDepositAmountDebit");
                            }
                        }
                        else
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Leave FillVoucherDetailsTempData into FillVoucherDetailTempNonCumPenaltyDepositAmountDebit");
                            }
                        }
                        #endregion
                        listVchrTemp.Add(objVoucherDetailsTempNonCumPenaltyDepositAmount);
                        #region start log
                        if (log.IsErrorEnabled == true)
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Error("Entering FillVoucherDetailsTempData into FillVoucherDetailTempNonCumPenaltyExcessInterestCredit");
                            }
                        }
                        else
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Entering FillVoucherDetailsTempData into FillVoucherDetailTempNonCumPenaltyExcessInterestCredit");
                            }
                        }
                        #endregion
                        VoucherDetailsTemp objVoucherDetailsTempNonCumPenaltyInterestAmount = FillVoucherDetailTempNonCumPenaltyExcessInterestCredit(objVchrTransDto, userCredentials, VchrContraDetailsTemp.YearCode, activityType, objVchrTransDto.NonCumulativePenalty, 155, 57, CashBookId, false, admissionnopkey, isParellRun);
                        #region start log
                        if (log.IsErrorEnabled == true)
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Error("Leave FillVoucherDetailsTempData into FillVoucherDetailTempNonCumPenaltyExcessInterestCredit");
                            }
                        }
                        else
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Leave FillVoucherDetailsTempData into FillVoucherDetailTempNonCumPenaltyExcessInterestCredit");
                            }
                        }
                        #endregion
                        listVchrTemp.Add(objVoucherDetailsTempNonCumPenaltyInterestAmount);
                        objVchrTransDto.NonCumulativePenalty = 0.00m;
                    }
                }

                #region start log
                if (log.IsErrorEnabled == true)
                {
                    if (userCredentials.IsDebugEnabled == true)
                    {
                        log.Error("Leave FillVoucherDetailsTempData");
                    }
                }
                else
                {
                    if (userCredentials.IsDebugEnabled == true)
                    {
                        log.Debug("Leave FillVoucherDetailsTempData ");
                    }
                }
                #endregion
                return listVchrTemp;
            }
            catch (Exception ex)
            {
                log.Error(ex);
                return null;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="objVchrTransDto"></param>
        /// <param name="userCredentials"></param>
        /// <param name="yearcode"></param>
        /// <param name="activityType"></param>
        /// <returns></returns>
        private VoucherDetailsTemp FillVoucherDetailTemp(TransactionDTO objVchrTransDto, UserCredentials userCredentials, FinancialYearMaster yearcode, ProductWiseActivities activityType, decimal amount, long ledgerid, int transrolid, long CashBookId, bool IsSubvention, long admissionnopkey, bool isParellRun = false)
        {
            try
            {
                #region start log
                if (log.IsErrorEnabled == true)
                {
                    if (userCredentials.IsDebugEnabled == true)
                    {
                        log.Error("Entering FillVoucherDetailTemp");
                    }
                }
                else
                {
                    if (userCredentials.IsDebugEnabled == true)
                    {
                        log.Debug("Entering FillVoucherDetailTemp ");
                    }
                }
                #endregion
                CommonFasBL fascommonbl = new CommonFasBL(session);
                VoucherDetailsTemp listVchrTemp = new VoucherDetailsTemp();
                VoucherDetailsTemp objVoucherDetailsTemp = new VoucherDetailsTemp();
                if (amount > 0)
                {
                    Ledger objLedger = new Ledger();
                    objVoucherDetailsTemp.TransactionDate = Convert.ToDateTime(objVchrTransDto.TransactionDate).Date;
                    objVoucherDetailsTemp.ValueDate = Convert.ToDateTime(objVchrTransDto.ValueDate.ToShortDateString() + " " + DateTime.Now.TimeOfDay);
                    objVoucherDetailsTemp.VoucherDetailID = 0;
                    objVoucherDetailsTemp.PacsId = userCredentials.PacsId;
                    objVoucherDetailsTemp.BranchId = userCredentials.BranchId;
                    objVoucherDetailsTemp.IDGeneratorForPacs = userCredentials.PacsId;
                    objVoucherDetailsTemp.SerialNumberOfPacs = userCredentials.PACSSerialNumber;
                    TransactionBL objTransactionBL = new TransactionBL(session);

                    //ranjith
                    if (objVchrTransDto.formid == 90060)
                    {
                        objVoucherDetailsTemp.TransactionID = 90018;
                    }
                    else
                    {
                        objVoucherDetailsTemp.TransactionID = objTransactionBL.GetTransactionID(activityType.PKey);
                        if (objVoucherDetailsTemp.TransactionID == 0)
                        {
                            if (activityType.FinTransactionType.TransactionTypeId == 1)
                            {
                                objVoucherDetailsTemp.TransactionID = 40011;
                            }
                            else
                            {
                                objVoucherDetailsTemp.TransactionID = 40012;
                            }
                        }
                    }
                    #region start log
                    if (log.IsErrorEnabled == true)
                    {
                        if (userCredentials.IsDebugEnabled == true)
                        {
                            log.Error("Entering FillVoucherDetailTemp into GetProductDetailsByslno");
                        }
                    }
                    else
                    {
                        if (userCredentials.IsDebugEnabled == true)
                        {
                            log.Debug("Entering FillVoucherDetailTemp into GetProductDetailsByslno");
                        }
                    }
                    #endregion
                    objVoucherDetailsTemp.ProductId = GetProductDetailsByslno(objVchrTransDto.Product);
                    #region start log
                    if (log.IsErrorEnabled == true)
                    {
                        if (userCredentials.IsDebugEnabled == true)
                        {
                            log.Error("Leave FillVoucherDetailTemp into GetProductDetailsByslno");
                        }
                    }
                    else
                    {
                        if (userCredentials.IsDebugEnabled == true)
                        {
                            log.Debug("Leave FillVoucherDetailTemp into GetProductDetailsByslno");
                        }
                    }
                    #endregion
                    objVoucherDetailsTemp.ProductTypeID = objVoucherDetailsTemp.ProductId.ProductTypeID;// session.Load<ProductTypeMaster>();
                    //objLedger = session.QueryOver<Ledger>().Where(i => i.LedgerId == ledgerid && (i.PacsId == userCredentials.PacsId || i.PacsId == "0") && (i.BranchId == userCredentials.BranchId || i.BranchId == "0")).SingleOrDefault<Ledger>();
                    objLedger = session.Load<Ledger>(ledgerid);
                    objVoucherDetailsTemp.LedgerCode = objLedger;
                    if (!IsSubvention)
                    {
                        AccountDetails objAccountDetails = new AccountDetails();
                        #region start log
                        if (log.IsErrorEnabled == true)
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Error("Entering FillVoucherDetailTemp into GetAccountDetails");
                            }
                        }
                        else
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Entering FillVoucherDetailTemp into GetAccountDetails");
                            }
                        }
                        #endregion
                        objAccountDetails = GetAccountDetails(objVoucherDetailsTemp.ProductId.Slno, objVchrTransDto.AccountNo, userCredentials.PacsId, userCredentials.BranchId, admissionnopkey);
                        #region start log
                        if (log.IsErrorEnabled == true)
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Error("Leave FillVoucherDetailTemp into GetAccountDetails");
                            }
                        }
                        else
                        {
                            if (userCredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Leave FillVoucherDetailTemp into GetAccountDetails");
                            }
                        }
                        #endregion
                        objVoucherDetailsTemp.AccountCode = objAccountDetails;
                        if (transrolid == 1)
                        {
                            objVoucherDetailsTemp.LedgerCode = objAccountDetails.LedgerPKey;
                            objLedger = objVoucherDetailsTemp.AccountCode.LedgerPKey;
                        }
                    }
                    if (objVoucherDetailsTemp.ProductId.ProductCode == 3003 || objVoucherDetailsTemp.ProductId.ProductCode == 3004)
                    {
                        if (transrolid == 1)
                        {
                            objLedger = objVoucherDetailsTemp.AccountCode.LedgerPKey;
                        }
                    }
                    objVoucherDetailsTemp.YearCode = yearcode;
                    if (activityType.FinTransactionType.TransactionTypeId == 1)
                    {
                        objVoucherDetailsTemp.Debit = 0;
                        objVoucherDetailsTemp.Credit = amount;
                    }
                    else
                    {
                        objVoucherDetailsTemp.Debit = amount;
                        objVoucherDetailsTemp.Credit = 0;
                    }

                    #region opening and closing balance
                    if (isParellRun == false)
                    {
                        if (objVoucherDetailsTemp.AccountCode != null)
                        {
                            if (objVoucherDetailsTemp.ProductId.ProductTypeID.ProductTypeID == 3)
                            {
                                if (objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.liabilities))
                                {
                                    if (objVoucherDetailsTemp.LedgerCode.AccountType.AccountTypeID == 1)
                                    {
                                        #region start log
                                        if (log.IsErrorEnabled == true)
                                        {
                                            if (userCredentials.IsDebugEnabled == true)
                                            {
                                                log.Error("Entering FillVoucherDetailTemp into fascommonbl.GetCashBalance");
                                            }
                                        }
                                        else
                                        {
                                            if (userCredentials.IsDebugEnabled == true)
                                            {
                                                log.Debug("Entering FillVoucherDetailTemp into fascommonbl.GetCashBalance");
                                            }
                                        }
                                        #endregion
                                        objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetCashBalance(userCredentials.PacsId, userCredentials.BranchId, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), objVoucherDetailsTemp.YearCode.YearCode, CashBookId, 0);
                                        #region start log
                                        if (log.IsErrorEnabled == true)
                                        {
                                            if (userCredentials.IsDebugEnabled == true)
                                            {
                                                log.Error("Leave FillVoucherDetailTemp into fascommonbl.GetCashBalance objVoucherDetailsTemp.OpeningAmount:" + objVoucherDetailsTemp.OpeningAmount);
                                            }
                                        }
                                        else
                                        {
                                            if (userCredentials.IsDebugEnabled == true)
                                            {
                                                log.Debug("Leave FillVoucherDetailTemp into fascommonbl.GetCashBalance objVoucherDetailsTemp.OpeningAmount:" + objVoucherDetailsTemp.OpeningAmount);
                                            }
                                        }
                                        #endregion
                                    }
                                    else
                                    {
                                        #region start log
                                        if (log.IsErrorEnabled == true)
                                        {
                                            if (userCredentials.IsDebugEnabled == true)
                                            {
                                                log.Error("Entering FillVoucherDetailTemp into fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID ledgercode:" + objVoucherDetailsTemp.LedgerCode.LedgerId);
                                            }
                                        }
                                        else
                                        {
                                            if (userCredentials.IsDebugEnabled == true)
                                            {
                                                log.Debug("Entering FillVoucherDetailTemp into fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID ledgercode:" + objVoucherDetailsTemp.LedgerCode.LedgerId);
                                            }
                                        }
                                        #endregion
                                        objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(objVoucherDetailsTemp.LedgerCode.LedgerId, userCredentials.PacsId, userCredentials.BranchId, objVoucherDetailsTemp.YearCode.YearCode, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId);
                                        #region start log
                                        if (log.IsErrorEnabled == true)
                                        {
                                            if (userCredentials.IsDebugEnabled == true)
                                            {
                                                log.Error("Leave FillVoucherDetailTemp into fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID  objVoucherDetailsTemp.OpeningAmount:" + objVoucherDetailsTemp.OpeningAmount);
                                            }
                                        }
                                        else
                                        {
                                            if (userCredentials.IsDebugEnabled == true)
                                            {
                                                log.Debug("Leave FillVoucherDetailTemp into fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID  objVoucherDetailsTemp.OpeningAmount:" + objVoucherDetailsTemp.OpeningAmount);
                                            }
                                        }
                                        #endregion
                                    }
                                    //objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(objVoucherDetailsTemp.LedgerCode, userCredentials.PacsId, userCredentials.BranchId, objVoucherDetailsTemp.YearCode, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)));
                                }
                                else
                                {
                                    if (objVoucherDetailsTemp.LedgerCode.AccountType.AccountTypeID == 1)
                                    {
                                        #region start log
                                        if (log.IsErrorEnabled == true)
                                        {
                                            if (userCredentials.IsDebugEnabled == true)
                                            {
                                                log.Error("Entering FillVoucherDetailTemp into fascommonbl.GetCashBalance");
                                            }
                                        }
                                        else
                                        {
                                            if (userCredentials.IsDebugEnabled == true)
                                            {
                                                log.Debug("Entering FillVoucherDetailTemp into fascommonbl.GetCashBalance");
                                            }
                                        }
                                        #endregion
                                        objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetCashBalance(userCredentials.PacsId, userCredentials.BranchId, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), objVoucherDetailsTemp.YearCode.YearCode, CashBookId, 0);
                                        #region start log
                                        if (log.IsErrorEnabled == true)
                                        {
                                            if (userCredentials.IsDebugEnabled == true)
                                            {
                                                log.Error("Leave FillVoucherDetailTemp into fascommonbl.GetCashBalance objVoucherDetailsTemp.OpeningAmount:" + objVoucherDetailsTemp.OpeningAmount);
                                            }
                                        }
                                        else
                                        {
                                            if (userCredentials.IsDebugEnabled == true)
                                            {
                                                log.Debug("Leave FillVoucherDetailTemp into fascommonbl.GetCashBalance objVoucherDetailsTemp.OpeningAmount:" + objVoucherDetailsTemp.OpeningAmount);
                                            }
                                        }
                                        #endregion
                                    }
                                    else
                                    {
                                        long accountid = objVoucherDetailsTemp.AccountCode.AccountID;
                                        #region start log
                                        if (log.IsErrorEnabled == true)
                                        {
                                            if (userCredentials.IsDebugEnabled == true)
                                            {
                                                log.Error("Entering FillVoucherDetailTemp into fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID ledgercode:" + objVoucherDetailsTemp.LedgerCode.LedgerId + " accountid:" + accountid);
                                            }
                                        }
                                        else
                                        {
                                            if (userCredentials.IsDebugEnabled == true)
                                            {
                                                log.Debug("Entering FillVoucherDetailTemp into fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID ledgercode:" + objVoucherDetailsTemp.LedgerCode.LedgerId + " accountid:" + accountid);
                                            }
                                        }
                                        #endregion
                                        objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(objVoucherDetailsTemp.LedgerCode.LedgerId, userCredentials.PacsId, userCredentials.BranchId, objVoucherDetailsTemp.YearCode.YearCode, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId, accountid);
                                        #region start log
                                        if (log.IsErrorEnabled == true)
                                        {
                                            if (userCredentials.IsDebugEnabled == true)
                                            {
                                                log.Error("Leave FillVoucherDetailTemp into fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID  objVoucherDetailsTemp.OpeningAmount:" + objVoucherDetailsTemp.OpeningAmount);
                                            }
                                        }
                                        else
                                        {
                                            if (userCredentials.IsDebugEnabled == true)
                                            {
                                                log.Debug("Leave FillVoucherDetailTemp into fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID  objVoucherDetailsTemp.OpeningAmount:" + objVoucherDetailsTemp.OpeningAmount);
                                            }
                                        }
                                        #endregion
                                    }
                                    //objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(objVoucherDetailsTemp.LedgerCode, userCredentials.PacsId, userCredentials.BranchId, objVoucherDetailsTemp.YearCode, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), accountid);
                                }
                            }
                            else
                            {
                                if (objVoucherDetailsTemp.LedgerCode.AccountType.AccountTypeID == 1)
                                {
                                    #region start log
                                    if (log.IsErrorEnabled == true)
                                    {
                                        if (userCredentials.IsDebugEnabled == true)
                                        {
                                            log.Error("Entering FillVoucherDetailTemp into fascommonbl.GetCashBalance");
                                        }
                                    }
                                    else
                                    {
                                        if (userCredentials.IsDebugEnabled == true)
                                        {
                                            log.Debug("Entering FillVoucherDetailTemp into fascommonbl.GetCashBalance");
                                        }
                                    }
                                    #endregion
                                    objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetCashBalance(userCredentials.PacsId, userCredentials.BranchId, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), objVoucherDetailsTemp.YearCode.YearCode, CashBookId, 0);
                                    #region start log
                                    if (log.IsErrorEnabled == true)
                                    {
                                        if (userCredentials.IsDebugEnabled == true)
                                        {
                                            log.Error("Leave FillVoucherDetailTemp into fascommonbl.GetCashBalance objVoucherDetailsTemp.OpeningAmount:" + objVoucherDetailsTemp.OpeningAmount);
                                        }
                                    }
                                    else
                                    {
                                        if (userCredentials.IsDebugEnabled == true)
                                        {
                                            log.Debug("Leave FillVoucherDetailTemp into fascommonbl.GetCashBalance objVoucherDetailsTemp.OpeningAmount:" + objVoucherDetailsTemp.OpeningAmount);
                                        }
                                    }
                                    #endregion
                                }
                                else
                                {
                                    long accountid = objVoucherDetailsTemp.AccountCode.AccountID;
                                    #region start log
                                    if (log.IsErrorEnabled == true)
                                    {
                                        if (userCredentials.IsDebugEnabled == true)
                                        {
                                            log.Error("Entering FillVoucherDetailTemp into fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID ledgercode:" + objVoucherDetailsTemp.LedgerCode.LedgerId + " accountid:" + accountid);
                                        }
                                    }
                                    else
                                    {
                                        if (userCredentials.IsDebugEnabled == true)
                                        {
                                            log.Debug("Entering FillVoucherDetailTemp into fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID ledgercode:" + objVoucherDetailsTemp.LedgerCode.LedgerId + " accountid:" + accountid);
                                        }
                                    }
                                    #endregion
                                    objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(objVoucherDetailsTemp.LedgerCode.LedgerId, userCredentials.PacsId, userCredentials.BranchId, objVoucherDetailsTemp.YearCode.YearCode, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId, accountid);
                                    #region start log
                                    if (log.IsErrorEnabled == true)
                                    {
                                        if (userCredentials.IsDebugEnabled == true)
                                        {
                                            log.Error("Leave FillVoucherDetailTemp into fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID  objVoucherDetailsTemp.OpeningAmount:" + objVoucherDetailsTemp.OpeningAmount);
                                        }
                                    }
                                    else
                                    {
                                        if (userCredentials.IsDebugEnabled == true)
                                        {
                                            log.Debug("Leave FillVoucherDetailTemp into fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID  objVoucherDetailsTemp.OpeningAmount:" + objVoucherDetailsTemp.OpeningAmount);
                                        }
                                    }
                                    #endregion
                                }
                                //objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(objVoucherDetailsTemp.LedgerCode, userCredentials.PacsId, userCredentials.BranchId, objVoucherDetailsTemp.YearCode, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), accountid);
                            }
                        }
                        else
                        {
                            if (objVoucherDetailsTemp.LedgerCode.AccountType.AccountTypeID == 1)
                            {
                                #region start log
                                if (log.IsErrorEnabled == true)
                                {
                                    if (userCredentials.IsDebugEnabled == true)
                                    {
                                        log.Error("Entering FillVoucherDetailTemp into fascommonbl.GetCashBalance");
                                    }
                                }
                                else
                                {
                                    if (userCredentials.IsDebugEnabled == true)
                                    {
                                        log.Debug("Entering FillVoucherDetailTemp into fascommonbl.GetCashBalance");
                                    }
                                }
                                #endregion
                                objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetCashBalance(userCredentials.PacsId, userCredentials.BranchId, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), objVoucherDetailsTemp.YearCode.YearCode, CashBookId, 0);
                                #region start log
                                if (log.IsErrorEnabled == true)
                                {
                                    if (userCredentials.IsDebugEnabled == true)
                                    {
                                        log.Error("Leave FillVoucherDetailTemp into fascommonbl.GetCashBalance objVoucherDetailsTemp.OpeningAmount:" + objVoucherDetailsTemp.OpeningAmount);
                                    }
                                }
                                else
                                {
                                    if (userCredentials.IsDebugEnabled == true)
                                    {
                                        log.Debug("Leave FillVoucherDetailTemp into fascommonbl.GetCashBalance objVoucherDetailsTemp.OpeningAmount:" + objVoucherDetailsTemp.OpeningAmount);
                                    }
                                }
                                #endregion
                            }
                            else
                            {
                                #region start log
                                if (log.IsErrorEnabled == true)
                                {
                                    if (userCredentials.IsDebugEnabled == true)
                                    {
                                        log.Error("Entering FillVoucherDetailTemp into fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID ledgercode:" + objVoucherDetailsTemp.LedgerCode.LedgerId);
                                    }
                                }
                                else
                                {
                                    if (userCredentials.IsDebugEnabled == true)
                                    {
                                        log.Debug("Entering FillVoucherDetailTemp into fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID ledgercode:" + objVoucherDetailsTemp.LedgerCode.LedgerId);
                                    }
                                }
                                #endregion
                                objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(objVoucherDetailsTemp.LedgerCode.LedgerId, userCredentials.PacsId, userCredentials.BranchId, objVoucherDetailsTemp.YearCode.YearCode, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId);
                                #region start log
                                if (log.IsErrorEnabled == true)
                                {
                                    if (userCredentials.IsDebugEnabled == true)
                                    {
                                        log.Error("Leave FillVoucherDetailTemp into fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID  objVoucherDetailsTemp.OpeningAmount:" + objVoucherDetailsTemp.OpeningAmount);
                                    }
                                }
                                else
                                {
                                    if (userCredentials.IsDebugEnabled == true)
                                    {
                                        log.Debug("Leave FillVoucherDetailTemp into fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID  objVoucherDetailsTemp.OpeningAmount:" + objVoucherDetailsTemp.OpeningAmount);
                                    }
                                }
                                #endregion
                            }
                            //objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(objVoucherDetailsTemp.LedgerCode, userCredentials.PacsId, userCredentials.BranchId, objVoucherDetailsTemp.YearCode, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)));
                            //listVoucherDetail = session.QueryOver<VoucherDetails>().Where(i => i.LedgerCode == vdm.LedgerCode  && i.PacsId == Vd.PacsId && i.BranchId == Vd.BranchId).List<VoucherDetails>();
                        }
                        if (objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.liabilities) || objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.income))
                        {
                            objVoucherDetailsTemp.BalanceAmount = objVoucherDetailsTemp.OpeningAmount + objVoucherDetailsTemp.Credit - objVoucherDetailsTemp.Debit;
                        }
                        else if (objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.asset) || objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.Expenditure))
                        {
                            objVoucherDetailsTemp.BalanceAmount = objVoucherDetailsTemp.OpeningAmount - objVoucherDetailsTemp.Credit + objVoucherDetailsTemp.Debit;
                        }
                    }
                    #endregion opening and closing balance
                    objVoucherDetailsTemp.CashBookId = userCredentials.CashBookId;
                    objVoucherDetailsTemp.Narration = objVchrTransDto.Narration; //"share deposit"; //GetNarrationTemplateDetails(104).DebitCashNarration;
                    objVoucherDetailsTemp.TransrollID = transrolid;
                    objVoucherDetailsTemp.NarrationForPassBookPrint = objVchrTransDto.NarrationForSBTransactions;
                    if (objVchrTransDto.IsBackDateTransaction)
                    {
                        objVoucherDetailsTemp.BackDateTransactionDate = System.DateTime.Now;
                        objVoucherDetailsTemp.IsBackDateTransaction = true;
                    }
                    else
                    {
                        objVoucherDetailsTemp.BackDateTransactionDate = null;
                        objVoucherDetailsTemp.IsBackDateTransaction = false;
                    }

                    // 10011;//(GetTransactionActivitiesDetails(10011, 1001)).Moduleactivityid;

                }

                return objVoucherDetailsTemp;
            }
            catch (Exception ex)
            {
                log.Error(ex);
                return null;
            }
        }


        #region Voucher For Noncumulative penalty
        /// <summary>
        /// Voucher For Noncumulative penalty
        /// </summary>
        /// <param name="objVchrTransDto"></param>
        /// <param name="userCredentials"></param>
        /// <param name="yearcode"></param>
        /// <param name="activityType"></param>
        /// <returns></returns>
        private VoucherDetailsTemp FillVoucherDetailTempNonCumPenaltyDepositAmountDebit(TransactionDTO objVchrTransDto, UserCredentials userCredentials, FinancialYearMaster yearcode, ProductWiseActivities activityType, decimal amount, long ledgerid, int transrolid, long CashBookId, bool IsSubvention, long admissionnopkey, bool isParellelRun = false)
        {
            try
            {
                CommonFasBL fascommonbl = new CommonFasBL(session);
                VoucherDetailsTemp listVchrTemp = new VoucherDetailsTemp();
                VoucherDetailsTemp objVoucherDetailsTemp = new VoucherDetailsTemp();
                if (amount > 0)
                {


                    Ledger objLedger = new Ledger();
                    objVoucherDetailsTemp.TransactionDate = Convert.ToDateTime(objVchrTransDto.TransactionDate).Date;
                    objVoucherDetailsTemp.ValueDate = Convert.ToDateTime(objVchrTransDto.ValueDate.ToShortDateString() + " " + DateTime.Now.TimeOfDay);
                    objVoucherDetailsTemp.VoucherDetailID = 0;
                    objVoucherDetailsTemp.PacsId = userCredentials.PacsId;
                    objVoucherDetailsTemp.BranchId = userCredentials.BranchId;
                    objVoucherDetailsTemp.IDGeneratorForPacs = userCredentials.PacsId;
                    objVoucherDetailsTemp.SerialNumberOfPacs = userCredentials.PACSSerialNumber;
                    TransactionBL objTransactionBL = new TransactionBL(session);

                    objVoucherDetailsTemp.ProductId = GetProductDetailsByslno(objVchrTransDto.Product);
                    objVoucherDetailsTemp.ProductTypeID = objVoucherDetailsTemp.ProductId.ProductTypeID;// session.Load<ProductTypeMaster>();
                    objLedger = session.QueryOver<Ledger>().Where(i => i.LedgerId == ledgerid && (i.PacsId == userCredentials.PacsId || i.PacsId == 0) && (i.BranchId == userCredentials.BranchId || i.BranchId == 0)).SingleOrDefault<Ledger>();
                    AccountDetails objAccountDetails = new AccountDetails();
                    if (!IsSubvention)
                    {
                        objAccountDetails = GetAccountDetails(objVoucherDetailsTemp.ProductId.Slno, objVchrTransDto.AccountNo, userCredentials.PacsId, userCredentials.BranchId, admissionnopkey);
                        objVoucherDetailsTemp.AccountCode = objAccountDetails;
                    }
                    if (objVoucherDetailsTemp.ProductId.ProductCode == 3003 || objVoucherDetailsTemp.ProductId.ProductCode == 3004)
                    {
                        if (transrolid == 1)
                        {
                            objLedger = objVoucherDetailsTemp.AccountCode.LedgerPKey; ;
                        }
                    }
                    objVoucherDetailsTemp.YearCode = yearcode;

                    objVoucherDetailsTemp.Debit = objVchrTransDto.NonCumulativePenalty;
                    objVoucherDetailsTemp.Credit = 0;
                    objVoucherDetailsTemp.LedgerCode = objAccountDetails.LedgerPKey;
                    //listVoucherDetail = new List<VoucherDetails>();
                    if (objVoucherDetailsTemp.AccountCode != null)
                    {
                        if (isParellelRun == false)
                        {
                            if (objVoucherDetailsTemp.ProductId.ProductTypeID.ProductTypeID == 3)
                            {
                                if (objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.liabilities))
                                {
                                    if (objVoucherDetailsTemp.LedgerCode.AccountType.AccountTypeID == 1)
                                    {
                                        objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetCashBalance(userCredentials.PacsId, userCredentials.BranchId, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), objVoucherDetailsTemp.YearCode.YearCode, CashBookId, 0);
                                    }
                                    else
                                    {
                                        objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(objVoucherDetailsTemp.LedgerCode.LedgerId, userCredentials.PacsId, userCredentials.BranchId, objVoucherDetailsTemp.YearCode.YearCode, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId);
                                    }
                                    //objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(objVoucherDetailsTemp.LedgerCode, userCredentials.PacsId, userCredentials.BranchId, objVoucherDetailsTemp.YearCode, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)));
                                }
                                else
                                {
                                    if (objVoucherDetailsTemp.LedgerCode.AccountType.AccountTypeID == 1)
                                    {
                                        objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetCashBalance(userCredentials.PacsId, userCredentials.BranchId, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), objVoucherDetailsTemp.YearCode.YearCode, CashBookId, 0);
                                    }
                                    else
                                    {
                                        long accountid = objVoucherDetailsTemp.AccountCode.AccountID;
                                        objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(objVoucherDetailsTemp.LedgerCode.LedgerId, userCredentials.PacsId, userCredentials.BranchId, objVoucherDetailsTemp.YearCode.YearCode, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId, accountid);
                                    }
                                    //objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(objVoucherDetailsTemp.LedgerCode, userCredentials.PacsId, userCredentials.BranchId, objVoucherDetailsTemp.YearCode, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), accountid);
                                }
                            }
                            else
                            {
                                if (objVoucherDetailsTemp.LedgerCode.AccountType.AccountTypeID == 1)
                                {
                                    objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetCashBalance(userCredentials.PacsId, userCredentials.BranchId, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), objVoucherDetailsTemp.YearCode.YearCode, CashBookId, 0);
                                }
                                else
                                {
                                    long accountid = objVoucherDetailsTemp.AccountCode.AccountID;
                                    objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(objVoucherDetailsTemp.LedgerCode.LedgerId, userCredentials.PacsId, userCredentials.BranchId, objVoucherDetailsTemp.YearCode.YearCode, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId, accountid);
                                }
                                //objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(objVoucherDetailsTemp.LedgerCode, userCredentials.PacsId, userCredentials.BranchId, objVoucherDetailsTemp.YearCode, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), accountid);
                            }
                        }
                        else
                        {
                            if (objVoucherDetailsTemp.LedgerCode.AccountType.AccountTypeID == 1)
                            {
                                objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetCashBalance(userCredentials.PacsId, userCredentials.BranchId, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), objVoucherDetailsTemp.YearCode.YearCode, CashBookId, 0);
                            }
                            else
                            {
                                objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(objVoucherDetailsTemp.LedgerCode.LedgerId, userCredentials.PacsId, userCredentials.BranchId, objVoucherDetailsTemp.YearCode.YearCode, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId);
                            }
                            //objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(objVoucherDetailsTemp.LedgerCode, userCredentials.PacsId, userCredentials.BranchId, objVoucherDetailsTemp.YearCode, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)));
                            //listVoucherDetail = session.QueryOver<VoucherDetails>().Where(i => i.LedgerCode == vdm.LedgerCode  && i.PacsId == Vd.PacsId && i.BranchId == Vd.BranchId).List<VoucherDetails>();
                        }
                        if (objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.liabilities) || objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.income))
                        {
                            objVoucherDetailsTemp.BalanceAmount = objVoucherDetailsTemp.OpeningAmount + objVoucherDetailsTemp.Credit - objVoucherDetailsTemp.Debit;
                        }
                        else if (objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.asset) || objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.Expenditure))
                        {
                            objVoucherDetailsTemp.BalanceAmount = objVoucherDetailsTemp.OpeningAmount - objVoucherDetailsTemp.Credit + objVoucherDetailsTemp.Debit;
                        }
                    }
                    objVoucherDetailsTemp.CashBookId = CashBookId;
                    objVoucherDetailsTemp.Narration = objVchrTransDto.Narration; //"share deposit"; //GetNarrationTemplateDetails(104).DebitCashNarration;
                    objVoucherDetailsTemp.TransrollID = transrolid;
                    objVoucherDetailsTemp.NarrationForPassBookPrint = objVchrTransDto.NarrationForSBTransactions;
                    if (objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.asset) || objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.liabilities))
                    {
                        if (objVoucherDetailsTemp.BalanceAmount < 0)
                        {

                        }
                    }

                    // 10011;//(GetTransactionActivitiesDetails(10011, 1001)).Moduleactivityid;

                }

                return objVoucherDetailsTemp;
            }
            catch (Exception ex)
            {
                ////TransactionErrorLogBL.TrackErrorLog(ex.Message, GlobalUserCredentials);
                log.Error(ex);
                return null;
            }
        }

        /// <summary>
        /// Voucher For Noncumulative penalty
        /// </summary>
        /// <param name="objVchrTransDto"></param>
        /// <param name="userCredentials"></param>
        /// <param name="yearcode"></param>
        /// <param name="activityType"></param>
        /// <returns></returns>
        private VoucherDetailsTemp FillVoucherDetailTempNonCumPenaltyExcessInterestCredit(TransactionDTO objVchrTransDto, UserCredentials userCredentials, FinancialYearMaster yearcode, ProductWiseActivities activityType, decimal amount, long ledgerid, int transrolid, long CashBookId, bool IsSubvention, long admissionnopkey, bool isParellelRun = false)
        {
            try
            {
                CommonFasBL fascommonbl = new CommonFasBL(session);
                VoucherDetailsTemp listVchrTemp = new VoucherDetailsTemp();
                VoucherDetailsTemp objVoucherDetailsTemp = new VoucherDetailsTemp();
                if (amount > 0)
                {


                    Ledger objLedger = new Ledger();
                    objVoucherDetailsTemp.TransactionDate = Convert.ToDateTime(objVchrTransDto.TransactionDate).Date;
                    objVoucherDetailsTemp.ValueDate = Convert.ToDateTime(objVchrTransDto.ValueDate.ToShortDateString() + " " + DateTime.Now.TimeOfDay);
                    objVoucherDetailsTemp.VoucherDetailID = 0;
                    objVoucherDetailsTemp.PacsId = userCredentials.PacsId;
                    objVoucherDetailsTemp.BranchId = userCredentials.BranchId;
                    objVoucherDetailsTemp.IDGeneratorForPacs = userCredentials.PacsId;
                    objVoucherDetailsTemp.SerialNumberOfPacs = userCredentials.PACSSerialNumber;
                    TransactionBL objTransactionBL = new TransactionBL(session);

                    //ranjith
                    if (objVchrTransDto.formid == 90060)
                    {
                        objVoucherDetailsTemp.TransactionID = 90018;
                    }
                    else
                    {
                        objVoucherDetailsTemp.TransactionID = objTransactionBL.GetTransactionID(activityType.PKey);
                        if (objVoucherDetailsTemp.TransactionID == 0)
                        {
                            if (activityType.FinTransactionType.TransactionTypeId == 1)
                            {
                                objVoucherDetailsTemp.TransactionID = 40011;
                            }
                            else
                            {
                                objVoucherDetailsTemp.TransactionID = 40012;
                            }
                        }
                    }
                    objVoucherDetailsTemp.ProductId = GetProductDetailsByslno(objVchrTransDto.Product);
                    objVoucherDetailsTemp.ProductTypeID = objVoucherDetailsTemp.ProductId.ProductTypeID;// session.Load<ProductTypeMaster>();
                    objLedger = session.QueryOver<Ledger>().Where(i => i.LedgerId == 155).SingleOrDefault<Ledger>();
                    if (!IsSubvention)
                    {
                        AccountDetails objAccountDetails = new AccountDetails();
                        objAccountDetails = GetAccountDetails(objVoucherDetailsTemp.ProductId.Slno, objVchrTransDto.AccountNo, userCredentials.PacsId, userCredentials.BranchId, admissionnopkey);
                        objVoucherDetailsTemp.AccountCode = objAccountDetails;
                    }
                    if (objVoucherDetailsTemp.ProductId.ProductCode == 3003 || objVoucherDetailsTemp.ProductId.ProductCode == 3004)
                    {
                        if (transrolid == 1)
                        {
                            objLedger = objVoucherDetailsTemp.AccountCode.LedgerPKey; ;
                        }
                    }
                    objVoucherDetailsTemp.YearCode = yearcode;

                    objVoucherDetailsTemp.Debit = 0;
                    objVoucherDetailsTemp.Credit = objVchrTransDto.NonCumulativePenalty;
                    objVoucherDetailsTemp.LedgerCode = objLedger;
                    //listVoucherDetail = new List<VoucherDetails>();
                    if (objVoucherDetailsTemp.AccountCode != null)
                    {
                        if (isParellelRun == false)
                        {
                            if (objVoucherDetailsTemp.ProductId.ProductTypeID.ProductTypeID == 3)
                            {
                                if (objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.liabilities))
                                {
                                    if (objVoucherDetailsTemp.LedgerCode.AccountType.AccountTypeID == 1)
                                    {
                                        objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetCashBalance(userCredentials.PacsId, userCredentials.BranchId, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), objVoucherDetailsTemp.YearCode.YearCode, CashBookId, 0);
                                    }
                                    else
                                    {
                                        objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(objVoucherDetailsTemp.LedgerCode.LedgerId, userCredentials.PacsId, userCredentials.BranchId, objVoucherDetailsTemp.YearCode.YearCode, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId);
                                    }
                                    //objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(objVoucherDetailsTemp.LedgerCode, userCredentials.PacsId, userCredentials.BranchId, objVoucherDetailsTemp.YearCode, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)));
                                }
                                else
                                {
                                    if (objVoucherDetailsTemp.LedgerCode.AccountType.AccountTypeID == 1)
                                    {
                                        objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetCashBalance(userCredentials.PacsId, userCredentials.BranchId, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), objVoucherDetailsTemp.YearCode.YearCode, CashBookId, 0);
                                    }
                                    else
                                    {
                                        long accountid = objVoucherDetailsTemp.AccountCode.AccountID;
                                        objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(objVoucherDetailsTemp.LedgerCode.LedgerId, userCredentials.PacsId, userCredentials.BranchId, objVoucherDetailsTemp.YearCode.YearCode, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId, accountid);
                                    }
                                    //objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(objVoucherDetailsTemp.LedgerCode, userCredentials.PacsId, userCredentials.BranchId, objVoucherDetailsTemp.YearCode, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), accountid);
                                }
                            }
                            else
                            {
                                if (objVoucherDetailsTemp.LedgerCode.AccountType.AccountTypeID == 1)
                                {
                                    objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetCashBalance(userCredentials.PacsId, userCredentials.BranchId, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), objVoucherDetailsTemp.YearCode.YearCode, CashBookId, 0);
                                }
                                else
                                {
                                    long accountid = objVoucherDetailsTemp.AccountCode.AccountID;
                                    objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(objVoucherDetailsTemp.LedgerCode.LedgerId, userCredentials.PacsId, userCredentials.BranchId, objVoucherDetailsTemp.YearCode.YearCode, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId, accountid);
                                }
                                //objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(objVoucherDetailsTemp.LedgerCode, userCredentials.PacsId, userCredentials.BranchId, objVoucherDetailsTemp.YearCode, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), accountid);
                            }
                        }
                        else
                        {
                            if (objVoucherDetailsTemp.LedgerCode.AccountType.AccountTypeID == 1)
                            {
                                objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetCashBalance(userCredentials.PacsId, userCredentials.BranchId, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), objVoucherDetailsTemp.YearCode.YearCode, CashBookId, 0);
                            }
                            else
                            {
                                objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(objVoucherDetailsTemp.LedgerCode.LedgerId, userCredentials.PacsId, userCredentials.BranchId, objVoucherDetailsTemp.YearCode.YearCode, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId);
                            }
                            //objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(objVoucherDetailsTemp.LedgerCode, userCredentials.PacsId, userCredentials.BranchId, objVoucherDetailsTemp.YearCode, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)));
                            //listVoucherDetail = session.QueryOver<VoucherDetails>().Where(i => i.LedgerCode == vdm.LedgerCode  && i.PacsId == Vd.PacsId && i.BranchId == Vd.BranchId).List<VoucherDetails>();
                        }
                        if (objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.liabilities) || objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.income))
                        {
                            objVoucherDetailsTemp.BalanceAmount = objVoucherDetailsTemp.OpeningAmount + objVoucherDetailsTemp.Credit - objVoucherDetailsTemp.Debit;
                        }
                        else if (objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.asset) || objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.Expenditure))
                        {
                            objVoucherDetailsTemp.BalanceAmount = objVoucherDetailsTemp.OpeningAmount - objVoucherDetailsTemp.Credit + objVoucherDetailsTemp.Debit;
                        }
                    }
                    objVoucherDetailsTemp.CashBookId = CashBookId;
                    objVoucherDetailsTemp.Narration = objVchrTransDto.Narration; //"share deposit"; //GetNarrationTemplateDetails(104).DebitCashNarration;
                    objVoucherDetailsTemp.TransrollID = transrolid;
                    objVoucherDetailsTemp.NarrationForPassBookPrint = objVchrTransDto.NarrationForSBTransactions;


                    // 10011;//(GetTransactionActivitiesDetails(10011, 1001)).Moduleactivityid;

                }

                return objVoucherDetailsTemp;
            }
            catch (Exception ex)
            {
                ////TransactionErrorLogBL.TrackErrorLog(ex.Message, GlobalUserCredentials);
                log.Error(ex);
                return null;
            }
        }
        #endregion

        /// <summary>
        /// 
        /// </summary>
        /// <param name="objVchrTransDto"></param>
        /// <param name="userCredentials"></param>
        /// <param name="yearcode"></param>
        /// <param name="activityType"></param>
        /// <returns></returns>
        private VoucherDetailsTemp FillVoucherDetailTempCash(TransactionDTO objVchrTransDto, UserCredentials userCredentials, FinancialYearMaster yearcode, ProductWiseActivities activityType, long CashBookId, bool IsForSubvention, long admissionnopkey, bool isParellRun = false)
        {
            try
            {
                CommonFasBL fascommonbl = new CommonFasBL(session);
                VoucherDetailsTemp VchrContraDetailsTemp = new VoucherDetailsTemp();
                VchrContraDetailsTemp.ProductId = GetProductDetailsByslno(objVchrTransDto.Product);
                VchrContraDetailsTemp.ProductTypeID = VchrContraDetailsTemp.ProductId.ProductTypeID;// session.Load<ProductTypeMaster>(objVoucherDetailsTemp.ProductId.ProductTypeID);
                Ledger objLedger = GetLedgerDetails(VchrContraDetailsTemp.ProductId.Slno, 99, userCredentials.PacsId, userCredentials.BranchId);
                VchrContraDetailsTemp.LedgerCode = objLedger;
                if (!IsForSubvention)
                {
                    AccountDetails objAccountDetails = GetAccountDetails(VchrContraDetailsTemp.ProductId.Slno, objVchrTransDto.AccountNo, userCredentials.PacsId, userCredentials.BranchId, admissionnopkey);
                    VchrContraDetailsTemp.AccountCode = objAccountDetails;

                    if (yearcode != null)
                    {
                        VchrContraDetailsTemp.YearCode = yearcode;
                    }
                    else
                    {
                        VchrContraDetailsTemp.YearCode = GetFinancialYearCode(objVchrTransDto.TransactionDate);
                    }

                }
                if (activityType.FinTransactionType.TransactionTypeId == 1)
                {
                    VchrContraDetailsTemp.Debit = listTransaction.Sum(i => i.Amount);
                    VchrContraDetailsTemp.Credit = 0;
                }
                else
                {
                    VchrContraDetailsTemp.Debit = 0;
                    VchrContraDetailsTemp.Credit = listTransaction.Sum(i => i.Amount);
                }
                IList<VoucherDetailsTemp> listVoucherDetailTemp = new List<VoucherDetailsTemp>();
                if (isParellRun == false)
                {
                    if (VchrContraDetailsTemp.AccountCode != null && objLedger.AccountType.AccountTypeID != 1)//cash
                    {
                        if (VchrContraDetailsTemp.LedgerCode.AccountType.AccountTypeID == 1)
                        {
                            #region start log
                            if (log.IsErrorEnabled == true)
                            {
                                if (userCredentials.IsDebugEnabled == true)
                                {
                                    log.Error("Entering FillVoucherDetailTempCash into fascommonbl.GetCashBalance");
                                }
                            }
                            else
                            {
                                if (userCredentials.IsDebugEnabled == true)
                                {
                                    log.Debug("Entering FillVoucherDetailTempCash into fascommonbl.GetCashBalance");
                                }
                            }
                            #endregion
                            VchrContraDetailsTemp.OpeningAmount = fascommonbl.GetCashBalance(userCredentials.PacsId, userCredentials.BranchId, Convert.ToDateTime(objVchrTransDto.TransactionDate.AddDays(1)), VchrContraDetailsTemp.YearCode.YearCode, CashBookId, 0);
                            #region start log
                            if (log.IsErrorEnabled == true)
                            {
                                if (userCredentials.IsDebugEnabled == true)
                                {
                                    log.Error("Leave FillVoucherDetailTempCash into fascommonbl.GetCashBalance VchrContraDetailsTemp.OpeningAmount:" + VchrContraDetailsTemp.OpeningAmount);
                                }
                            }
                            else
                            {
                                if (userCredentials.IsDebugEnabled == true)
                                {
                                    log.Debug("Leave FillVoucherDetailTempCash into fascommonbl.GetCashBalance VchrContraDetailsTemp.OpeningAmount:" + VchrContraDetailsTemp.OpeningAmount);
                                }
                            }
                            #endregion
                        }
                        else
                        {
                            #region start log
                            if (log.IsErrorEnabled == true)
                            {
                                if (userCredentials.IsDebugEnabled == true)
                                {
                                    log.Error("Entering FillVoucherDetailTempCash into fascommonbl.GetCashBalance");
                                }
                            }
                            else
                            {
                                if (userCredentials.IsDebugEnabled == true)
                                {
                                    log.Debug("Entering FillVoucherDetailTempCash into fascommonbl.GetCashBalance");
                                }
                            }
                            #endregion
                            VchrContraDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(VchrContraDetailsTemp.LedgerCode.LedgerId, userCredentials.PacsId, userCredentials.BranchId, VchrContraDetailsTemp.YearCode.YearCode, Convert.ToDateTime(objVchrTransDto.TransactionDate.AddDays(1)), VchrContraDetailsTemp.LedgerCode.LedgerType.LedgerTypeId, VchrContraDetailsTemp.AccountCode.AccountID, VchrContraDetailsTemp.LedgerCode.AccountType.AccountTypeID);
                            #region start log
                            if (log.IsErrorEnabled == true)
                            {
                                if (userCredentials.IsDebugEnabled == true)
                                {
                                    log.Error("Leave FillVoucherDetailTempCash into fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID VchrContraDetailsTemp.OpeningAmount:" + VchrContraDetailsTemp.OpeningAmount);
                                }
                            }
                            else
                            {
                                if (userCredentials.IsDebugEnabled == true)
                                {
                                    log.Debug("Leave FillVoucherDetailTempCash into fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID VchrContraDetailsTemp.OpeningAmount:" + VchrContraDetailsTemp.OpeningAmount);
                                }
                            }
                            #endregion
                        }
                        //VchrContraDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(VchrContraDetailsTemp.LedgerCode, userCredentials.PacsId, userCredentials.BranchId, VchrContraDetailsTemp.YearCode, Convert.ToDateTime(objVchrTransDto.TransactionDate.AddDays(1)), VchrContraDetailsTemp.AccountCode.AccountID);
                    }
                    else
                    {
                        if (VchrContraDetailsTemp.LedgerCode.AccountType.AccountTypeID == 1)
                        {
                            #region start log
                            if (log.IsErrorEnabled == true)
                            {
                                if (userCredentials.IsDebugEnabled == true)
                                {
                                    log.Error("Entering FillVoucherDetailTempCash into fascommonbl.GetCashBalance");
                                }
                            }
                            else
                            {
                                if (userCredentials.IsDebugEnabled == true)
                                {
                                    log.Debug("Entering FillVoucherDetailTempCash into fascommonbl.GetCashBalance");
                                }
                            }
                            #endregion
                            VchrContraDetailsTemp.OpeningAmount = fascommonbl.GetCashBalance(userCredentials.PacsId, userCredentials.BranchId, Convert.ToDateTime(objVchrTransDto.TransactionDate.AddDays(1)), VchrContraDetailsTemp.YearCode.YearCode, CashBookId, 0);
                            #region start log
                            if (log.IsErrorEnabled == true)
                            {
                                if (userCredentials.IsDebugEnabled == true)
                                {
                                    log.Error("Leave FillVoucherDetailTempCash into fascommonbl.GetCashBalance VchrContraDetailsTemp.OpeningAmount:" + VchrContraDetailsTemp.OpeningAmount);
                                }
                            }
                            else
                            {
                                if (userCredentials.IsDebugEnabled == true)
                                {
                                    log.Debug("Leave FillVoucherDetailTempCash into fascommonbl.GetCashBalance VchrContraDetailsTemp.OpeningAmount:" + VchrContraDetailsTemp.OpeningAmount);
                                }
                            }
                            #endregion
                        }
                        else
                        {
                            #region start log
                            if (log.IsErrorEnabled == true)
                            {
                                if (userCredentials.IsDebugEnabled == true)
                                {
                                    log.Error("Entering FillVoucherDetailTempCash into fascommonbl.GetCashBalance");
                                }
                            }
                            else
                            {
                                if (userCredentials.IsDebugEnabled == true)
                                {
                                    log.Debug("Entering FillVoucherDetailTempCash into fascommonbl.GetCashBalance");
                                }
                            }
                            #endregion
                            VchrContraDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(VchrContraDetailsTemp.LedgerCode.LedgerId, userCredentials.PacsId, userCredentials.BranchId, VchrContraDetailsTemp.YearCode.YearCode, Convert.ToDateTime(objVchrTransDto.TransactionDate.AddDays(1)), VchrContraDetailsTemp.LedgerCode.LedgerType.LedgerTypeId, 0, VchrContraDetailsTemp.LedgerCode.AccountType.AccountTypeID);
                            #region start log
                            if (log.IsErrorEnabled == true)
                            {
                                if (userCredentials.IsDebugEnabled == true)
                                {
                                    log.Error("Leave FillVoucherDetailTempCash into fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID VchrContraDetailsTemp.OpeningAmount:" + VchrContraDetailsTemp.OpeningAmount);
                                }
                            }
                            else
                            {
                                if (userCredentials.IsDebugEnabled == true)
                                {
                                    log.Debug("Leave FillVoucherDetailTempCash into fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID VchrContraDetailsTemp.OpeningAmount:" + VchrContraDetailsTemp.OpeningAmount);
                                }
                            }
                            #endregion
                        }
                        //VchrContraDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(VchrContraDetailsTemp.LedgerCode, userCredentials.PacsId, userCredentials.BranchId, VchrContraDetailsTemp.YearCode, Convert.ToDateTime(objVchrTransDto.TransactionDate.AddDays(1)));
                        //listVoucherDetail = session.QueryOver<VoucherDetails>().Where(i => i.LedgerCode == vdm.LedgerCode  && i.PacsId == Vd.PacsId && i.BranchId == Vd.BranchId).List<VoucherDetails>();
                    }
                    if (VchrContraDetailsTemp.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.liabilities))
                    {
                        VchrContraDetailsTemp.BalanceAmount = VchrContraDetailsTemp.OpeningAmount + VchrContraDetailsTemp.Credit - VchrContraDetailsTemp.Debit;
                    }
                    else if (VchrContraDetailsTemp.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.asset))
                    {
                        VchrContraDetailsTemp.BalanceAmount = VchrContraDetailsTemp.OpeningAmount - VchrContraDetailsTemp.Credit + VchrContraDetailsTemp.Debit;
                    }
                }
                VchrContraDetailsTemp.Narration = "Cash"; //objVchrTransDto.Narration;
                VchrContraDetailsTemp.TransrollID = 99;
                VchrContraDetailsTemp.TransactionDate = Convert.ToDateTime(objVchrTransDto.TransactionDate).Date;
                VchrContraDetailsTemp.ValueDate = Convert.ToDateTime(objVchrTransDto.ValueDate.ToShortDateString() + " " + DateTime.Now.TimeOfDay);
                VchrContraDetailsTemp.VoucherDetailID = 0;
                VchrContraDetailsTemp.CashBookId = CashBookId;
                VchrContraDetailsTemp.PacsId = userCredentials.PacsId;
                VchrContraDetailsTemp.BranchId = userCredentials.BranchId;
                VchrContraDetailsTemp.IDGeneratorForPacs = userCredentials.PacsId;
                VchrContraDetailsTemp.SerialNumberOfPacs = userCredentials.PACSSerialNumber;
                if (objVchrTransDto.IsBackDateTransaction)
                {
                    VchrContraDetailsTemp.BackDateTransactionDate = System.DateTime.Now;
                    VchrContraDetailsTemp.IsBackDateTransaction = true;
                }
                else
                {
                    VchrContraDetailsTemp.BackDateTransactionDate = null;
                    VchrContraDetailsTemp.IsBackDateTransaction = false;
                }
                TransactionBL objTransactionBL = new TransactionBL(session);
                #region start log
                if (log.IsErrorEnabled == true)
                {
                    if (userCredentials.IsDebugEnabled == true)
                    {
                        log.Error("Entering FillVoucherDetailTempCash into objTransactionBL.GetTransactionID");
                    }
                }
                else
                {
                    if (userCredentials.IsDebugEnabled == true)
                    {
                        log.Debug("Entering FillVoucherDetailTempCash into objTransactionBL.GetTransactionID");
                    }
                }
                #endregion
                VchrContraDetailsTemp.TransactionID = objTransactionBL.GetTransactionID(objVchrTransDto.ActivityType);// 10011;// Convert.ToInt64(voucherprocessing.VoucherProcessing.VoucherProcessingId);// 10011;
                #region start log
                if (log.IsErrorEnabled == true)
                {
                    if (userCredentials.IsDebugEnabled == true)
                    {
                        log.Error("Leave FillVoucherDetailTempCash into objTransactionBL.GetTransactionID");
                    }
                }
                else
                {
                    if (userCredentials.IsDebugEnabled == true)
                    {
                        log.Debug("Leave FillVoucherDetailTempCash into objTransactionBL.GetTransactionID");
                    }
                }
                #endregion
                if (VchrContraDetailsTemp.TransactionID == 0)
                {
                    if (activityType.FinTransactionType.TransactionTypeId == 1)
                    {
                        VchrContraDetailsTemp.TransactionID = 40011;
                    }
                    else
                    {
                        VchrContraDetailsTemp.TransactionID = 40012;
                    }
                }

                return VchrContraDetailsTemp;
            }
            catch (Exception ex)
            {
                ////TransactionErrorLogBL.TrackErrorLog(ex.Message, GlobalUserCredentials);
                log.Error(ex);
                return null;
            }
        }



        private VoucherDetailsTemp FillVoucherDetailTempCashForOverDraft(TransactionDTO objVchrTransDto, UserCredentials userCredentials, ProductWiseActivities activityType, long CashBookId, bool isReciept, long admissionnopkey, decimal ExcessAmount, FinancialYearMaster finyear, bool isParellelRun = false)
        {
            try
            {
                CommonFasBL fascommonbl = new CommonFasBL(session);
                VoucherDetailsTemp VchrContraDetailsTemp = new VoucherDetailsTemp();
                VchrContraDetailsTemp.ProductId = GetProductDetailsByslno(objVchrTransDto.Product);
                VchrContraDetailsTemp.ProductTypeID = VchrContraDetailsTemp.ProductId.ProductTypeID;// session.Load<ProductTypeMaster>(objVoucherDetailsTemp.ProductId.ProductTypeID);
                Ledger objLedger = GetLedgerDetails(activityType.PKey, 555, userCredentials.PacsId, userCredentials.BranchId);
                VchrContraDetailsTemp.LedgerCode = objLedger;

                AccountDetails objAccountDetails = GetAccountDetails(VchrContraDetailsTemp.ProductId.Slno, objVchrTransDto.AccountNo, userCredentials.PacsId, userCredentials.BranchId, admissionnopkey);
                VchrContraDetailsTemp.AccountCode = objAccountDetails;

                if (finyear != null)
                {
                    VchrContraDetailsTemp.YearCode = finyear;
                }
                else
                {
                    VchrContraDetailsTemp.YearCode = GetFinancialYearCode(objVchrTransDto.TransactionDate);
                }

                if (isReciept)
                {
                    VchrContraDetailsTemp.Debit = 0;
                    VchrContraDetailsTemp.Credit = ExcessAmount;
                }
                else
                {
                    VchrContraDetailsTemp.Debit = ExcessAmount;
                    VchrContraDetailsTemp.Credit = 0;
                }
                IList<VoucherDetailsTemp> listVoucherDetailTemp = new List<VoucherDetailsTemp>();
                if (isParellelRun == false)
                {
                    if (VchrContraDetailsTemp.AccountCode != null)
                    {
                        if (VchrContraDetailsTemp.LedgerCode.AccountType.AccountTypeID == 1)
                        {
                            VchrContraDetailsTemp.OpeningAmount = fascommonbl.GetCashBalance(userCredentials.PacsId, userCredentials.BranchId, Convert.ToDateTime(objVchrTransDto.TransactionDate.AddDays(1)), VchrContraDetailsTemp.YearCode.YearCode, CashBookId, 0);
                        }
                        else
                        {
                            VchrContraDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(VchrContraDetailsTemp.LedgerCode.LedgerId, userCredentials.PacsId, userCredentials.BranchId, VchrContraDetailsTemp.YearCode.YearCode, Convert.ToDateTime(objVchrTransDto.TransactionDate.AddDays(1)), VchrContraDetailsTemp.LedgerCode.LedgerType.LedgerTypeId, VchrContraDetailsTemp.AccountCode.AccountID);
                        }
                        //VchrContraDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(VchrContraDetailsTemp.LedgerCode, userCredentials.PacsId, userCredentials.BranchId, VchrContraDetailsTemp.YearCode, Convert.ToDateTime(objVchrTransDto.TransactionDate.AddDays(1)), VchrContraDetailsTemp.AccountCode.AccountID);
                    }
                    else
                    {
                        if (VchrContraDetailsTemp.LedgerCode.AccountType.AccountTypeID == 1)
                        {
                            VchrContraDetailsTemp.OpeningAmount = fascommonbl.GetCashBalance(userCredentials.PacsId, userCredentials.BranchId, Convert.ToDateTime(objVchrTransDto.TransactionDate.AddDays(1)), VchrContraDetailsTemp.YearCode.YearCode, CashBookId, 0);
                        }
                        else
                        {
                            VchrContraDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(VchrContraDetailsTemp.LedgerCode.LedgerId, userCredentials.PacsId, userCredentials.BranchId, VchrContraDetailsTemp.YearCode.YearCode, Convert.ToDateTime(objVchrTransDto.TransactionDate.AddDays(1)), VchrContraDetailsTemp.LedgerCode.LedgerType.LedgerTypeId);
                        }
                        //VchrContraDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(VchrContraDetailsTemp.LedgerCode, userCredentials.PacsId, userCredentials.BranchId, VchrContraDetailsTemp.YearCode, Convert.ToDateTime(objVchrTransDto.TransactionDate.AddDays(1)));
                        //listVoucherDetail = session.QueryOver<VoucherDetails>().Where(i => i.LedgerCode == vdm.LedgerCode  && i.PacsId == Vd.PacsId && i.BranchId == Vd.BranchId).List<VoucherDetails>();
                    }
                    if (VchrContraDetailsTemp.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.liabilities))
                    {
                        VchrContraDetailsTemp.BalanceAmount = VchrContraDetailsTemp.OpeningAmount + VchrContraDetailsTemp.Credit - VchrContraDetailsTemp.Debit;
                    }
                    else if (VchrContraDetailsTemp.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.asset))
                    {
                        VchrContraDetailsTemp.BalanceAmount = VchrContraDetailsTemp.OpeningAmount - VchrContraDetailsTemp.Credit + VchrContraDetailsTemp.Debit;
                    }
                }
                if (isReciept)
                {
                    VchrContraDetailsTemp.Narration = "Excess Amount Collected " + VchrContraDetailsTemp.LedgerCode.LedgerName; //objVchrTransDto.Narration;
                }
                else
                {
                    VchrContraDetailsTemp.Narration = "Excess Amount Disbursed " + VchrContraDetailsTemp.LedgerCode.LedgerName; //objVchrTransDto.Narration;
                }
                VchrContraDetailsTemp.TransrollID = 555;

                VchrContraDetailsTemp.TransactionDate = Convert.ToDateTime(objVchrTransDto.TransactionDate).Date;

                VchrContraDetailsTemp.ValueDate = Convert.ToDateTime(objVchrTransDto.ValueDate.ToShortDateString() + " " + DateTime.Now.TimeOfDay);
                VchrContraDetailsTemp.VoucherDetailID = 0;
                VchrContraDetailsTemp.CashBookId = CashBookId;
                VchrContraDetailsTemp.PacsId = userCredentials.PacsId;
                VchrContraDetailsTemp.BranchId = userCredentials.BranchId;
                VchrContraDetailsTemp.IDGeneratorForPacs = userCredentials.PacsId;
                VchrContraDetailsTemp.SerialNumberOfPacs = userCredentials.PACSSerialNumber;


                TransactionBL objTransactionBL = new TransactionBL(session);
                VchrContraDetailsTemp.TransactionID = objTransactionBL.GetTransactionID(objVchrTransDto.ActivityType);// 10011;// Convert.ToInt64(voucherprocessing.VoucherProcessing.VoucherProcessingId);// 10011;
                if (VchrContraDetailsTemp.TransactionID == 0)
                {
                    if (isReciept)
                    {
                        VchrContraDetailsTemp.TransactionID = 40011;
                    }
                    else
                    {
                        VchrContraDetailsTemp.TransactionID = 40012;
                    }
                }
                return VchrContraDetailsTemp;
            }
            catch (Exception ex)
            {
                ////TransactionErrorLogBL.TrackErrorLog(ex.Message, GlobalUserCredentials);
                log.Error(ex);
                return null;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="objVchrTransDto"></param>
        /// <param name="userCredentials"></param>
        /// <param name="yearcode"></param>
        /// <returns></returns>
        private VoucherDetailsTemp FillVoucherDetailsTempDatafordefaultTransfer(TransactionDTO objVchrTransDto, UserCredentials userCredentials, FinancialYearMaster yearcode, long CashBookId, bool isParellelRun = false)
        {
            log.DebugFormat(" Entering into FillVoucherDetailsTempDatafordefaultTransfer,TransactionDTO -{0},UserCredentials-{1},FinancialYearMaster-{2}",
                                                 objVchrTransDto, userCredentials, yearcode);
            try
            {
                CommonFasBL fascommonbl = new CommonFasBL(session);
                VoucherDetailsTemp VchrContraDetailsTemp = new VoucherDetailsTemp();
                //SWActivityTypeMaster activityType = session.Load<SWActivityTypeMaster>(objVchrTransDto.ActivityType);

                ProductWiseActivities activityType = session.Load<ProductWiseActivities>(objVchrTransDto.ActivityType);
                VchrContraDetailsTemp.ProductId = GetProductDetailsByslno(objVchrTransDto.ContraProduct);
                VchrContraDetailsTemp.ProductTypeID = VchrContraDetailsTemp.ProductId.ProductTypeID;// session.Load<ProductTypeMaster>(objVoucherDetailsTemp.ProductId.ProductTypeID);

                AccountDetails objAccountDetails = session.Load<AccountDetails>(Convert.ToInt64(objVchrTransDto.ContraAccountNo)); //GetAccountDetails(VchrContraDetailsTemp.ProductId.Slno, objVchrTransDto.AccountNo, userCredentials.PacsId, userCredentials.BranchId);
                VchrContraDetailsTemp.AccountCode = objAccountDetails;
                Ledger objLedger = objAccountDetails.LedgerPKey; //GetLedgerDetails(VchrContraDetailsTemp.ProductId.Slno, 99, userCredentials.PacsId, userCredentials.BranchId);
                VchrContraDetailsTemp.LedgerCode = objLedger;

                if (yearcode != null)
                {
                    VchrContraDetailsTemp.YearCode = yearcode;
                }
                else
                {
                    VchrContraDetailsTemp.YearCode = GetFinancialYearCode(objVchrTransDto.TransactionDate);
                }

                VchrContraDetailsTemp.TransactionDate = Convert.ToDateTime(objVchrTransDto.TransactionDate).Date;
                if (activityType.FinTransactionType.TransactionTypeId == 1)
                {
                    VchrContraDetailsTemp.Debit = listTransaction.Sum(i => i.Amount);
                    VchrContraDetailsTemp.Credit = 0;
                }
                else
                {
                    VchrContraDetailsTemp.Debit = 0;
                    VchrContraDetailsTemp.Credit = listTransaction.Sum(i => i.Amount);
                }
                if (isParellelRun == false)
                {
                    if (VchrContraDetailsTemp.AccountCode != null)
                    {
                        if (VchrContraDetailsTemp.LedgerCode.AccountType.AccountTypeID == 1)
                        {
                            #region start log
                            if (log.IsErrorEnabled == true)
                            {
                                if (userCredentials.IsDebugEnabled == true)
                                {
                                    log.Error("Entering FillVoucherDetailsTempDatafordefaultTransfer into fascommonbl.GetCashBalance");
                                }
                            }
                            else
                            {
                                if (userCredentials.IsDebugEnabled == true)
                                {
                                    log.Debug("Entering FillVoucherDetailsTempDatafordefaultTransfer into fascommonbl.GetCashBalance");
                                }
                            }
                            #endregion
                            VchrContraDetailsTemp.OpeningAmount = fascommonbl.GetCashBalance(userCredentials.PacsId, userCredentials.BranchId, Convert.ToDateTime(VchrContraDetailsTemp.TransactionDate.AddDays(1)), VchrContraDetailsTemp.YearCode.YearCode, CashBookId, 0);
                            #region start log
                            if (log.IsErrorEnabled == true)
                            {
                                if (userCredentials.IsDebugEnabled == true)
                                {
                                    log.Error("Entering FillVoucherDetailsTempDatafordefaultTransfer into fascommonbl.GetCashBalance");
                                }
                            }
                            else
                            {
                                if (userCredentials.IsDebugEnabled == true)
                                {
                                    log.Debug("Entering FillVoucherDetailsTempDatafordefaultTransfer into fascommonbl.GetCashBalance");
                                }
                            }
                            #endregion
                        }
                        else
                        {
                            #region start log
                            if (log.IsErrorEnabled == true)
                            {
                                if (userCredentials.IsDebugEnabled == true)
                                {
                                    log.Error("Entering FillVoucherDetailsTempDatafordefaultTransfer into fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID");
                                }
                            }
                            else
                            {
                                if (userCredentials.IsDebugEnabled == true)
                                {
                                    log.Debug("Entering FillVoucherDetailsTempDatafordefaultTransfer into fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID");
                                }
                            }
                            #endregion
                            VchrContraDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(VchrContraDetailsTemp.LedgerCode.LedgerId, userCredentials.PacsId, userCredentials.BranchId, VchrContraDetailsTemp.YearCode.YearCode, Convert.ToDateTime(VchrContraDetailsTemp.TransactionDate.AddDays(1)), VchrContraDetailsTemp.LedgerCode.LedgerType.LedgerTypeId, VchrContraDetailsTemp.AccountCode.AccountID);
                            #region start log
                            if (log.IsErrorEnabled == true)
                            {
                                if (userCredentials.IsDebugEnabled == true)
                                {
                                    log.Error("Entering FillVoucherDetailsTempDatafordefaultTransfer into fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID");
                                }
                            }
                            else
                            {
                                if (userCredentials.IsDebugEnabled == true)
                                {
                                    log.Debug("Entering FillVoucherDetailsTempDatafordefaultTransfer into fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID");
                                }
                            }
                            #endregion
                        }
                        //VchrContraDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(VchrContraDetailsTemp.LedgerCode, userCredentials.PacsId, userCredentials.BranchId, VchrContraDetailsTemp.YearCode, Convert.ToDateTime(VchrContraDetailsTemp.TransactionDate.AddDays(1)), VchrContraDetailsTemp.AccountCode.AccountID);
                    }
                    else
                    {
                        if (VchrContraDetailsTemp.LedgerCode.AccountType.AccountTypeID == 1)
                        {
                            #region start log
                            if (log.IsErrorEnabled == true)
                            {
                                if (userCredentials.IsDebugEnabled == true)
                                {
                                    log.Error("Entering FillVoucherDetailsTempDatafordefaultTransfer into fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID");
                                }
                            }
                            else
                            {
                                if (userCredentials.IsDebugEnabled == true)
                                {
                                    log.Debug("Entering FillVoucherDetailsTempDatafordefaultTransfer into fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID");
                                }
                            }
                            #endregion
                            VchrContraDetailsTemp.OpeningAmount = fascommonbl.GetCashBalance(userCredentials.PacsId, userCredentials.BranchId, Convert.ToDateTime(VchrContraDetailsTemp.TransactionDate.AddDays(1)), VchrContraDetailsTemp.YearCode.YearCode, CashBookId, 0);
                            #region start log
                            if (log.IsErrorEnabled == true)
                            {
                                if (userCredentials.IsDebugEnabled == true)
                                {
                                    log.Error("Entering FillVoucherDetailsTempDatafordefaultTransfer into fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID");
                                }
                            }
                            else
                            {
                                if (userCredentials.IsDebugEnabled == true)
                                {
                                    log.Debug("Entering FillVoucherDetailsTempDatafordefaultTransfer into fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID");
                                }
                            }
                            #endregion
                        }
                        else
                        {
                            #region start log
                            if (log.IsErrorEnabled == true)
                            {
                                if (userCredentials.IsDebugEnabled == true)
                                {
                                    log.Error("Entering FillVoucherDetailsTempDatafordefaultTransfer into fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID");
                                }
                            }
                            else
                            {
                                if (userCredentials.IsDebugEnabled == true)
                                {
                                    log.Debug("Entering FillVoucherDetailsTempDatafordefaultTransfer into fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID");
                                }
                            }
                            #endregion
                            VchrContraDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(VchrContraDetailsTemp.LedgerCode.LedgerId, userCredentials.PacsId, userCredentials.BranchId, VchrContraDetailsTemp.YearCode.YearCode, Convert.ToDateTime(VchrContraDetailsTemp.TransactionDate.AddDays(1)), VchrContraDetailsTemp.LedgerCode.LedgerType.LedgerTypeId);
                            #region start log
                            if (log.IsErrorEnabled == true)
                            {
                                if (userCredentials.IsDebugEnabled == true)
                                {
                                    log.Error("Entering FillVoucherDetailsTempDatafordefaultTransfer into fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID");
                                }
                            }
                            else
                            {
                                if (userCredentials.IsDebugEnabled == true)
                                {
                                    log.Debug("Entering FillVoucherDetailsTempDatafordefaultTransfer into fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID");
                                }
                            }
                            #endregion
                        }
                        //VchrContraDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(VchrContraDetailsTemp.LedgerCode, userCredentials.PacsId, userCredentials.BranchId, VchrContraDetailsTemp.YearCode, Convert.ToDateTime(VchrContraDetailsTemp.TransactionDate.AddDays(1)));
                        //listVoucherDetail = session.QueryOver<VoucherDetails>().Where(i => i.LedgerCode == vdm.LedgerCode  && i.PacsId == Vd.PacsId && i.BranchId == Vd.BranchId).List<VoucherDetails>();
                    }
                    if (VchrContraDetailsTemp.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.liabilities))
                    {
                        VchrContraDetailsTemp.BalanceAmount = VchrContraDetailsTemp.OpeningAmount + VchrContraDetailsTemp.Credit - VchrContraDetailsTemp.Debit;
                    }
                    else if (VchrContraDetailsTemp.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.asset))
                    {
                        VchrContraDetailsTemp.BalanceAmount = VchrContraDetailsTemp.OpeningAmount - VchrContraDetailsTemp.Credit + VchrContraDetailsTemp.Debit;
                    }
                }
                VchrContraDetailsTemp.Narration = objVchrTransDto.Narration;
                #region start log
                if (log.IsErrorEnabled == true)
                {
                    if (userCredentials.IsDebugEnabled == true)
                    {
                        log.Error("Entering FillVoucherDetailsTempDatafordefaultTransfer into GetTransrolIDByLedgercodeAndContraActivityID");
                    }
                }
                else
                {
                    if (userCredentials.IsDebugEnabled == true)
                    {
                        log.Debug("Entering FillVoucherDetailsTempDatafordefaultTransfer into GetTransrolIDByLedgercodeAndContraActivityID");
                    }
                }
                #endregion
                VchrContraDetailsTemp.TransrollID = GetTransrolIDByLedgercodeAndContraActivityID(objVchrTransDto.ActivityType, objVchrTransDto.ContraProduct, VchrContraDetailsTemp.LedgerCode.LedgerId, userCredentials.PacsId, userCredentials.BranchId);

                #region start log
                if (log.IsErrorEnabled == true)
                {
                    if (userCredentials.IsDebugEnabled == true)
                    {
                        log.Error("Leave FillVoucherDetailsTempDatafordefaultTransfer into GetTransrolIDByLedgercodeAndContraActivityID");
                    }
                }
                else
                {
                    if (userCredentials.IsDebugEnabled == true)
                    {
                        log.Debug("Leave FillVoucherDetailsTempDatafordefaultTransfer into GetTransrolIDByLedgercodeAndContraActivityID");
                    }
                }
                #endregion

                VchrContraDetailsTemp.ValueDate = Convert.ToDateTime(objVchrTransDto.ValueDate.ToShortDateString() + " " + DateTime.Now.TimeOfDay);
                VchrContraDetailsTemp.VoucherDetailID = 0;
                VchrContraDetailsTemp.CashBookId = CashBookId;
                VchrContraDetailsTemp.PacsId = userCredentials.PacsId;
                VchrContraDetailsTemp.BranchId = userCredentials.BranchId;
                VchrContraDetailsTemp.IDGeneratorForPacs = userCredentials.PacsId;
                VchrContraDetailsTemp.SerialNumberOfPacs = userCredentials.PACSSerialNumber;
                VchrContraDetailsTemp.TransactionID = GetTransactionId(objVchrTransDto.ActivityType, objVchrTransDto.ContraProduct, userCredentials.PacsId, userCredentials.BranchId); //Convert.ToInt64(activityType.TransactionId);// 10011;
                log.Debug("Leaving FillVoucherDetailsTempDatafordefaultTransfer");
                return VchrContraDetailsTemp;
            }
            catch (Exception ex)
            {
                ////TransactionErrorLogBL.TrackErrorLog(ex.Message, GlobalUserCredentials);
                log.Error(ex);
                return null;
            }

        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="ledgercode"></param>
        /// <param name="productid"></param>
        /// <param name="pacsid"></param>
        /// <param name="branchid"></param>
        /// <returns></returns>
        private SWSingleDefaultTransfer GetSWSingleDefaultTransferByActivityAndProductID(long activity, int productid, long pacsid, int branchid)
        {
            log.DebugFormat(" Entering into GetSWSingleDefaultTransferByActivityAndProductID,activity -{0},productid-{1},pacsid-{2},branchid-{3}",
                                              activity, productid);

            //UserCredentials usercredentials = (UserCredentials)session["Login"];

            SWSingleDefaultTransfer objSWSingleDefaultTransfer = new SWSingleDefaultTransfer();
            try
            {
                try
                {
                    //string query = string.Format("from SWSingleDefaultTransfer tm where tm.SourceProductwiseActivityPkey={0} and tm.DesinationProductId = {1}  ", activity, productid);
                    //string query = string.Format("from SWSingleDefaultTransfer tm where tm.SourceProductwiseActivityPkey={0} and tm.DesinationProductId = {1} and ( tm.BranchId='" +"branchid" + "' or tm.BranchID='0' ) and  (tm.PacsId ='" + "pacsid"+ "' or tm.PacsID ='0')", activity, productid);
                    string query = string.Format("from SWSingleDefaultTransfer a where a.SourceProductwiseActivityPkey=:activity and  a.DesinationProductId=:productid  and (a.BranchId =:branchid or a.BranchId=  0  ) and (a.PacsId=:pacsid  or a.PacsId= 0 ) ");
                    IQuery querry = session.CreateQuery(query);
                    objSWSingleDefaultTransfer = querry
                        .SetParameter("activity", activity)
                         .SetParameter("productid", productid)
                          .SetParameter("branchid", branchid)
                           .SetParameter("pacsid", pacsid)
                        .UniqueResult<SWSingleDefaultTransfer>();
                }
                catch (Exception ex)
                {

                    log.Error(ex);
                }
                log.Debug("Leaving GetSWSingleDefaultTransferByActivityAndProductID");
            }
            catch (Exception ex)
            {
                ////TransactionErrorLogBL.TrackErrorLog(ex.Message, GlobalUserCredentials);
                log.Error(ex);
                // return null;
            }
            return objSWSingleDefaultTransfer;
        }
        private long GetTransactionId(long activity, int productid, long pacsid, int branchid)
        {
            log.DebugFormat(" Entering into GetTransactionId,activity -{0},productid-{1},pacsid-{2},branchid-{3}",
                                              activity, productid);
            long transrolid = 0;
            try
            {
                SWSingleDefaultTransfer obj = GetSWSingleDefaultTransferByActivityAndProductID(activity, productid, pacsid, branchid);
                if (obj != null)
                {
                    //SWActivityTypeMaster objSWActivityTypeMaster = session.Load<SWActivityTypeMaster>(Convert.ToInt64(obj.ContraSWTransPkey));
                    TransactionBL objTransactionBL = new TransactionBL(session);
                    //transrolid = objTransactionBL.GetTransactionID(activity);//.VoucherProcessing.VoucherProcessingId;
                    transrolid = objTransactionBL.GetTransactionID(obj.DestinationProductwiseActivityPkey);
                }
                log.Debug("Leaving GetTransactionId");
            }
            catch (Exception ex)
            {
                ////TransactionErrorLogBL.TrackErrorLog(ex.Message, GlobalUserCredentials);
                log.Error(ex);
                //return null;
            }
            return transrolid;
        }
        private int GetTransrolIDByLedgercodeAndContraActivityID(long activity, int productid, long ledgercode, long pacsid, int branchid)
        {
            log.DebugFormat(" Entering into GetTransrolIDByLedgercodeAndContraActivityID,activity -{0},productid-{1},ledgercode-{2}",
                                              activity, productid, ledgercode);
            int transrolid = 0;
            try
            {
                SWSingleDefaultTransfer obj = GetSWSingleDefaultTransferByActivityAndProductID(activity, productid, pacsid, branchid);
                if (obj != null)
                {
                    //SWActivityTypeMaster objSWActivityTypeMaster = session.Load<SWActivityTypeMaster>(Convert.ToInt64(obj.ContraSWTransPkey));
                    ProductWiseActivities objSWActivityTypeMaster = session.Load<ProductWiseActivities>(Convert.ToInt64(obj.DestinationProductwiseActivityPkey));
                    if (objSWActivityTypeMaster != null)
                    {
                        SWTransrollMapping objSWTransrollMapping = new SWTransrollMapping();

                        string query = string.Format("from SWTransrollMapping tm where tm.LedgerID={0} and tm.ProductwiseActivityPKey = {1} ", ledgercode, objSWActivityTypeMaster.PKey);
                        IQuery querry = session.CreateQuery(query);
                        objSWTransrollMapping = querry
                            .SetParameter("activity", activity)
                         .SetParameter("productid", productid)
                          .SetParameter("branchid", branchid)
                           .SetParameter("pacsid", pacsid)
                            .UniqueResult<SWTransrollMapping>();
                        if (objSWTransrollMapping != null)
                        {
                            transrolid = objSWTransrollMapping.TransrollID;
                        }
                    }
                }
                log.Debug("Leaving GetTransrolIDByLedgercodeAndContraActivityID");
            }
            catch (Exception ex)
            {
                //////TransactionErrorLogBL.TrackErrorLog(ex.Message, GlobalUserCredentials);
                log.Error(ex);
                //return null;
            }
            return transrolid;
        }
        public string BuildAdjustmentOrder(TransactionDTO objtransactiondto, IList<AdjustmentDetails> adjustmentdetails)
        {
            try
            {
                string xml = string.Empty;
                XmlDocument xd = new XmlDocument();
                xd.LoadXml(objtransactiondto.XML.ToString());
                TransactionTypeMasterDTO obj;
                List<TransactionTypeMasterDTO> listtemp = new List<TransactionTypeMasterDTO>();
                XmlNodeList xnList = xd.SelectNodes("/Temp/row");
                foreach (XmlNode xn in xnList)
                {
                    obj = new TransactionTypeMasterDTO();
                    obj.Ledger = Convert.ToInt64(xn["LedgerID"].InnerText);
                    obj.LedgerDescription = xn["LedgerDescription"].InnerText;
                    obj.TransrollID = Convert.ToInt32(xn["TransrollID"].InnerText);
                    obj.TransrollDescription = xn["TransrollDescription"].InnerText;
                    obj.MaxAmount = Convert.ToDecimal(xn["MaxAmount"].InnerText);
                    obj.Amount = Convert.ToDecimal(xn["Amount"].InnerText);
                    listtemp.Add(obj);
                }
                decimal totalcollectionamount = listtemp.Sum(i => i.Amount);
                if (totalcollectionamount > 0)
                {
                    xml += "<Temp>";
                    foreach (var v in adjustmentdetails.OrderBy(i => i.SequenceId))
                    {
                        if (listtemp.Where(j => j.TransrollID == v.TransrollPkey).ToList().Count > 0)
                        {
                            if (totalcollectionamount > 0)
                            {
                                xml += "<row>";
                                xml += "<LedgerID>" + listtemp.Where(j => j.TransrollID == v.TransrollPkey).FirstOrDefault().Ledger + "</LedgerID>";
                                xml += "<LedgerDescription>" + listtemp.Where(j => j.TransrollID == v.TransrollPkey).FirstOrDefault().LedgerDescription + "</LedgerDescription>";
                                xml += "<TransrollID>" + listtemp.Where(j => j.TransrollID == v.TransrollPkey).FirstOrDefault().TransrollID + "</TransrollID>";
                                var maxamount = listtemp.Where(j => j.TransrollID == v.TransrollPkey).FirstOrDefault().MaxAmount;
                                if (maxamount >= totalcollectionamount)
                                {
                                    xml += "<Amount>" + totalcollectionamount + "</Amount>";
                                    totalcollectionamount = 0;
                                }
                                else
                                {
                                    xml += "<Amount>" + maxamount + "</Amount>";
                                    totalcollectionamount -= maxamount;
                                }
                                xml += "<MaxAmount>" + listtemp.Where(j => j.TransrollID == v.TransrollPkey).FirstOrDefault().MaxAmount + "</MaxAmount>";
                                xml += "<TransactionID>" + listtemp.Where(j => j.TransrollID == v.TransrollPkey).FirstOrDefault().TransactionID + "</TransactionID>";
                                xml += "<TransrollDescription>" + listtemp.Where(j => j.TransrollID == v.TransrollPkey).FirstOrDefault().TransrollDescription + "</TransrollDescription>";
                                xml += "</row>";
                            }
                        }
                    }
                    xml += "</Temp>";
                }

                return xml;
            }
            catch (Exception ex)
            {
                //////TransactionErrorLogBL.TrackErrorLog(ex.Message, GlobalUserCredentials);
                log.Error(ex);
                return null;
            }
        }


        public IList<VoucherMainTemp> FillVoucherTempForDefaultTransferCollection(TransactionDTO objTransactionDTDTO, UserCredentials usercredentials, IList<OutStandingResults> _outstandingResults, ProductWiseActivities activities, AccountDetails accountdetails, FinancialYearMaster finyear)
        {
            List<VoucherMainTemp> templist = new List<VoucherMainTemp>();
            try
            {

                var objVoucherMain = new VoucherMainTemp();
                objTransactionDTDTO.VoucherType = 2;
                if (!session.IsOpen)
                {
                    var bll = new TransactionBL();
                    session = bll.session;
                }

                #region start log
                if (log.IsErrorEnabled == true)
                {
                    if (usercredentials.IsDebugEnabled == true)
                    {
                        log.Error("Enter  FillVoucherTempForDefaultTransferCollection in FillVouchermaintemp ");
                    }
                }
                else
                {
                    if (usercredentials.IsDebugEnabled == true)
                    {
                        log.Debug("Enter FillVoucherTempForDefaultTransferCollection in FillVouchermaintemp");
                    }
                }
                #endregion

                objVoucherMain = FillVouchermaintemp(usercredentials, objTransactionDTDTO, activities, finyear);

                #region start log
                if (log.IsErrorEnabled == true)
                {
                    if (usercredentials.IsDebugEnabled == true)
                    {
                        log.Error("Leave  FillVoucherTempForDefaultTransferCollection in FillVouchermaintemp ");
                    }
                }
                else
                {
                    if (usercredentials.IsDebugEnabled == true)
                    {
                        log.Debug("Leave FillVoucherTempForDefaultTransferCollection in FillVouchermaintemp");
                    }
                }
                #endregion



                string xml = string.Empty;
                XmlDocument xd = new XmlDocument();
                xd.LoadXml(objTransactionDTDTO.XML.ToString());
                TransactionTypeMasterDTO obj;
                List<TransactionTypeMasterDTO> listtemp = new List<TransactionTypeMasterDTO>();
                XmlNodeList xnList = xd.SelectNodes("/Temp/row");
                List<VoucherDetailsTemp> vdetailstemplist = new List<VoucherDetailsTemp>();
                foreach (XmlNode xn in xnList)
                {
                    obj = new TransactionTypeMasterDTO();
                    obj.Ledger = Convert.ToInt64(xn["LedgerID"].InnerText);
                    obj.LedgerDescription = xn["LedgerDescription"].InnerText;
                    obj.TransrollID = Convert.ToInt32(xn["TransrollID"].InnerText);
                    obj.TransrollDescription = xn["TransrollDescription"].InnerText;
                    obj.MaxAmount = Convert.ToDecimal(xn["MaxAmount"].InnerText);
                    obj.Amount = Convert.ToDecimal(xn["Amount"].InnerText);
                    VoucherDetailsTemp vdetailstemp = new VoucherDetailsTemp();
                    if (!session.IsOpen)
                    {
                        var bll = new TransactionBL();
                        session = bll.session;
                    }
                    if (obj.TransrollID == 1)
                    {
                        #region start log
                        if (log.IsErrorEnabled == true)
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Error("Enter FillVoucherTempForDefaultTransferCollection in FillVoucherDetailTempForSubventionCollection ");
                            }
                        }
                        else
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Enter FillVoucherTempForDefaultTransferCollection in FillVoucherDetailTempForSubventionCollection");
                            }
                        }
                        #endregion
                        vdetailstemp = FillVoucherDetailTempForSubventionCollection(vdetailstemp, objTransactionDTDTO, usercredentials, objVoucherMain.YearCode, true, obj.Amount, obj.TransrollID, objVoucherMain.CashBookId, accountdetails, obj.Ledger, activities);
                        #region start log
                        if (log.IsErrorEnabled == true)
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Error("Leave FillVoucherTempForDefaultTransferCollection in FillVoucherDetailTempForSubventionCollection ");
                            }
                        }
                        else
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Leave FillVoucherTempForDefaultTransferCollection in FillVoucherDetailTempForSubventionCollection");
                            }
                        }
                        #endregion
                    }
                    else
                    {
                        #region start log
                        if (log.IsErrorEnabled == true)
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Error("Enter FillVoucherTempForDefaultTransferCollection in FillVoucherDetailTempForSubventionCollection ");
                            }
                        }
                        else
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Enter FillVoucherTempForDefaultTransferCollection in FillVoucherDetailTempForSubventionCollection");
                            }
                        }
                        #endregion
                        vdetailstemp = FillVoucherDetailTempForSubventionCollection(vdetailstemp, objTransactionDTDTO, usercredentials, objVoucherMain.YearCode, false, obj.Amount, obj.TransrollID, objVoucherMain.CashBookId, null, obj.Ledger, activities);
                        #region start log
                        if (log.IsErrorEnabled == true)
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Error("Leave FillVoucherTempForDefaultTransferCollection in FillVoucherDetailTempForSubventionCollection ");
                            }
                        }
                        else
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Leave FillVoucherTempForDefaultTransferCollection in FillVoucherDetailTempForSubventionCollection");
                            }
                        }
                        #endregion
                    }
                    if (vdetailstemp != null && (vdetailstemp.Debit > 0 || vdetailstemp.Credit > 0))
                    {
                        vdetailstemplist.Add(vdetailstemp);
                    }
                    listtemp.Add(obj);
                }
                objVoucherMain.VoucherDetailsTemp = new List<VoucherDetailsTemp>();
                objVoucherMain.VoucherDetailsTemp = vdetailstemplist.Where(k => k.TransrollID == 2).ToList();
                if (!session.IsOpen)
                {
                    var bll = new TransactionBL();
                    session = bll.session;
                }
                VoucherDetailsTemp vdtempdetails = new VoucherDetailsTemp();
                #region start log
                if (log.IsErrorEnabled == true)
                {
                    if (usercredentials.IsDebugEnabled == true)
                    {
                        log.Error("Enter FillVoucherTempForDefaultTransferCollection in FillVoucherDetailTempForSubventionCollection ");
                    }
                }
                else
                {
                    if (usercredentials.IsDebugEnabled == true)
                    {
                        log.Debug("Enter FillVoucherTempForDefaultTransferCollection in FillVoucherDetailTempForSubventionCollection");
                    }
                }
                #endregion
                vdtempdetails = FillVoucherDetailTempForSubventionCollection(vdtempdetails, objTransactionDTDTO, usercredentials, objVoucherMain.YearCode, true, vdetailstemplist.Where(k => k.TransrollID == 2).ToList().Sum(k => k.Debit), 2, objVoucherMain.CashBookId, accountdetails, 0, activities);
                #region start log
                if (log.IsErrorEnabled == true)
                {
                    if (usercredentials.IsDebugEnabled == true)
                    {
                        log.Error("Leave FillVoucherTempForDefaultTransferCollection in FillVoucherDetailTempForSubventionCollection ");
                    }
                }
                else
                {
                    if (usercredentials.IsDebugEnabled == true)
                    {
                        log.Debug("Leave FillVoucherTempForDefaultTransferCollection in FillVoucherDetailTempForSubventionCollection");
                    }
                }
                #endregion
                if (vdtempdetails != null && (vdtempdetails.Debit > 0 || vdtempdetails.Credit > 0))
                {
                    objVoucherMain.VoucherDetailsTemp.Add(vdtempdetails);
                }
                templist.Add(objVoucherMain);

                if (!session.IsOpen)
                {
                    var bll = new TransactionBL();
                    session = bll.session;
                }
                objTransactionDTDTO.VoucherType = 1;
                objVoucherMain = new VoucherMainTemp();
                #region start log
                if (log.IsErrorEnabled == true)
                {
                    if (usercredentials.IsDebugEnabled == true)
                    {
                        log.Error("Enter FillVoucherTempForDefaultTransferCollection in FillVouchermaintemp ");
                    }
                }
                else
                {
                    if (usercredentials.IsDebugEnabled == true)
                    {
                        log.Debug("Enter FillVoucherTempForDefaultTransferCollection in FillVouchermaintemp");
                    }
                }
                #endregion
                objVoucherMain = FillVouchermaintemp(usercredentials, objTransactionDTDTO, activities, finyear);
                #region start log
                if (log.IsErrorEnabled == true)
                {
                    if (usercredentials.IsDebugEnabled == true)
                    {
                        log.Error("Leave FillVoucherTempForDefaultTransferCollection in FillVouchermaintemp ");
                    }
                }
                else
                {
                    if (usercredentials.IsDebugEnabled == true)
                    {
                        log.Debug("Leave FillVoucherTempForDefaultTransferCollection in FillVouchermaintemp");
                    }
                }
                #endregion
                if (!session.IsOpen)
                {
                    var bll = new TransactionBL();
                    session = bll.session;
                }
                objVoucherMain.VoucherDetailsTemp = new List<VoucherDetailsTemp>();
                objVoucherMain.VoucherDetailsTemp = vdetailstemplist.Where(k => k.TransrollID == 1).ToList();
                #region start log
                if (log.IsErrorEnabled == true)
                {
                    if (usercredentials.IsDebugEnabled == true)
                    {
                        log.Error("Enter FillVoucherTempForDefaultTransferCollection in FillVouchermaintemp ");
                    }
                }
                else
                {
                    if (usercredentials.IsDebugEnabled == true)
                    {
                        log.Debug("Enter FillVoucherTempForDefaultTransferCollection in FillVouchermaintemp");
                    }
                }
                #endregion
                var tempdetails = FillVoucherDetailTempCashForDefaultTransfer(objTransactionDTDTO, usercredentials, objVoucherMain.YearCode, activities, objVoucherMain.CashBookId, true, 99, vdetailstemplist.Where(k => k.TransrollID == 1).ToList().Sum(k => k.Credit), accountdetails);
                #region start log
                if (log.IsErrorEnabled == true)
                {
                    if (usercredentials.IsDebugEnabled == true)
                    {
                        log.Error("Leave FillVoucherTempForDefaultTransferCollection in FillVouchermaintemp ");
                    }
                }
                else
                {
                    if (usercredentials.IsDebugEnabled == true)
                    {
                        log.Debug("Leave FillVoucherTempForDefaultTransferCollection in FillVouchermaintemp");
                    }
                }
                #endregion
                objVoucherMain.VoucherDetailsTemp.Add(tempdetails);
                templist.Add(objVoucherMain); 
            }
            catch (Exception ex)
            {
                log.Error(ex);
            }
            return templist;
        }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="objTransactionDTDTO"></param>
        /// <param name="usercredentials"></param>
        /// <returns></returns>
        public object[] SaveTransactionDetails(TransactionDTO objTransactionDTDTO, UserCredentials usercredentials, IList<OutStandingResults> _outstandingResults, [Optional]bool isTabData)
        {
            #region log enter
            if (log.IsErrorEnabled == true)
            {
                if (usercredentials.IsDebugEnabled == true)
                {
                    log.Error("Enter SaveTransactionDetails ");
                }
            }
            else
            {
                if (usercredentials.IsDebugEnabled == true)
                {
                    log.Debug("Enter SaveTransactionDetails");
                }
            }
            #endregion logend
            //log.Debug("SaveTransactionDetails, Entered");
            try
            {
                if (usercredentials.isCashCounterIdMandatary == true)
                {
                    if (usercredentials.CashBookId == 0)
                    {

                        bool Approvelimit = false;
                        long voucherid = 0;
                        string status = "Assign cash counter " + usercredentials.UserName;
                        object[] objVoucherTemp = { voucherid, 0, 0, Approvelimit, status, 0 };
                        return objVoucherTemp;
                    }
                }
                VoucherMainTemp voucherID = new VoucherMainTemp();
                #region log enter
                if (log.IsErrorEnabled == true)
                {
                    if (usercredentials.IsDebugEnabled == true)
                    {
                        log.Error("Enter GetFinancialYearCode ");
                    }
                }
                else
                {
                    if (usercredentials.IsDebugEnabled == true)
                    {
                        log.Debug("Enter GetFinancialYearCode");
                    }
                }
                #endregion logend
                FinancialYearMaster finyear = GetFinancialYearCode(objTransactionDTDTO.TransactionDate);
                #region log enter
                if (log.IsErrorEnabled == true)
                {
                    if (usercredentials.IsDebugEnabled == true)
                    {
                        log.Error("Leave GetFinancialYearCode ");
                    }
                }
                else
                {
                    if (usercredentials.IsDebugEnabled == true)
                    {
                        log.Debug("Leave GetFinancialYearCode");
                    }
                }
                #endregion logend

                ProductWiseActivities objTransaction = session.Load<ProductWiseActivities>(objTransactionDTDTO.ActivityType);

                #region log enter
                if (log.IsErrorEnabled == true)
                {
                    if (usercredentials.IsDebugEnabled == true)
                    {
                        log.Error("Leave session.Load<ProductWiseActivities>  parameter " + objTransactionDTDTO.ActivityType + " result: ProductWiseActivities-" + objTransaction);
                    }
                }
                else
                {
                    if (usercredentials.IsDebugEnabled == true)
                    {
                        log.Debug("Leave session.Load<ProductWiseActivities>  parameter " + objTransactionDTDTO.ActivityType + " result: ProductWiseActivities-" + objTransaction);
                    }
                }
                #endregion logend

                Intellect.Unite.WebPackages.Loans.BL.LoansCommonMasterBl commonbl = new Loans.BL.LoansCommonMasterBl(session);
                Intellect.Unite.WebPackages.Loans.BL.CollectionsBl collbll = new Loans.BL.CollectionsBl(session);
                int repaymenttypeid = 0;
                ProductDetailsDTO productdetails = new ProductDetailsDTO();

                //FinancialYearMaster yearcode = GetFinancialYearCode(objTransactionDTDTO.TransactionDate);
                AccountDetails accountdetails = new AccountDetails();
                if (objTransactionDTDTO.AccountPkey != null && objTransactionDTDTO.AccountPkey > 0)
                {
                    accountdetails = session.Load<AccountDetails>(objTransactionDTDTO.AccountPkey);
                    if (accountdetails != null && accountdetails.AccountID > 0)
                    {
                        objTransactionDTDTO.AccountNo = accountdetails.AccountCode;
                        objTransactionDTDTO.AccountCode = accountdetails.AccountCode;

                    }
                }
                //log.Debug("SaveTransactionDetails, AccountDetails");
                #region log enter
                if (log.IsErrorEnabled == true)
                {
                    if (usercredentials.IsDebugEnabled == true)
                    {
                        log.Error("Leave session.Load<AccountDetails>  parameter " + objTransactionDTDTO.AccountPkey + " result: AccountDetails-" + accountdetails);
                    }
                }
                else
                {
                    if (usercredentials.IsDebugEnabled == true)
                    {
                        log.Debug("Leave session.Load<ProductWiseActivities>  parameter " + objTransactionDTDTO.ActivityType + " result: ProductWiseActivities-" + objTransaction);
                    }
                }
                #endregion logend
                string message = string.Empty;
                long voucherId = 0;

                bool isSecondVoucherExists = false;
                long secondvoucherId = 0;
                VoucherMainTemp objvchrtemp = new VoucherMainTemp();
                VoucherMainTemp objSecondvchrtemp = new VoucherMainTemp();
                bool isAllowExcessAmount = false;
                decimal ExcessAmount = 0;
                if (objTransactionDTDTO.ProductTypeId == 3)
                {
                    //log.Debug("SaveTransactionDetails, objTransactionDTDTO.ProductTypeId == 3");
                    #region log enter
                    if (log.IsErrorEnabled == true)
                    {
                        if (usercredentials.IsDebugEnabled == true)
                        {
                            log.Error("SaveTransactionDetails, objTransactionDTDTO.ProductTypeId == 3");
                        }
                    }
                    else
                    {
                        if (usercredentials.IsDebugEnabled == true)
                        {
                            log.Debug("SaveTransactionDetails, objTransactionDTDTO.ProductTypeId == 3");
                        }
                    }
                    #endregion logend
                    #region Loans start fill vouchermain,moduletables
                    #region log enter
                    if (log.IsErrorEnabled == true)
                    {
                        if (usercredentials.IsDebugEnabled == true)
                        {
                            log.Error("Enter commonbl.GetAdjustmentDetailsFlat ");
                        }
                    }
                    else
                    {
                        if (usercredentials.IsDebugEnabled == true)
                        {
                            log.Debug("Enter commonbl.GetAdjustmentDetailsFlat");
                        }
                    }
                    #endregion logend
                    var adjustmentdetails = commonbl.GetAdjustmentDetailsFlat(objTransactionDTDTO.Product, usercredentials.PacsId, usercredentials.BranchId);
                    #region log enter
                    if (log.IsErrorEnabled == true)
                    {
                        if (usercredentials.IsDebugEnabled == true)
                        {
                            log.Error("Leave commonbl.GetAdjustmentDetailsFlat ");
                        }
                    }
                    else
                    {
                        if (usercredentials.IsDebugEnabled == true)
                        {
                            log.Debug("Leave commonbl.GetAdjustmentDetailsFlat");
                        }
                    }
                    #endregion logend

                    #region log enter
                    if (log.IsErrorEnabled == true)
                    {
                        if (usercredentials.IsDebugEnabled == true)
                        {
                            log.Error("Enter commonbl.GetProductDetailsDTOFlat ");
                        }
                    }
                    else
                    {
                        if (usercredentials.IsDebugEnabled == true)
                        {
                            log.Debug("Enter commonbl.GetProductDetailsDTOFlat");
                        }
                    }
                    #endregion logend
                    productdetails = commonbl.GetProductDetailsDTOFlat(usercredentials.PacsId, usercredentials.BranchId, usercredentials.Logindatetime, usercredentials.UserLevel, usercredentials.StateId, usercredentials.DistrictId, objTransactionDTDTO.Product);
                    #region log enter
                    if (log.IsErrorEnabled == true)
                    {
                        if (usercredentials.IsDebugEnabled == true)
                        {
                            log.Error("Leave commonbl.GetProductDetailsDTOFlat ");
                        }
                    }
                    else
                    {
                        if (usercredentials.IsDebugEnabled == true)
                        {
                            log.Debug("Leave commonbl.GetProductDetailsDTOFlat");
                        }
                    }
                    #endregion logend
                    //   productdetails = commonbl.GetProductDetailsByProductCode(objTransactionDTDTO.Product, usercredentials.PacsId, usercredentials.BranchId, usercredentials.Logindatetime, usercredentials.UserLevel, usercredentials.StateId, usercredentials.DistrictId);
                    if (productdetails.IsAllowExcessAmount != null && productdetails.IsAllowExcessAmount == "Yes")
                    {
                        isAllowExcessAmount = true;
                    }
                    repaymenttypeid = Convert.ToInt32(productdetails.RepaymentTypeId);
                    //   var productdetails = commonbl.GetProductDetailsByProductCode(objTransactionDTDTO.Product, usercredentials.PacsId, usercredentials.BranchId, usercredentials.Logindatetime, usercredentials.UserLevel, usercredentials.StateId, usercredentials.DistrictId);
                    if (Convert.ToInt32(productdetails.RepaymentTypeId) == 3 || Convert.ToInt32(productdetails.RepaymentTypeId) == 4)
                    {
                        if (objTransaction.FinTransactionType.TransactionTypeId != 2 && objTransaction.Activities.ActivityId != 8 && objTransaction.Activities.ActivityId != 4 && !objTransactionDTDTO.IsDefaultTransfer)
                        {

                            if (adjustmentdetails != null && adjustmentdetails.Count > 0)
                            {
                                #region log enter
                                if (log.IsErrorEnabled == true)
                                {
                                    if (usercredentials.IsDebugEnabled == true)
                                    {
                                        log.Error("Enter BuildAdjustmentOrder ");
                                    }
                                }
                                else
                                {
                                    if (usercredentials.IsDebugEnabled == true)
                                    {
                                        log.Debug("Enter BuildAdjustmentOrder");
                                    }
                                }
                                #endregion logend
                                bool isincludeothercharges = false;
                                var includeothercharges = collbll.GetLoanParametersByParamId(43, usercredentials.PacsId, usercredentials.BranchId);
                                if (includeothercharges != null && includeothercharges.ParameterValue != null && (includeothercharges.ParameterValue == "Y" || includeothercharges.ParameterValue == "y"))
                                {
                                    isincludeothercharges = true;
                                }
                                if (!isincludeothercharges)
                                {
                                    objTransactionDTDTO.XML = BuildAdjustmentOrder(objTransactionDTDTO, adjustmentdetails);
                                }
                                #region log enter
                                if (log.IsErrorEnabled == true)
                                {
                                    if (usercredentials.IsDebugEnabled == true)
                                    {
                                        log.Error("Leave BuildAdjustmentOrder ");
                                    }
                                }
                                else
                                {
                                    if (usercredentials.IsDebugEnabled == true)
                                    {
                                        log.Debug("Leave BuildAdjustmentOrder");
                                    }
                                }
                                #endregion logend
                            }
                        }
                        //if ((repaymenttypeid == 3 || repaymenttypeid == 4))

                        if (objTransactionDTDTO.IsDefaultTransfer)
                        {
                            //first voucher should be principal and seconde voucher will be default transfer.
                            #region log enter
                            if (log.IsErrorEnabled == true)
                            {
                                if (usercredentials.IsDebugEnabled == true)
                                {
                                    log.Error("Enter FillVoucherTempForDefaultTransferCollection ");
                                }
                            }
                            else
                            {
                                if (usercredentials.IsDebugEnabled == true)
                                {
                                    log.Debug("Enter FillVoucherTempForDefaultTransferCollection");
                                }
                            }
                            #endregion logend
                            var templist = FillVoucherTempForDefaultTransferCollection(objTransactionDTDTO, usercredentials, _outstandingResults, objTransaction, accountdetails, finyear);
                            #region log enter
                            if (log.IsErrorEnabled == true)
                            {
                                if (usercredentials.IsDebugEnabled == true)
                                {
                                    log.Error("Leave FillVoucherTempForDefaultTransferCollection ");
                                }
                            }
                            else
                            {
                                if (usercredentials.IsDebugEnabled == true)
                                {
                                    log.Debug("Leave FillVoucherTempForDefaultTransferCollection");
                                }
                            }
                            #endregion logend
                            objvchrtemp = templist.Where(k => k.VoucherType.VoucherTypeID == 1).FirstOrDefault();
                            objSecondvchrtemp = templist.Where(k => k.VoucherType.VoucherTypeID == 2).FirstOrDefault();
                            if (objSecondvchrtemp.VoucherNo == 0)
                            {

                                #region log enter
                                if (log.IsErrorEnabled == true)
                                {
                                    if (usercredentials.IsDebugEnabled == true)
                                    {
                                        log.Error("Entering secondvoucher.VoucherNo in SaveTransactionDetails");
                                    }
                                }
                                else
                                {
                                    if (usercredentials.IsDebugEnabled == true)
                                    {
                                        log.Debug("Entering secondvoucher.VoucherNo in SaveTransactionDetails");
                                    }
                                }
                                #endregion logend
                                objSecondvchrtemp.VoucherNo = GetMaxVoucherNumber(Convert.ToDateTime(objSecondvchrtemp.TransactionDate), usercredentials.UserName, usercredentials.PacsId, usercredentials.BranchId, usercredentials.PACSSerialNumber, objSecondvchrtemp.TransactionType.TransactionTypeID, finyear.YearCode);

                                #region log enter
                                if (log.IsErrorEnabled == true)
                                {
                                    if (usercredentials.IsDebugEnabled == true)
                                    {
                                        log.Error("leaved secondvoucher.VoucherNo SaveTransactionDetails");
                                    }
                                }
                                else
                                {
                                    if (usercredentials.IsDebugEnabled == true)
                                    {
                                        log.Debug("leaved secondvoucher.VoucherNo SaveTransactionDetails");
                                    }
                                }
                                #endregion logend
                                if (objSecondvchrtemp.VoucherNo == 0)
                                {
                                    message = "Could Not Generate Voucher No";
                                    voucherId = 0;
                                }
                            }
                            //session.Save(secondvoucher);
                            //isSecondVoucherExists = true;
                            //secondvoucherId = secondvoucher.VoucherID;
                        }
                        else
                        {
                            #region log enter
                            if (log.IsErrorEnabled == true)
                            {
                                if (usercredentials.IsDebugEnabled == true)
                                {
                                    log.Error("Enter FillNewVoucher in SaveTransactionDetails");
                                }
                            }
                            else
                            {
                                if (usercredentials.IsDebugEnabled == true)
                                {
                                    log.Debug("Enter FillNewVoucher in SaveTransactionDetails");
                                }
                            }
                            #endregion logend
                            objvchrtemp = FillNewVoucher(objTransactionDTDTO, usercredentials, Convert.ToInt64(objTransactionDTDTO.AddmissionPkey), objTransaction, finyear);
                            #region log enter
                            if (log.IsErrorEnabled == true)
                            {
                                if (usercredentials.IsDebugEnabled == true)
                                {
                                    log.Error("Leave FillNewVoucher in SaveTransactionDetails");
                                }
                            }
                            else
                            {
                                if (usercredentials.IsDebugEnabled == true)
                                {
                                    log.Debug("Leave FillNewVoucher in SaveTransactionDetails");
                                }
                            }
                            #endregion logend
                        }
                    }
                    else
                    {
                        #region log enter
                        if (log.IsErrorEnabled == true)
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Error("Enter FillNewVoucher in SaveTransactionDetails");
                            }
                        }
                        else
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Enter FillNewVoucher in SaveTransactionDetails");
                            }
                        }
                        #endregion logend
                        objvchrtemp = FillNewVoucher(objTransactionDTDTO, usercredentials, Convert.ToInt64(objTransactionDTDTO.AddmissionPkey), objTransaction, finyear);
                        #region log enter
                        if (log.IsErrorEnabled == true)
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Error("Leave FillNewVoucher in SaveTransactionDetails");
                            }
                        }
                        else
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Leave FillNewVoucher in SaveTransactionDetails");
                            }
                        }
                        #endregion logend
                    }
                    #endregion Loans VoucherMian fill end
                }
                else
                {
                    #region OtherThan Loans vouchermain
                    #region log enter
                    if (log.IsErrorEnabled == true)
                    {
                        if (usercredentials.IsDebugEnabled == true)
                        {
                            log.Error("Enter FillNewVoucher in SaveTransactionDetails");
                        }
                    }
                    else
                    {
                        if (usercredentials.IsDebugEnabled == true)
                        {
                            log.Debug("Enter FillNewVoucher in SaveTransactionDetails");
                        }
                    }
                    #endregion logend
                    objvchrtemp = FillNewVoucher(objTransactionDTDTO, usercredentials, Convert.ToInt64(objTransactionDTDTO.AddmissionPkey), objTransaction, finyear);
                    if (objTransactionDTDTO.Activity == 180001 && objTransactionDTDTO.NonCumulativePenalty > 0)
                    {
                        objvchrtemp = FillNewVoucher(objTransactionDTDTO, usercredentials, Convert.ToInt64(objTransactionDTDTO.AddmissionPkey), objTransaction, finyear);
                    }
                    #region log enter
                    if (log.IsErrorEnabled == true)
                    {
                        if (usercredentials.IsDebugEnabled == true)
                        {
                            log.Error("Leave FillNewVoucher in SaveTransactionDetails");
                        }
                    }
                    else
                    {
                        if (usercredentials.IsDebugEnabled == true)
                        {
                            log.Debug("Leave FillNewVoucher in SaveTransactionDetails");
                        }
                    }
                    #endregion logend
                    #endregion otherThan Loans vouchermain
                }

                objvchrtemp.VoucherDetailsTemp.Select(k => { k.LedgerFolioNo = objTransactionDTDTO.LedgerFolioNo; return k; }).ToList();
                var voucherdetailstemp = objvchrtemp.VoucherDetailsTemp;
                var cashvoucher = voucherdetailstemp.Where(i => i.TransrollID == 99).FirstOrDefault();

                bool IsForSubvention = false;
                if (objTransaction.Activities.ActivityId == 8)
                {
                    IsForSubvention = true;

                }
                bool allowTransaction = false;
                if (objvchrtemp.VoucherType.VoucherTypeID == 1)//cash
                {
                    //if ((objvchrtemp.TransactionType.TransactionTypeID == 1) || (cashvoucher != null && cashvoucher.BalanceAmount >= 0))
                    if ((objvchrtemp.TransactionType.TransactionTypeID == 2))
                    {
                        if (cashvoucher != null && cashvoucher.BalanceAmount >= 0)
                        {
                            allowTransaction = true;
                        }
                        else
                        {
                            allowTransaction = false;
                        }
                    }
                    else
                    {
                        allowTransaction = true;
                    }
                }
                else if (objvchrtemp.VoucherType.VoucherTypeID == 2 || objvchrtemp.VoucherType.VoucherTypeID == 3)//transfer
                {
                    allowTransaction = true;
                }

                if (allowTransaction)
                {
                    if (objvchrtemp.VoucherNo == 0)
                    {

                        #region log enter
                        if (log.IsErrorEnabled == true)
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Error("Entering objvchrtemp.VoucherNo in SaveTransactionDetails");
                            }
                        }
                        else
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Entering objvchrtemp.VoucherNo in SaveTransactionDetails");
                            }
                        }
                        #endregion logend
                        objvchrtemp.VoucherNo = GetMaxVoucherNumber(Convert.ToDateTime(objvchrtemp.TransactionDate), usercredentials.UserName, usercredentials.PacsId, usercredentials.BranchId, usercredentials.PACSSerialNumber, objvchrtemp.TransactionType.TransactionTypeID, finyear.YearCode);
                        if (isTabData == true) { objvchrtemp.SourceId = 10; }
                        #region log enter
                        if (log.IsErrorEnabled == true)
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Error("leaved objvchrtemp.VoucherNo in SaveTransactionDetails");
                            }
                        }
                        else
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Debug("leaved objvchrtemp.VoucherNo in SaveTransactionDetails");
                            }
                        }
                        #endregion logend


                        if (objvchrtemp.VoucherNo == 0)
                        {
                            message = "Could Not Generate Voucher No";
                            voucherId = 0;

                        }
                    }
                    long sharevoucherno = 0;
                    bool isvoucherwithshareamount = false;
                    decimal shareamount = 0;
                    MoreDisbursementDetails more = new MoreDisbursementDetails();

                    if (objTransaction.ProductType.ProductTypeID == 3 && objTransaction.FinTransactionType.TransactionTypeId == 2)
                    {
                        #region log enter
                        if (log.IsErrorEnabled == true)
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Error("Entering objTransactionDTDTO.MoreDisbursementDetailsXML in SaveTransactionDetails");
                            }
                        }
                        else
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Entering objTransactionDTDTO.MoreDisbursementDetailsXML in SaveTransactionDetails");
                            }
                        }
                        #endregion logend
                        string moredisbursements = objTransactionDTDTO.MoreDisbursementDetailsXML;
                        #region log enter
                        if (log.IsErrorEnabled == true)
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Error("Leave objTransactionDTDTO.MoreDisbursementDetailsXML in SaveTransactionDetails");
                            }
                        }
                        else
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Leave objTransactionDTDTO.MoreDisbursementDetailsXML in SaveTransactionDetails");
                            }
                        }
                        #endregion logend
                        #region log enter
                        if (log.IsErrorEnabled == true)
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Error("Entering GetMoreDisbursementDetails in SaveTransactionDetails");
                            }
                        }
                        else
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Entering GetMoreDisbursementDetails in SaveTransactionDetails");
                            }
                        }
                        #endregion logend
                        more = GetMoreDisbursementDetails(moredisbursements, voucherId);
                        #region log enter
                        if (log.IsErrorEnabled == true)
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Error("Leave GetMoreDisbursementDetails in SaveTransactionDetails");
                            }
                        }
                        else
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Leave GetMoreDisbursementDetails in SaveTransactionDetails");
                            }
                        }
                        #endregion logend
                        if (more.IsVocuherWithShareAmount)
                        {
                            #region log enter
                            if (log.IsErrorEnabled == true)
                            {
                                if (usercredentials.IsDebugEnabled == true)
                                {
                                    log.Error("Entering GetMaxVoucherNumber in SaveTransactionDetails");
                                }
                            }
                            else
                            {
                                if (usercredentials.IsDebugEnabled == true)
                                {
                                    log.Debug("Entering GetMaxVoucherNumber in SaveTransactionDetails");
                                }
                            }
                            #endregion logend
                            sharevoucherno = GetMaxVoucherNumber(Convert.ToDateTime(objvchrtemp.TransactionDate), usercredentials.UserName, usercredentials.PacsId, usercredentials.BranchId, usercredentials.PACSSerialNumber, objvchrtemp.TransactionType.TransactionTypeID, finyear.YearCode);
                            #region log enter
                            if (log.IsErrorEnabled == true)
                            {
                                if (usercredentials.IsDebugEnabled == true)
                                {
                                    log.Error("Leave GetMaxVoucherNumber in SaveTransactionDetails");
                                }
                            }
                            else
                            {
                                if (usercredentials.IsDebugEnabled == true)
                                {
                                    log.Debug("Leave GetMaxVoucherNumber in SaveTransactionDetails");
                                }
                            }
                            #endregion logend
                            isvoucherwithshareamount = true;
                            shareamount = more.ShareAmount;
                            if (objvchrtemp != null)
                            {
                                if (objvchrtemp.VoucherDetailsTemp != null && objvchrtemp.VoucherDetailsTemp.Where(k => k.TransactionID == 40012).ToList().Count > 0)
                                {
                                    var objCommonFasBL = new CommonFasBL();
                                    if (objvchrtemp.VoucherDetailsTemp.Where(k => k.TransactionID == 40012 && k.AccountCode == accountdetails && k.Debit > 0).ToList().Count > 0)
                                    {
                                        objvchrtemp.VoucherDetailsTemp.Where(k => k.TransactionID == 40012 && k.AccountCode == accountdetails && k.Debit > 0).ToList().FirstOrDefault().Debit -= 2 * (shareamount);
                                    }

                                    if (objvchrtemp.VoucherDetailsTemp.Where(k => k.TransactionID == 40012 && k.Credit > 0).ToList().Count > 0)
                                    {
                                        objvchrtemp.VoucherDetailsTemp.Where(k => k.TransactionID == 40012 && k.Credit > 0).ToList().FirstOrDefault().Credit -= 2 * (shareamount);
                                    }
                                }
                            }
                        }


                    }

                    using (var trans = session.BeginTransaction())
                    {
                        //session.BeginTransaction();
                        log.Debug("SaveTransactionDetails, BeginTransaction");
                        #region DenominationFilling start
                        if (objTransactionDTDTO.objDenominationDTO != null)
                        {
                            IList<Denominations> objDenominations = new List<Denominations>();
                            #region log enter
                            if (log.IsErrorEnabled == true)
                            {
                                if (usercredentials.IsDebugEnabled == true)
                                {
                                    log.Error("Entering FillDenaminationDetails in SaveTransactionDetails");
                                }
                            }
                            else
                            {
                                if (usercredentials.IsDebugEnabled == true)
                                {
                                    log.Debug("Entering FillDenaminationDetails in SaveTransactionDetails");
                                }
                            }
                            #endregion logend
                            objDenominations = FillDenaminationDetails(objTransactionDTDTO.objDenominationDTO, usercredentials.PacsId, usercredentials.BranchId, objTransaction.FinTransactionType.TransactionTypeId, objTransactionDTDTO.TransactionDate, objvchrtemp.CashBookId);
                            #region log enter
                            if (log.IsErrorEnabled == true)
                            {
                                if (usercredentials.IsDebugEnabled == true)
                                {
                                    log.Error("Leave FillDenaminationDetails in SaveTransactionDetails");
                                }
                            }
                            else
                            {
                                if (usercredentials.IsDebugEnabled == true)
                                {
                                    log.Debug("Leave FillDenaminationDetails in SaveTransactionDetails");
                                }
                            }
                            #endregion logend
                            if (objDenominations[0].TotalAmount != 0 || objDenominations[1].TotalAmount != 0)
                            {
                                if (objDenominations.Count > 0)
                                {
                                    foreach (var denomination in objDenominations)
                                    {
                                        if (denomination.TotalAmount != 0)
                                        {
                                            denomination.VoucherNumber = objvchrtemp.VoucherNo;
                                            denomination.IDGeneratorForPacs = usercredentials.PacsId;
                                            denomination.SerialNumberOfPacs = usercredentials.PACSSerialNumber;
                                            session.Save(denomination);
                                        }
                                    }
                                }
                            }
                        }
                        #endregion DenominationFilling end
                        var temp = objvchrtemp.VoucherDetailsTemp;
                        #region ControlRecord start
                        #region log enter
                        if (log.IsErrorEnabled == true)
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Error("Entering SaveControlRecord in SaveTransactionDetails");
                            }
                        }
                        else
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Entering SaveControlRecord in SaveTransactionDetails");
                            }
                        }
                        #endregion logend
                        VoucherControlRecord objControlRecords = SaveControlRecord(objvchrtemp, usercredentials, objTransaction.Activities.ActivityId, objTransactionDTDTO);
                        #region log enter
                        if (log.IsErrorEnabled == true)
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Error("Leave SaveControlRecord in SaveTransactionDetails");
                            }
                        }
                        else
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Leave SaveControlRecord in SaveTransactionDetails");
                            }
                        }
                        #endregion logend
                        objControlRecords.IDGeneratorForPacs = usercredentials.PacsId;
                        objControlRecords.SerialNumberOfPacs = usercredentials.PACSSerialNumber;
                        session.Save(objControlRecords);
                        #endregion end
                        #region Transfer Save or update
                        if (transferslist.Count > 0)
                        {
                            foreach (var objTrans in transferslist)
                            {
                                if (more.IsVocuherWithShareAmount)
                                {
                                    objTrans.Withdrawl -= 2 * more.ShareAmount;
                                    objTrans.Balance -= 2 * more.ShareAmount;
                                }
                                objTrans.VoucherNo = objvchrtemp.VoucherNo;
                                objTrans.BatchId = Convert.ToInt64(objvchrtemp.BatchId);
                                objTrans.IDGeneratorForPacs = usercredentials.PacsId;
                                objTrans.SerialNumberOfPacs = usercredentials.PACSSerialNumber;
                                session.SaveOrUpdate(objTrans);
                            }
                            objvchrtemp.IDGeneratorForPacs = usercredentials.PacsId;
                            objvchrtemp.SerialNumberOfPacs = usercredentials.PACSSerialNumber;
                             session.Save(objvchrtemp);
                            voucherID = objvchrtemp;
                        }
                        else
                        {
                            objvchrtemp.IDGeneratorForPacs = usercredentials.PacsId;
                            objvchrtemp.SerialNumberOfPacs = usercredentials.PACSSerialNumber;
                            if (objvchrtemp.Amount > 0 || objvchrtemp.VoucherDetailsTemp.Sum(k => k.Debit)>0 || objvchrtemp.VoucherDetailsTemp.Sum(c => c.Credit)>0)
                            {
                                session.Save(objvchrtemp);

                                voucherID = objvchrtemp;
                            }
                        }
                        #endregion Transfer Save or update
                        //RijndaelEnhanced _encryptHash2 = new RijndaelEnhanced();
                        //string _plaintext2 = Convert.ToString(objvchrtemp.TransactionDate) + "|" + Convert.ToString(objvchrtemp.Amount) + "|" + Convert.ToString(objvchrtemp.VoucherNo);
                        //string _EncryptText2 = _encryptHash2.Encrypt(_plaintext2);
                        // objvchrtemp.SaltValue = _EncryptText2;


                        if (objTransactionDTDTO.ProductTypeId != null)
                        {
                            if (objTransactionDTDTO.ProductTypeId == 3)
                            {
                                #region Loands And Storage
                                if (voucherID.VoucherID > 0)
                                {
                                    voucherId = voucherID.VoucherID;
                                }
                                else
                                {
                                    voucherId = objvchrtemp.VoucherID;
                                }
                                if ((repaymenttypeid == 3 || repaymenttypeid == 4))
                                {
                                    if (objTransactionDTDTO.IsDefaultTransfer)
                                    {
                                        if (objSecondvchrtemp.VoucherNo != 0)
                                        {
                                            session.Save(objSecondvchrtemp);
                                            isSecondVoucherExists = true;
                                            secondvoucherId = objSecondvchrtemp.VoucherID;
                                            voucherID = objSecondvchrtemp;
                                            objvchrtemp.VoucherNo = objSecondvchrtemp.VoucherNo;
                                        }
                                        else
                                        {
                                            session.Transaction.Rollback();
                                            string status = "Voucher Number not generated";
                                            bool approve = false;
                                            object[] objVoucherTemp = { voucherId, 0, 0, approve, status, 0 };
                                            return objVoucherTemp;
                                        }
                                    }
                                }
                                if (objTransaction.FinTransactionType.TransactionTypeId != 2)
                                {
                                    #region Collection
                                    decimal actualcollectedamount = 0;
                                    #region log enter
                                    if (log.IsErrorEnabled == true)
                                    {
                                        if (usercredentials.IsDebugEnabled == true)
                                        {
                                            log.Error("Entering GetLoanApplicationno in SaveTransactionDetails");
                                        }
                                    }
                                    else
                                    {
                                        if (usercredentials.IsDebugEnabled == true)
                                        {
                                            log.Debug("Entering GetLoanApplicationno in SaveTransactionDetails");
                                        }
                                    }
                                    #endregion logend
                                    long applicationno = GetLoanApplicationno(objTransactionDTDTO.Product, objTransactionDTDTO.AccountNo, Convert.ToInt64(objTransactionDTDTO.AddmissionPkey), usercredentials.PacsId, usercredentials.BranchId);
                                    #region log enter
                                    if (log.IsErrorEnabled == true)
                                    {
                                        if (usercredentials.IsDebugEnabled == true)
                                        {
                                            log.Error("Leave GetLoanApplicationno in SaveTransactionDetails");
                                        }
                                    }
                                    else
                                    {
                                        if (usercredentials.IsDebugEnabled == true)
                                        {
                                            log.Debug("Leave GetLoanApplicationno in SaveTransactionDetails");
                                        }
                                    }
                                    if (repaymenttypeid == 1 || repaymenttypeid == 2)
                                    {
                                        var dcblist = GetDCBTempListForTermLoans(objTransactionDTDTO.DemandList, usercredentials, objTransactionDTDTO.Product, applicationno, objTransactionDTDTO.AccountNo, Convert.ToInt64(objTransactionDTDTO.AddmissionPkey), voucherId, objTransactionDTDTO.XML, objTransactionDTDTO.IsAllowExcessAmount);

                                        if (objTransaction.Activities.ActivityId == 5)
                                        {
                                            #region Advance Collection
                                            if (dcblist.Where(k => k.AdvancceAamount > 0).ToList().Count > 0)
                                            {
                                                AdvanceCollectionsTemp advancetemp = new AdvanceCollectionsTemp();
                                                advancetemp.AdmissionNo = Convert.ToInt64(objTransactionDTDTO.AddmissionPkey);
                                                advancetemp.Amount = dcblist.Sum(a => a.AdvancceAamount);
                                                advancetemp.ApplicationNo = applicationno;
                                                advancetemp.IDGeneratorForPacs = usercredentials.PacsId;
                                                advancetemp.InstallmentAmount = 0;
                                                advancetemp.Installmentamountsame = dcblist.Where(k => k.AdvancceAamount > 0).LastOrDefault().IsSameInstallment;
                                                advancetemp.LoanNo = objTransactionDTDTO.AccountNo;
                                                advancetemp.Outstandingbalnceamount = dcblist.Where(k => k.AdvancceAamount > 0).LastOrDefault().BalancePrincipal;
                                                advancetemp.product = objTransactionDTDTO.Product;
                                                advancetemp.Repaymentchartrebuild = !advancetemp.Installmentamountsame;
                                                advancetemp.SerialNumberOfPacs = usercredentials.PACSSerialNumber;
                                                advancetemp.TransactionDate = objTransactionDTDTO.TransactionDate;
                                                advancetemp.VoucherNo = voucherID.VoucherNo;
                                                advancetemp.VoucherPkey = voucherID.VoucherID;
                                                session.Save(advancetemp);
                                            }
                                            #endregion
                                        }

                                        if (objTransaction.Activities.ActivityId == 7)
                                        {
                                            dcblist.Select(p => { p.IsAdvanceCollection = false; p.IsSubsidyCollection = true; return p; }).ToList();
                                        }
                                        else
                                        {
                                            dcblist.Select(p => { p.IsAdvanceCollection = false; p.IsSubsidyCollection = false; return p; }).ToList();
                                        }
                                        actualcollectedamount = dcblist.Sum(i => i.CollectedPrincipal);
                                        if (dcblist.Count != 0 && dcblist != null)
                                        {
                                            var othertransrolllist = GetOtherTransrollsDCBTempDetails(objTransactionDTDTO, usercredentials.PacsId, usercredentials.BranchId);
                                            if (othertransrolllist != null && othertransrolllist.Count > 0)
                                            {
                                                othertransrolllist.Select(k =>
                                                {
                                                    k.ApplicationNo = applicationno;
                                                    k.Loanno = objTransactionDTDTO.AccountNo;
                                                    k.ProductCode = objTransactionDTDTO.Product;
                                                    k.RepaymentType = repaymenttypeid;
                                                    k.SerialNumberOfPacs = usercredentials.PACSSerialNumber;
                                                    k.IDGeneratorForPacs = usercredentials.PacsId;
                                                    k.TransactiondDate = objvchrtemp.TransactionDate.Value;
                                                    k.DueDate = dcblist.Max(i => i.DueDate);
                                                    k.PacsId = usercredentials.PacsId;
                                                    k.BranchId = usercredentials.BranchId;
                                                    k.VoucherID = voucherId;
                                                    return k;
                                                }).ToList();

                                                dcblist.AddRange(othertransrolllist);
                                            }
                                            DateTime maxinstallmentdate = dcblist.Max(i => i.DueDate);
                                            foreach (var dcbtemp in dcblist)
                                            {
                                                //if (_outstandingResults != null)
                                                //{
                                                //    var systemdemand = _outstandingResults.Where(i => i.ApplicationNo == v.ApplicationNo && i.Loanproduct.Slno == v.ProductCode && i.LoanNumber == v.Loanno && i.Duedate == v.DueDate).ToList();
                                                //    if(systemdemand!=null && systemdemand.Count>0)
                                                //    { 
                                                //        v.SInterest = systemdemand.Sum(i => i.Interest);
                                                //        v.SPenalInterest = systemdemand.Sum(i => i.PenalInterest);
                                                //        v.SIOD = systemdemand.Sum(i => i.Ioa);
                                                //        v.SOthers = 0;
                                                //    }
                                                //}
                                                dcbtemp.SInterest = _outstandingResults.Where(i => i.ApplicationNo == dcbtemp.ApplicationNo && i.Duedate <= maxinstallmentdate).Sum(i => i.Interest);
                                                dcbtemp.SPenalInterest = _outstandingResults.Where(i => i.ApplicationNo == dcbtemp.ApplicationNo && i.Duedate <= maxinstallmentdate).Sum(i => i.PenalInterest);
                                                dcbtemp.SIOD = _outstandingResults.Where(i => i.ApplicationNo == dcbtemp.ApplicationNo && i.Duedate <= maxinstallmentdate).Sum(i => i.Ioa);

                                                if (dcbtemp.OtherTransrollId != 0)
                                                {
                                                    dcbtemp.SOthers = _outstandingResults.Where(i => i.OtherAmountTransroll != null && i.Duedate <= maxinstallmentdate && i.OtherAmountTransroll.TransrollID == dcbtemp.OtherTransrollId).Sum(i => i.OtherAmount);
                                                }
                                                dcbtemp.TransactiondDate = objTransactionDTDTO.ValueDate;
                                                dcbtemp.Daybookdate = usercredentials.Logindatetime;// usercredentials.Logindatetime;
                                                dcbtemp.VoucherID = voucherId;
                                                dcbtemp.RepaymentType = repaymenttypeid;
                                                dcbtemp.IDGeneratorForPacs = usercredentials.PacsId;
                                                dcbtemp.SerialNumberOfPacs = usercredentials.PACSSerialNumber;
                                                session.Save(dcbtemp);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        IList<DemandCollectionBalanceDetailsTemp> dcbtemplist = new List<DemandCollectionBalanceDetailsTemp>();
                                        if (isSecondVoucherExists)
                                        {
                                            dcbtemplist = GetDCBDetailsTempWithSecondVoucher(objTransactionDTDTO, usercredentials.PacsId, usercredentials.BranchId, IsForSubvention, objTransaction.Activities.ActivityId, _outstandingResults);
                                        }
                                        else
                                        {
                                            dcbtemplist = GetDCBDetailsTemp(objTransactionDTDTO, usercredentials.PacsId, usercredentials.BranchId, IsForSubvention, objTransaction.Activities.ActivityId, _outstandingResults);
                                        }

                                        actualcollectedamount = dcbtemplist.Sum(i => i.CollectedPrincipal);
                                        decimal collectedinterest = dcbtemplist.Sum(k => k.CollectedInterest);
                                        decimal demandinterest = _outstandingResults.Sum(k => k.Interest);
                                        DateTime maxinstallmentdate = dcbtemplist.Max(i => i.DueDate);
                                        int rowcount = 1;
                                        foreach (var dcbtemp in dcbtemplist)
                                        {
                                            if (isSecondVoucherExists)
                                            {
                                                if (dcbtemp.CollectedPrincipal > 0)
                                                {
                                                    dcbtemp.VoucherID = voucherId;
                                                }
                                                else
                                                {
                                                    dcbtemp.VoucherID = secondvoucherId;
                                                }
                                            }
                                            else
                                            {
                                                dcbtemp.VoucherID = voucherId;
                                            }
                                            dcbtemp.Loanno = objTransactionDTDTO.AccountNo;
                                            dcbtemp.ApplicationNo = applicationno;
                                            dcbtemp.TransactiondDate = objTransactionDTDTO.ValueDate;
                                            dcbtemp.Daybookdate = usercredentials.Logindatetime;// usercredentials.Logindatetime;

                                            if (repaymenttypeid == 1 || repaymenttypeid == 2)
                                            {
                                                dcbtemp.SInterest = _outstandingResults.Where(i => i.ApplicationNo == dcbtemp.ApplicationNo && i.Duedate <= maxinstallmentdate).Sum(i => i.Interest);
                                                dcbtemp.SPenalInterest = _outstandingResults.Where(i => i.ApplicationNo == dcbtemp.ApplicationNo && i.Duedate <= maxinstallmentdate).Sum(i => i.PenalInterest);
                                                dcbtemp.SIOD = _outstandingResults.Where(i => i.ApplicationNo == dcbtemp.ApplicationNo && i.Duedate <= maxinstallmentdate).Sum(i => i.Ioa);
                                            }

                                            if (dcbtemp.OtherTransrollId != 0)
                                            {
                                                dcbtemp.SOthers = _outstandingResults.Where(i => i.OtherAmountTransroll != null && i.OtherAmountTransroll.TransrollID == dcbtemp.OtherTransrollId && i.Duedate <= maxinstallmentdate).Sum(i => i.OtherAmount);
                                            }
                                            var duedate = GetMaxDueDate(applicationno, usercredentials.PacsId, usercredentials.BranchId);
                                            if (duedate != null && duedate != new DateTime(1, 1, 1))
                                            {
                                                dcbtemp.DueDate = duedate.Value.Date;
                                            }
                                            else
                                            {
                                                dcbtemp.DueDate = usercredentials.Logindatetime;
                                            }
                                            //RijndaelEnhanced _encryptHash = new RijndaelEnhanced();
                                            //string _plaintext = Convert.ToString(dcbtemp.TransactiondDate) + "|" + Convert.ToString(dcbtemp.CollectedPrincipal) + "|" + Convert.ToString(dcbtemp.CollectedInterest) + "|" + Convert.ToString(dcbtemp.CollectedIOD) + "|" + Convert.ToString(dcbtemp.CollectedPenalInterest) + "|" + Convert.ToString(dcbtemp.CollectedOthers) + "|" + Convert.ToString(objvchrtemp.VoucherNo);
                                            //string _EncryptText = _encryptHash.Encrypt(_plaintext);
                                            //dcbtemp.SaltValue = _EncryptText;
                                            dcbtemp.RepaymentType = repaymenttypeid;
                                            dcbtemp.IDGeneratorForPacs = usercredentials.PacsId;
                                            dcbtemp.SerialNumberOfPacs = usercredentials.PACSSerialNumber;
                                            session.Save(dcbtemp);
                                            rowcount += 1;
                                        }
                                    }

                                    //need to prepare voucher for Excess amount - it is done for Raikal (even it is generic , request from Raikal-SOD loans)
                                    var details = objvchrtemp.VoucherDetailsTemp.Where(i => i.TransactionID == 40011 && i.PacsId == usercredentials.PacsId).ToList();
                                    if (details != null && details.Count > 0)
                                    {
                                        decimal actualdemand = _outstandingResults.Sum(i => i.Prinicipal);
                                        var principalvouchers = details.Where(i => i.TransrollID == 1).ToList();
                                        if (isAllowExcessAmount)
                                        {
                                            ExcessAmount = actualcollectedamount - actualdemand;
                                            if (ExcessAmount > 0)
                                            {
                                                VoucherDetailsTemp vouchertempforExcessamount = new VoucherDetailsTemp();
                                                ProductWiseActivities activityType = session.Load<ProductWiseActivities>(objTransactionDTDTO.ActivityType);


                                                vouchertempforExcessamount = FillVoucherDetailTempCashForOverDraft(objTransactionDTDTO, usercredentials, activityType, objvchrtemp.CashBookId, true, Convert.ToInt64(objTransactionDTDTO.AddmissionPkey), ExcessAmount, finyear);

                                                objvchrtemp.VoucherDetailsTemp.Add(vouchertempforExcessamount);
                                                if (principalvouchers != null && principalvouchers.Count > 0)
                                                {
                                                    principalvouchers.Where(i => i.AccountCode == vouchertempforExcessamount.AccountCode && i.TransrollID == 1).LastOrDefault().Credit = actualdemand;
                                                }

                                            }
                                        }
                                    }
                                    #endregion
                                    #endregion collection
                                }
                                else if (objTransaction.FinTransactionType.TransactionTypeId == 2)
                                {
                                    string moredisbursements = objTransactionDTDTO.MoreDisbursementDetailsXML;

                                    // MoreDisbursementDetails m`ore = GetMoreDisbursementDetails(moredisbursements, voucherId);
                                    more.PacsId = usercredentials.PacsId;
                                    more.BranchID = usercredentials.BranchId;
                                    more.IDGeneratorForPacs = usercredentials.PacsId;
                                    more.SerialNumberOfPacs = usercredentials.PACSSerialNumber;
                                    more.DisbursmentAmount = objTransactionDTDTO.TotalAmount != null ? objTransactionDTDTO.TotalAmount.Value : 0;
                                    more.VoucherId = voucherId;
                                    if (more.IsVocuherWithShareAmount)
                                    {
                                        more.DisbursmentAmount -= 2 * more.ShareAmount;
                                    }
                                    if (isAllowExcessAmount)
                                    {
                                        var details = objvchrtemp.VoucherDetailsTemp.Where(i => i.TransactionID == 40012 && i.PacsId == usercredentials.PacsId).ToList();

                                        var principalvouchers = details.Where(i => i.TransrollID == 1 || i.TransrollID == 555).ToList();
                                        if (principalvouchers != null && principalvouchers.Count > 0)
                                        {
                                            VoucherDetailsTemp vouchertempforExcessamount = new VoucherDetailsTemp();
                                            ProductWiseActivities activityType = session.Load<ProductWiseActivities>(objTransactionDTDTO.ActivityType);
                                            #region log enter
                                            if (log.IsErrorEnabled == true)
                                            {
                                                if (usercredentials.IsDebugEnabled == true)
                                                {
                                                    log.Error("Entering GetExcessAmount in SaveTransactionDetails");
                                                }
                                            }
                                            else
                                            {
                                                if (usercredentials.IsDebugEnabled == true)
                                                {
                                                    log.Debug("Entering GetExcessAmount in SaveTransactionDetails");
                                                }
                                            }
                                            #endregion logend
                                            decimal excessamount = GetExcessAmount(more.ApplicationNo, usercredentials.PacsId, usercredentials.BranchId);

                                            #region log enter
                                            if (log.IsErrorEnabled == true)
                                            {
                                                if (usercredentials.IsDebugEnabled == true)
                                                {
                                                    log.Error("Leave GetExcessAmount in SaveTransactionDetails");
                                                }
                                            }
                                            else
                                            {
                                                if (usercredentials.IsDebugEnabled == true)
                                                {
                                                    log.Debug("Leave GetExcessAmount in SaveTransactionDetails");
                                                }
                                            }
                                            #endregion logend

                                            if (excessamount > 0)
                                            {
                                                decimal eamount = excessamount - more.DisbursmentAmount;
                                                if (eamount >= 0)
                                                {
                                                    #region log enter
                                                    if (log.IsErrorEnabled == true)
                                                    {
                                                        if (usercredentials.IsDebugEnabled == true)
                                                        {
                                                            log.Error("Entering FillVoucherDetailTempCashForOverDraft in SaveTransactionDetails");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (usercredentials.IsDebugEnabled == true)
                                                        {
                                                            log.Debug("Entering FillVoucherDetailTempCashForOverDraft in SaveTransactionDetails");
                                                        }
                                                    }
                                                    #endregion logend
                                                    vouchertempforExcessamount = FillVoucherDetailTempCashForOverDraft(objTransactionDTDTO, usercredentials, activityType, objvchrtemp.CashBookId, false, Convert.ToInt64(objTransactionDTDTO.AddmissionPkey), more.DisbursmentAmount, finyear);
                                                    #region log enter
                                                    if (log.IsErrorEnabled == true)
                                                    {
                                                        if (usercredentials.IsDebugEnabled == true)
                                                        {
                                                            log.Error("Leave FillVoucherDetailTempCashForOverDraft in SaveTransactionDetails");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (usercredentials.IsDebugEnabled == true)
                                                        {
                                                            log.Debug("Leave FillVoucherDetailTempCashForOverDraft in SaveTransactionDetails");
                                                        }
                                                    }
                                                    #endregion logend
                                                    objvchrtemp.VoucherDetailsTemp.Add(vouchertempforExcessamount);
                                                    objvchrtemp.VoucherDetailsTemp.Remove(principalvouchers.Where(i => i.AccountCode == vouchertempforExcessamount.AccountCode && i.TransrollID == 1).LastOrDefault());
                                                }
                                                else
                                                {
                                                    #region log enter
                                                    if (log.IsErrorEnabled == true)
                                                    {
                                                        if (usercredentials.IsDebugEnabled == true)
                                                        {
                                                            log.Error("Entering FillVoucherDetailTempCashForOverDraft in SaveTransactionDetails");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (usercredentials.IsDebugEnabled == true)
                                                        {
                                                            log.Debug("Entering FillVoucherDetailTempCashForOverDraft in SaveTransactionDetails");
                                                        }
                                                    }
                                                    #endregion logend
                                                    vouchertempforExcessamount = FillVoucherDetailTempCashForOverDraft(objTransactionDTDTO, usercredentials, activityType, objvchrtemp.CashBookId, false, Convert.ToInt64(objTransactionDTDTO.AddmissionPkey), Math.Abs(excessamount), finyear);
                                                    #region log enter
                                                    if (log.IsErrorEnabled == true)
                                                    {
                                                        if (usercredentials.IsDebugEnabled == true)
                                                        {
                                                            log.Error("Leave FillVoucherDetailTempCashForOverDraft in SaveTransactionDetails");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (usercredentials.IsDebugEnabled == true)
                                                        {
                                                            log.Debug("Leave FillVoucherDetailTempCashForOverDraft in SaveTransactionDetails");
                                                        }
                                                    }
                                                    #endregion logend
                                                    objvchrtemp.VoucherDetailsTemp.Add(vouchertempforExcessamount);
                                                    principalvouchers.Where(i => i.AccountCode == vouchertempforExcessamount.AccountCode && i.TransrollID == 1).LastOrDefault().Debit = Math.Abs(eamount);
                                                }
                                            }

                                        }

                                    }
                                    if (more.IsVocuherWithShareAmount)
                                    {
                                        //here need to prepare new voucher for share amount and disbursement
                                        //new transfer voucher from disbursment account to share account
                                        //debit from disbursement account of Share amount
                                        //credit to share account     


                                        MoreDisbursementDetails moredisforshare = new MoreDisbursementDetails();
                                        moredisforshare = CopyDisbursementDetails(more);

                                        ProductWiseActivities activityType = session.Load<ProductWiseActivities>(objTransactionDTDTO.ActivityType);
                                        #region log enter
                                        if (log.IsErrorEnabled == true)
                                        {
                                            if (usercredentials.IsDebugEnabled == true)
                                            {
                                                log.Error("Entering FillNewVoucherForDoubleEntry in SaveTransactionDetails");
                                            }
                                        }
                                        else
                                        {
                                            if (usercredentials.IsDebugEnabled == true)
                                            {
                                                log.Debug("Entering FillNewVoucherForDoubleEntry in SaveTransactionDetails");
                                            }
                                        }
                                        #endregion logend
                                        var vmaintemp = FillNewVoucherForDoubleEntry(objTransactionDTDTO, usercredentials, more.AdmissionNoPkey, activityType, finyear, more.ShareAmount, sharevoucherno);
                                        #region log enter
                                        if (log.IsErrorEnabled == true)
                                        {
                                            if (usercredentials.IsDebugEnabled == true)
                                            {
                                                log.Error("Leave FillNewVoucherForDoubleEntry in SaveTransactionDetails");
                                            }
                                        }
                                        else
                                        {
                                            if (usercredentials.IsDebugEnabled == true)
                                            {
                                                log.Debug("Leave FillNewVoucherForDoubleEntry in SaveTransactionDetails");
                                            }
                                        }
                                        #endregion logend
                                        session.Save(vmaintemp);

                                        moredisforshare.IDGeneratorForPacs = usercredentials.PacsId;
                                        moredisforshare.SerialNumberOfPacs = usercredentials.PACSSerialNumber;
                                        moredisforshare.VoucherId = vmaintemp.VoucherID;

                                        session.Save(moredisforshare);

                                    }

                                    if (more != null)
                                    {
                                        more.IDGeneratorForPacs = usercredentials.PacsId;
                                        more.SerialNumberOfPacs = usercredentials.PACSSerialNumber;
                                        session.Save(more);
                                    }

                                }
                                //add by venkat s -storage bond status updatetion 28/06/2017
                                if (objTransactionDTDTO.StorageCodePkeys != "" && objTransactionDTDTO.StorageCodePkeys != null)
                                {
                                    Loans.BL.LoanApplicationBl commonbllST = new Loans.BL.LoanApplicationBl(session);
                                    #region log enter
                                    if (log.IsErrorEnabled == true)
                                    {
                                        if (usercredentials.IsDebugEnabled == true)
                                        {
                                            log.Error("Entering commonbllST.UpdateLoanStorageDetails in SaveTransactionDetails");
                                        }
                                    }
                                    else
                                    {
                                        if (usercredentials.IsDebugEnabled == true)
                                        {
                                            log.Debug("Entering commonbllST.UpdateLoanStorageDetails in SaveTransactionDetails");
                                        }
                                    }
                                    #endregion logend
                                    IList<LoansOnStorage> Lstloanst = commonbllST.UpdateLoanStorageDetails(objTransactionDTDTO.StorageCodePkeys, usercredentials.PacsId, usercredentials.BranchId, voucherId, false);
                                    #region log enter
                                    if (log.IsErrorEnabled == true)
                                    {
                                        if (usercredentials.IsDebugEnabled == true)
                                        {
                                            log.Error("Leave commonbllST.UpdateLoanStorageDetails in SaveTransactionDetails");
                                        }
                                    }
                                    else
                                    {
                                        if (usercredentials.IsDebugEnabled == true)
                                        {
                                            log.Debug("Leave commonbllST.UpdateLoanStorageDetails in SaveTransactionDetails");
                                        }
                                    }
                                    #endregion logend
                                    if (Lstloanst.Count > 0)
                                    {
                                        foreach (LoansOnStorage lnst in Lstloanst)
                                        {
                                            lnst.PacsID = usercredentials.PacsId;
                                            lnst.BranchID = usercredentials.BranchId;
                                            lnst.IDGeneratorForPacs = usercredentials.PacsId;
                                            lnst.SerialNumberOfPacs = usercredentials.PACSSerialNumber;
                                            lnst.VoucherId = voucherId;
                                            lnst.Status = "R";
                                            lnst.IsPosted = false;
                                            lnst.IDGeneratorForPacs = usercredentials.PacsId;
                                            lnst.SerialNumberOfPacs = usercredentials.PACSSerialNumber;
                                            session.Save(lnst);
                                        }
                                    }
                                }
                                //Added for Daily Activity Log start by Nishanth
                                #endregion Loans
                            }
                            else if (temp.FirstOrDefault().ProductTypeID.ProductTypeID == 2)
                            {
                                #region SB
                                TransactionBL objTransactionBL = new TransactionBL(session);
                                #region log enter
                                if (log.IsErrorEnabled == true)
                                {
                                    if (usercredentials.IsDebugEnabled == true)
                                    {
                                        log.Error("Entering objTransactionBL.GetTransactionID in SaveTransactionDetails");
                                    }
                                }
                                else
                                {
                                    if (usercredentials.IsDebugEnabled == true)
                                    {
                                        log.Debug("Entering objTransactionBL.GetTransactionID in SaveTransactionDetails");
                                    }
                                }
                                #endregion logend
                                long transactionid = objTransactionBL.GetTransactionID(objTransactionDTDTO.ActivityType);
                                #region log enter
                                if (log.IsErrorEnabled == true)
                                {
                                    if (usercredentials.IsDebugEnabled == true)
                                    {
                                        log.Error("Leave objTransactionBL.GetTransactionID in SaveTransactionDetails");
                                    }
                                }
                                else
                                {
                                    if (usercredentials.IsDebugEnabled == true)
                                    {
                                        log.Debug("Leave objTransactionBL.GetTransactionID in SaveTransactionDetails");
                                    }
                                }
                                #endregion logend
                                if (transactionid == 30013)
                                {
                                    #region log enter
                                    if (log.IsErrorEnabled == true)
                                    {
                                        if (usercredentials.IsDebugEnabled == true)
                                        {
                                            log.Error("Entering FillChequeWithdrawalTemp in SaveTransactionDetails");
                                        }
                                    }
                                    else
                                    {
                                        if (usercredentials.IsDebugEnabled == true)
                                        {
                                            log.Debug("Entering FillChequeWithdrawalTemp in SaveTransactionDetails");
                                        }
                                    }
                                    #endregion logend
                                    ChequeWithdrawalsTemp objChequeTemp = FillChequeWithdrawalTemp(objTransactionDTDTO, usercredentials, objvchrtemp);
                                    #region log enter
                                    if (log.IsErrorEnabled == true)
                                    {
                                        if (usercredentials.IsDebugEnabled == true)
                                        {
                                            log.Error("Leave FillChequeWithdrawalTemp in SaveTransactionDetails");
                                        }
                                    }
                                    else
                                    {
                                        if (usercredentials.IsDebugEnabled == true)
                                        {
                                            log.Debug("Leave FillChequeWithdrawalTemp in SaveTransactionDetails");
                                        }
                                    }
                                    #endregion logend
                                    objChequeTemp.VoucherNumber = objvchrtemp.VoucherNo;
                                    objChequeTemp.IDGeneratorForPacs = usercredentials.PacsId;
                                    objChequeTemp.SerialNumberOfPacs = usercredentials.PACSSerialNumber;
                                    session.Save(objChequeTemp);
                                }
                                #endregion SB
                            }
                        }

                        if (usercredentials.IsEnableDailyActivityLog == true)
                        {
                            Mdm.Model.DailyActivityLog _dailyActivityLog = DailyActivityLog.CreateDailyActivityLog(usercredentials.UserName, usercredentials.Logindatetime, objTransactionDTDTO.formid, objTransactionDTDTO.ProductTypeId, 1, usercredentials.PacsId, usercredentials.BranchId, usercredentials.PACSSerialNumber);

                            session.Save(_dailyActivityLog);
                        }
                        //Added for Daily Activity Log End

                        if (objvchrtemp.VoucherNo != 0)
                        {
                            trans.Commit(); 
                        }
                        else
                        {
                            session.Transaction.Rollback();
                            bool Approvelimit = false;
                            long voucherid = 0;
                            string status = "Voucher Number not generated";
                            object[] objVoucherTemp = { voucherId, 0, 0, Approvelimit, status, 0 };
                            return objVoucherTemp;
                        }
                        if (voucherID.VoucherID > 0)
                        {
                            voucherId = voucherID.VoucherID;
                        }
                        else
                        {
                            voucherId = objvchrtemp.VoucherID;
                        }
                    }

                    // fill transfer penalty voucher
                    if (objTransaction.ProductType.ProductTypeID == 12)
                    {
                        fillPigmyPenaltyVouchers(usercredentials, objTransactionDTDTO);
                    }

                }
                else
                {
                    voucherId = 0;
                    message = "No Enough Cash Balance!";
                }
                log.Debug(" Leaving into Transactionpost Voucher number" + objvchrtemp.VoucherNo);

                decimal debit = objvchrtemp.VoucherDetailsTemp.Sum(i => i.Debit);
                decimal credit = objvchrtemp.VoucherDetailsTemp.Sum(i => i.Credit);
                long voucherNo = objvchrtemp.VoucherNo;
                decimal voucheramount = objvchrtemp.Amount; 
                bool isApprovelimit = false;
                if(isSecondVoucherExists)
                {
                      debit = objSecondvchrtemp.VoucherDetailsTemp.Sum(i => i.Debit);
                      credit = objSecondvchrtemp.VoucherDetailsTemp.Sum(i => i.Credit);
                      voucherNo = objSecondvchrtemp.VoucherNo;
                    voucheramount = objSecondvchrtemp.Amount;
                }

                string sqlquery = "";
                //select MaxAmount from fa_voucherapprovallimits where Role=1 and PacsId='91362103290001' and BranchId='2001' and MinAmount<=100 and MaxAmount>=100 and TransactionType=1
                sqlquery = string.Format(@"select MaxAmount from fa_voucherapprovallimits where Role={0} and PacsId='{1}' and BranchId='{2}' and MinAmount<={3} and MaxAmount>={3} and TransactionType={4}", usercredentials.RoleId, usercredentials.PacsId, usercredentials.BranchId, voucheramount, objvchrtemp.TransactionType.TransactionTypeID);//;
                #region log enter
                if (log.IsErrorEnabled == true)
                {
                    if (usercredentials.IsDebugEnabled == true)
                    {
                        log.Error("Entering fa_voucherapprovallimits in SaveTransactionDetails  sqlquery:" + sqlquery);
                    }
                }
                else
                {
                    if (usercredentials.IsDebugEnabled == true)
                    {
                        log.Debug("Entering fa_voucherapprovallimits in SaveTransactionDetails  sqlquery:" + sqlquery);
                    }
                }
                #endregion logend
                decimal count = session.CreateSQLQuery(sqlquery).UniqueResult<decimal>();
                #region log enter
                if (log.IsErrorEnabled == true)
                {
                    if (usercredentials.IsDebugEnabled == true)
                    {
                        log.Error("Leave fa_voucherapprovallimits in SaveTransactionDetails  sqlquery:" + count);
                    }
                }
                else
                {
                    if (usercredentials.IsDebugEnabled == true)
                    {
                        log.Debug("Leave fa_voucherapprovallimits in SaveTransactionDetails  sqlquery:" + count);
                    }
                }
                #endregion logend
                if (count != 0)
                {
                    isApprovelimit = true;
                }
                if (voucherNo == 0 && message == "")
                {
                    message = "Assign Voucher sequence for daywise or yearwise";
                }
                object[] objVoucherId = { voucherId, debit, credit, isApprovelimit, message, voucherNo };
                return objVoucherId;
            }
            catch (Exception ex)
            {
                log.Error(ex);
                bool isApprovelimit = false;
                long voucherid = 0;
                string status = "Exception occured at:  SaveTransactionDetails";
                object[] objVoucherTemp = { voucherid, 0, 0, isApprovelimit, status, 0 };
                return objVoucherTemp;
            }

        }

        public object[] SaveTransactionDetailsForMultipleVouchers(TransactionDTO objTransactionDTDTO, UserCredentials usercredentials, IList<OutStandingResults> _outstandingResults, [Optional]bool isTabData)
        {
            #region log enter
            if (log.IsErrorEnabled == true)
            {
                if (usercredentials.IsDebugEnabled == true)
                {
                    log.Error("Enter SaveTransactionDetails ");
                }
            }
            else
            {
                if (usercredentials.IsDebugEnabled == true)
                {
                    log.Debug("Enter SaveTransactionDetails");
                }
            }
            #endregion logend
            //log.Debug("SaveTransactionDetails, Entered");
            try
            {
                TransactionBL objTransactionBL = new TransactionBL(session);
               
                //{ voucherid, 0, 0, isApprovelimit, status, 0 };
                object[] voucherstatus = { 0, 0, 0, true, "", 0 };

                if (objTransactionDTDTO.ActivityType == 188000001) // For Pigmy Module 
                {
                    long transactionid = objTransactionBL.GetTransactionID(objTransactionDTDTO.ActivityType);

                     var activitymaster = GetProductTypeIdFromActivityTypeMaster(objTransactionDTDTO.ActivityType);
                     TransactionDTO lobjTransactionDTDTO = objTransactionDTDTO;

                    decimal PenaltyAmount  = 0;
                    decimal DepositAmt = 0;
                    PenaltyAmount = lobjTransactionDTDTO.NonCumulativePenalty;
                    DepositAmt = lobjTransactionDTDTO.TotalAmount.Value;

                   

                    long voucherid = 0;
                    decimal debit = 0.0m;
                    decimal credit = 0.0m;
                    bool approvallimitstatus = false;
                    string errormessage = string.Empty;

                     if (activitymaster.Activities.ActivityId == 6 ) // for Foreclosure Transaction 
                        {
                            if (lobjTransactionDTDTO.NonCumulativePenalty > 0) //If Penalty Amount Exists 
                            {
                                lobjTransactionDTDTO.Amount = DepositAmt;
                                lobjTransactionDTDTO.TotalAmount = DepositAmt;
                                lobjTransactionDTDTO.NonCumulativePenalty = 0;

                                //1. Voucher-1: For Pigmy Deposit Amount 
                                voucherstatus = (object[])SaveTransactionDetails(lobjTransactionDTDTO, usercredentials, _outstandingResults, isTabData);

                                voucherid = Convert.ToInt64(voucherstatus[0]);
                                debit = Convert.ToDecimal(voucherstatus[1]);
                                credit = Convert.ToDecimal(voucherstatus[2]);
                                approvallimitstatus = Convert.ToBoolean(voucherstatus[3]);
                                errormessage = Convert.ToString(voucherstatus[4]);

                                log.DebugFormat(@"Pigmy Deposit Voucher generated successfully, VoucherID-{0}, Debit-{1}, Credit - {2}, Message - {3}
                                                 ", voucherid, debit, credit, errormessage);
                                 

                                lobjTransactionDTDTO.Amount = PenaltyAmount;
                                lobjTransactionDTDTO.NonCumulativePenalty = 0;
                                lobjTransactionDTDTO.VoucherType = 2; //For Default Transfer voucher 

                                //2. Voucher-2: For Penalty Amount for Pigmy Foreclosure
                                object[] voucherstatus1;
                                 voucherstatus1 = (object[])SaveTransactionDetails(lobjTransactionDTDTO, usercredentials, _outstandingResults, isTabData);

                                 voucherid = Convert.ToInt64(voucherstatus1[0]);
                                 debit = Convert.ToDecimal(voucherstatus1[1]);
                                 credit = Convert.ToDecimal(voucherstatus1[2]);
                                 approvallimitstatus = Convert.ToBoolean(voucherstatus1[3]);
                                 errormessage = Convert.ToString(voucherstatus1[4]);

                                 log.DebugFormat(@"Pigmy Deposit Voucher generated successfully, VoucherID-{0}, Debit-{1}, Credit - {2}, Message - {3}
                                                 ", voucherid, debit, credit, errormessage);
                                 
                            }
                            else // if No Penalty exists 
                            {
                                //1. Voucher-1: For Pigmy Deposit Amount 
                                voucherstatus = (object[])SaveTransactionDetails(lobjTransactionDTDTO, usercredentials, _outstandingResults, isTabData);
                                
                                voucherid = Convert.ToInt64(voucherstatus[0]);
                                debit = Convert.ToDecimal(voucherstatus[1]);
                                credit = Convert.ToDecimal(voucherstatus[2]);
                                approvallimitstatus = Convert.ToBoolean(voucherstatus[3]);
                                errormessage = Convert.ToString(voucherstatus[4]);

                                log.DebugFormat(@"Pigmy Deposit Voucher generated successfully, VoucherID-{0}, Debit-{1}, Credit - {2}, Message - {3}
                                                 ", voucherid, debit, credit, errormessage);
                                 
                            }

                          

                         
                     }
                   // if (transactionid)
                }
                return voucherstatus;
            }
            catch (Exception ex)
            {
                log.Error(ex);
                bool isApprovelimit = false;
                long voucherid = 0;
                string status = "Exception occured at:  SaveTransactionDetailsForMultipleVouchers";
                object[] objVoucherTemp = { voucherid, 0, 0, isApprovelimit, status, 0 };
                return objVoucherTemp;
            }

        }

        public decimal GetExcessAmount(long applicationno, long pacsid, int branchid)
        {
            decimal excessamount = 0;
            try
            {
                string sqlquery = string.Empty;
                sqlquery = UniteERPQuery.VoucherProcessing.GetExcessAmount();
               // sqlquery = @"select isnull( sum(excessamount),0) ExcessAmount from ln_outstandings where applicationno='" + applicationno + "' and pacsid='" + pacsid + "' and branchid='" + branchid + "'";
                excessamount = 0;
                excessamount = session.CreateSQLQuery(sqlquery)
                    .SetParameter("applicationno", applicationno)
                    .SetParameter("pacsid", pacsid)
                    .SetParameter("branchid", branchid)
                    .UniqueResult<decimal>();
                return excessamount;
            }
            catch (Exception ex)
            {
                log.Error(ex);
                return excessamount;
            }
        }


        public IList<TransactionTypeMasterDTO> GetTransactionsList(string voucherdetails)
        {
            XmlDocument xd = new XmlDocument();
            xd.LoadXml(voucherdetails);
            TransactionTypeMasterDTO obj;
            var listTransaction = new List<TransactionTypeMasterDTO>();
            try
            {
                XmlNodeList xnList = xd.SelectNodes("/Temp/row");
                foreach (XmlNode xn in xnList)
                {
                    obj = new TransactionTypeMasterDTO();
                    obj.Ledger = Convert.ToInt64(xn["LedgerID"].InnerText);
                    obj.LedgerDescription = xn["LedgerDescription"].InnerText;
                    obj.TransrollID = Convert.ToInt32(xn["TransrollID"].InnerText);
                    obj.TransrollDescription = xn["TransrollDescription"].InnerText;
                    obj.Amount = Convert.ToDecimal(xn["Amount"].InnerText);
                    listTransaction.Add(obj);

                }
                return listTransaction;
            }
            catch (Exception ex)
            {
                ////TransactionErrorLogBL.TrackErrorLog(ex.Message, GlobalUserCredentials);
                log.Error(ex);
                return null;
            }
        }
        public object[] SaveTransactionDetailsForBackDate(TransactionDTO objTransactionDTDTO, UserCredentials usercredentials, IList<OutStandingResults> _outstandingResults)
        {
             
            try
            {

                FinancialYearMaster finyear = GetFinancialYearCode(objTransactionDTDTO.TransactionDate);
                List<KCCCreditLimitApplicationDtls> lstDccbApproval = new List<KCCCreditLimitApplicationDtls>();
                int producttypeid = objTransactionDTDTO.ProductTypeId;
                ProductWiseActivities objTransaction = session.Load<ProductWiseActivities>(objTransactionDTDTO.ActivityType);
                var translist = GetTransactionsList(objTransactionDTDTO.XML);
                AccountDetails accountdetails = new AccountDetails();
                if (objTransactionDTDTO.AccountPkey != null && objTransactionDTDTO.AccountPkey > 0)
                {
                    accountdetails = session.Load<AccountDetails>(objTransactionDTDTO.AccountPkey);
                    if (accountdetails != null && accountdetails.AccountID > 0)
                    {
                        objTransactionDTDTO.AccountNo = accountdetails.AccountCode;
                        objTransactionDTDTO.AccountCode = accountdetails.AccountCode;
                    }
                }
                session.BeginTransaction();

                VoucherMainTemp objvchrtemp = FillNewVoucher(objTransactionDTDTO, usercredentials, Convert.ToInt64(objTransactionDTDTO.AddmissionPkey), objTransaction, finyear);

                switch (producttypeid)
                {
                    case 1:
                        MembershipGetBL memberbll = new MembershipGetBL(session);
                        memberbll.SaveShareTransactions(objvchrtemp, usercredentials, true);
                        break;
                    case 2:
                        SavingsDepositsBL savingbll = new SavingsDepositsBL(session);
                        savingbll.SaveOtherDepositTransactionsForBackDate(objvchrtemp, usercredentials);
                        break;
                    case 3://Loans
                        #region Loans
                        LoansVoucherPostingBL bll = new LoansVoucherPostingBL(session);
                        long applicationno = GetLoanApplicationno(objTransactionDTDTO.Product, objTransactionDTDTO.AccountNo, Convert.ToInt64(objTransactionDTDTO.AddmissionPkey), usercredentials.PacsId, usercredentials.BranchId);
                        int repaymenttype = GetRepaymentTypeId(objTransactionDTDTO.Product, usercredentials.PacsId, usercredentials.BranchId);

                        if (objTransaction.FinTransactionType.TransactionTypeId != 2) //Collections
                        {
                            var dcbtemplist = GetDCBDetails(objTransactionDTDTO, usercredentials.PacsId, usercredentials.BranchId, applicationno);
                            List<DemandCollectionBalanceDetails> dcblist = new List<DemandCollectionBalanceDetails>();
                            foreach (var dcbtemp in dcbtemplist)
                            {
                                //  dcbtemp.VoucherID = null;
                                dcbtemp.Loanno = objTransactionDTDTO.AccountNo;
                                dcbtemp.ApplicationNo = applicationno;
                                dcbtemp.TransactiondDate = usercredentials.Logindatetime;

                              


                                if (dcbtemp.OtherTransrollId == 0)
                                {
                                    dcbtemp.SInterest = _outstandingResults.Where(i => i.ApplicationNo == dcbtemp.ApplicationNo).Sum(i => i.Interest);
                                    dcbtemp.SPenalInterest = _outstandingResults.Where(i => i.ApplicationNo == dcbtemp.ApplicationNo).Sum(i => i.PenalInterest);
                                    dcbtemp.SIOD = _outstandingResults.Where(i => i.ApplicationNo == dcbtemp.ApplicationNo).Sum(i => i.Ioa);
                                }
                                else
                                {
                                    dcbtemp.SOthers = _outstandingResults.Where(i => i.OtherAmountTransroll != null && i.OtherAmountTransroll.TransrollID == dcbtemp.OtherTransrollId).Sum(i => i.OtherAmount);
                                }
                                var duedate = GetMaxDueDate(applicationno, usercredentials.PacsId, usercredentials.BranchId);
                                if (duedate != null && duedate != new DateTime(1, 1, 1))
                                {
                                    dcbtemp.DueDate = duedate.Value.Date;
                                }
                                else
                                {
                                    dcbtemp.DueDate = usercredentials.Logindatetime;
                                }

                                dcbtemp.RepaymentType = repaymenttype;
                                session.Save(dcbtemp);
                                dcblist.Add(dcbtemp);
                            }



                            var outstandings = bll.PrepareOutstandingsObject(objvchrtemp.VoucherID, usercredentials, applicationno, dcblist, usercredentials.Logindatetime, session);
                            foreach (var v in outstandings)
                            {
                                session.Merge(v);
                            }
                            accountdetails.OBDebitAmount = outstandings.Sum(i => i.OutstandingAmount);
                            session.Merge(accountdetails);
                        }
                        else //Disbursements
                        {
                            LoansDisbursementsVoucherPostingBL disbll = new LoansDisbursementsVoucherPostingBL(session);
                            string moredisbursements = objTransactionDTDTO.MoreDisbursementDetailsXML;
                            MoreDisbursementDetails more = GetMoreDisbursementDetails(moredisbursements, 0);
                            more.PacsId = usercredentials.PacsId;
                            more.BranchID = usercredentials.BranchId;
                            more.IDGeneratorForPacs = usercredentials.PacsId;
                            more.SerialNumberOfPacs = usercredentials.PACSSerialNumber;
                            ProductDetails pd = bll.GetLoanProductDetails(usercredentials.PacsId, usercredentials.BranchId, objTransactionDTDTO.Product, usercredentials.Logindatetime, usercredentials.UserLevel, usercredentials.StateId, usercredentials.DistrictId);
                            log.Debug("Product Details found.");
                            int disbursalid = disbll.GetMaxDisbursalIdByApplicationNo(applicationno, session) + 1;
                            log.Debug("Got Disbursal id for applicationno" + disbursalid);
                            LoanApplicationMain ApplicationMain = bll.GetLoanApplicationMainDetailsAdmissionnoAccountno(more.AdmissionNoPkey, more.LoanNo, more.ProductSlNo, usercredentials.PacsId, usercredentials.BranchId, session);
                            DateTime duedate = ApplicationMain.SanctionDetails[0].DueDate.Value;

                            decimal roi = 0, penalroi = 0, ioaroi = 0;
                            roi = ApplicationMain.SanctionDetails[0].Interest;
                            penalroi = ApplicationMain.SanctionDetails[0].PenalInterest;
                            ioaroi = ApplicationMain.SanctionDetails[0].IOAROI;
                            int loanperiodmonths = ApplicationMain.SanctionDetails[0].LoanPeriodMonths;

                            Disbursements _disbursements = GetDisbursementsObject(usercredentials.Logindatetime, usercredentials.PacsId, usercredentials.BranchId, applicationno, more.LoanNo, disbursalid, ApplicationMain.ProductID, duedate);
                            if (more != null)
                            {
                                _disbursements.DebitSlipNo = more.DebitSlipNo;
                                _disbursements.LedgerFolioNo = more.LedgerFolioNo;
                                _disbursements.DpnDate = more.DPNDate;
                                _disbursements.DpnNo = more.DPNNo;
                                _disbursements.OldLoanNo = more.OldLoanNo;
                                _disbursements.DCCBLoanNo = more.DCCBLoanNo;
                                _disbursements.TransRollId = 1;
                                _disbursements.DateofAdvice = _disbursements.DateofAdvice;
                                _disbursements.ApplicationNo = ApplicationMain.ApplicationNo;
                                _disbursements.DisbursalDate = Convert.ToDateTime(more.DateOfAdvice);
                                _disbursements.Daybookdate = usercredentials.Logindatetime;
                                _disbursements.IDGeneratorForPacs = usercredentials.PacsId;
                                _disbursements.SerialNumberOfPacs = usercredentials.PACSSerialNumber;
                                _disbursements.Daybookdate = usercredentials.Logindatetime;
                                duedate = more.DueDate;
                            }
                            _disbursements.DisbursementAmount = translist.Sum(i => i.Amount);
                            session.Save(_disbursements);
                            log.Debug("Disbursment details saved");
                            Outstandings _outstandings = GetOutstandingsObject(_disbursements, more.AdmissionNoPkey, roi, penalroi, ioaroi, _disbursements.DisbursementAmount, duedate, session, usercredentials);
                            _outstandings.OutstandingDate = _disbursements.DisbursalDate;
                            _outstandings.Daybookdate = usercredentials.Logindatetime;
                            _outstandings.IDGeneratorForPacs = usercredentials.PacsId;
                            _outstandings.SerialNumberOfPacs = usercredentials.PACSSerialNumber;
                            _outstandings.Daybookdate = usercredentials.Logindatetime;
                            session.Save(_outstandings);
                            if (pd.InterestPolicies != null && pd.InterestPolicies.Count > 0)
                            {

                                if (pd.InterestPolicyTypeDescription.PolicyTypeID == 2)
                                {
                                    if (pd.RepaymentTypeId.RepaymentTypeId == 3 || pd.RepaymentTypeId.RepaymentTypeId == 4)
                                    {
                                        IList<MemberWisePolicy> _memberwisePolicies = disbll.GetMemberwisePolicyDetails(objTransactionDTDTO.Product, usercredentials.PacsId, usercredentials.BranchId, usercredentials.Logindatetime, applicationno, listTransaction.Sum(i => i.Amount), _disbursements.Disbursementid, ApplicationMain, session, pd, usercredentials.UserLevel, usercredentials.StateId, usercredentials.DistrictId);
                                        if (_memberwisePolicies != null && _memberwisePolicies.Count > 0)
                                        {
                                            roi = _memberwisePolicies.FirstOrDefault().ROI;
                                            penalroi = _memberwisePolicies.FirstOrDefault().PenalRoI;
                                            ioaroi = _memberwisePolicies.FirstOrDefault().IOAROI;
                                            foreach (var v in _memberwisePolicies)
                                            {
                                                v.IDGeneratorForPacs = usercredentials.PacsId;
                                                v.SerialNumberOfPacs = usercredentials.PACSSerialNumber;
                                                session.Save(v);
                                                log.Debug("Memberwise policy saved." + v.DisbursementSlno);
                                            }
                                        }
                                        else
                                        {
                                            log.Error("Memberwise policy could not found.");
                                            //return false;
                                        }

                                    }
                                }
                                else if (pd.InterestPolicyTypeDescription.PolicyTypeID == 1)
                                {
                                    Loans.BL.LoansCommonMasterBl commonbll = new Loans.BL.LoansCommonMasterBl(session);
                                    var policyFiltersList = commonbll.CheckPolicyFileter(ApplicationMain, _outstandings.OutstandingAmount, usercredentials.Logindatetime, loanperiodmonths,
                               usercredentials);
                                    var listofInterestPolicyResults = commonbll.ViewInterestPolicy(_outstandings.ProductCode, usercredentials.Logindatetime,
                                        policyFiltersList, usercredentials, null);
                                    if (listofInterestPolicyResults != null && listofInterestPolicyResults.Count > 0)
                                    {
                                        foreach (var policy in listofInterestPolicyResults)
                                        {
                                            var obj = policy.ToString();
                                            var objArray = obj.Split('=', ',', '{', '}');
                                            penalroi = Convert.ToDecimal(objArray[8]);
                                            roi = Convert.ToDecimal(objArray[6]);
                                            var date = objArray[10];
                                            ioaroi = Convert.ToDecimal(objArray[12]);
                                        }
                                    }
                                }
                            }
                            else
                            {
                                roi = more.ROI;
                                penalroi = more.PenalROI;
                                ioaroi = more.IOAROI;
                                MemberWisePolicy policy = new MemberWisePolicy();
                                policy.Admissionno = more.AdmissionNoPkey;
                                policy.BranchId = usercredentials.BranchId;
                                policy.DisbursalDate = usercredentials.Logindatetime;
                                policy.DisbursementSlno = _outstandings.DisbursementSlno;
                                policy.IOAROI = ioaroi;
                                policy.LoanNo = more.LoanNo;
                                policy.PacsId = usercredentials.PacsId;
                                policy.IDGeneratorForPacs = usercredentials.PacsId;
                                policy.SerialNumberOfPacs = usercredentials.PACSSerialNumber;
                                policy.PenalRoI = penalroi;
                                policy.PolicyDate = usercredentials.Logindatetime;
                                policy.PolicyName = more.PolicyName;
                                policy.Productcode = _outstandings.ProductCode.Slno;
                                policy.ROI = roi;
                                session.Save(policy);
                            }
                            _outstandings.ROI = roi;
                            _outstandings.PenalROI = penalroi;
                            _outstandings.IOAROI = ioaroi;
                            _outstandings.ApplicationNo = ApplicationMain.ApplicationNo;
                            _outstandings.IDGeneratorForPacs = usercredentials.PacsId;
                            _outstandings.SerialNumberOfPacs = usercredentials.PACSSerialNumber;
                            _outstandings.Daybookdate = usercredentials.Logindatetime;
                            session.Save(_outstandings);
                            accountdetails.OBDebitAmount += _disbursements.DisbursementAmount;
                            session.Merge(accountdetails);
                            log.Debug("Outstandings object saved");
                            ApplicationMain.LoanStatus = session.Load<LoanStatusMaster>(4);
                            session.Merge(ApplicationMain);
                        }
                        #endregion
                        break;
                    case 5://Term Deposits
                        VoucherDeletionBL voucherdeleteionbll = new VoucherDeletionBL(session);
                        if (objvchrtemp.VoucherDetailsTemp[0].TransactionID == 90013)//Termdeposit Interest Payment
                        {
                            voucherdeleteionbll.SaveRDInterestPaymentBackDate(objvchrtemp.VoucherDetailsTemp[0].AccountCode.AccountID, usercredentials.PacsId, usercredentials.BranchId, objvchrtemp.TransactionDate.Value.Date, objvchrtemp.Amount, objvchrtemp.VoucherDetailsTemp[0].AccountCode.AccountCode, usercredentials.PACSSerialNumber);
                        }
                        else if (objvchrtemp.VoucherDetailsTemp[0].TransactionID == 90012)//RD Payment
                        {
                            voucherdeleteionbll.SaveRDPaymentDetaislForBackDate(objvchrtemp.VoucherDetailsTemp[0].AccountCode.AccountID, usercredentials.PacsId, usercredentials.BranchId, objvchrtemp.TransactionDate.Value.Date, objvchrtemp.Amount, objvchrtemp.VoucherDetailsTemp[0].AccountCode.AccountCode, usercredentials.PACSSerialNumber);
                        }
                        break;
                    default:
                        break;
                }
                session.Transaction.Commit();
               

                return new object[] { 1, 100, 100, 100, "Success" };
            }
            catch (Exception ex)
            {
                ////TransactionErrorLogBL.TrackErrorLog(ex.Message, GlobalUserCredentials);
                log.Error(ex);
                return null;
            }
        }

      

        /// <summary>
        /// 
        /// </summary>
        /// <param name="objTransactionDTDTO"></param>
        /// <param name="usercredentials"></param>
        /// <returns></returns>
        public object[] SaveTransactionDetailsForMissingTransactions(TransactionDTO objTransactionDTDTO, UserCredentials usercredentials, IList<OutStandingResults> _outstandingResults)
        {
            try
            {

                FinancialYearMaster finyear = GetFinancialYearCode(objTransactionDTDTO.TransactionDate);

                ProductWiseActivities objTransaction = session.Load<ProductWiseActivities>(objTransactionDTDTO.ActivityType);
                if (objTransactionDTDTO.ProductTypeId == 3)
                {
                    Intellect.Unite.WebPackages.Loans.BL.LoansCommonMasterBl commonbl = new Loans.BL.LoansCommonMasterBl(session);

                    var productdetails = commonbl.GetProductDetailsByProductCode(objTransactionDTDTO.Product, usercredentials.PacsId, usercredentials.BranchId, usercredentials.Logindatetime, usercredentials.UserLevel, usercredentials.StateId, usercredentials.DistrictId);
                    if (productdetails.RepaymentTypeId.RepaymentTypeId == 3 || productdetails.RepaymentTypeId.RepaymentTypeId == 4)
                    {
                        if (objTransaction.Activities.ActivityId != 8 && objTransaction.Activities.ActivityId != 4)
                        {
                            var adjustmentdetails = productdetails.Productadjustment;
                            if (adjustmentdetails != null && adjustmentdetails.Count > 0)
                            {
                                objTransactionDTDTO.XML = BuildAdjustmentOrder(objTransactionDTDTO, adjustmentdetails);
                            }
                        }
                    }
                }

                log.Debug("Entering SaveShareAllotedDetails");

                if (objTransactionDTDTO.AccountPkey != null && objTransactionDTDTO.AccountPkey > 0)
                {
                    var accountdetails = session.Load<AccountDetails>(objTransactionDTDTO.AccountPkey);
                    if (accountdetails != null && accountdetails.AccountID > 0)
                    {
                        objTransactionDTDTO.AccountNo = accountdetails.AccountCode;
                        objTransactionDTDTO.AccountCode = accountdetails.AccountCode;
                    }
                }
                //SWActivityTypeMaster objTransaction = session.Load<SWActivityTypeMaster>(objTransactionDTDTO.ActivityType);


                VoucherMainTemp objvchrtemp = FillNewVoucher(objTransactionDTDTO, usercredentials, Convert.ToInt64(objTransactionDTDTO.AddmissionPkey), objTransaction, finyear);

                var voucherdetailstemp = objvchrtemp.VoucherDetailsTemp;
                var cashvoucher = voucherdetailstemp.Where(i => i.TransrollID == 99).FirstOrDefault();

                bool IsForSubvention = false;
                if (objTransaction.Activities.ActivityId == 8)
                {
                    IsForSubvention = true;

                }
                bool allowTransaction = false;
                if (objvchrtemp.VoucherType.VoucherTypeID == 1)//cash
                {
                    if ((objvchrtemp.TransactionType.TransactionTypeID == 1) || (cashvoucher != null && cashvoucher.BalanceAmount > 0))
                    {
                        allowTransaction = true;
                    }
                    else
                    {
                        allowTransaction = false;
                    }
                }
                else if (objvchrtemp.VoucherType.VoucherTypeID == 2 || objvchrtemp.VoucherType.VoucherTypeID == 3)//transfer
                {
                    allowTransaction = true;
                }
                string message = string.Empty;
                long voucherId = 0;
                if (allowTransaction)
                {
                    if (objvchrtemp.VoucherNo == 0)
                    {
                        log.Debug("Entering objvchrtemp.VoucherNo in SaveTransactionDetailsForMissingTransactions");
                        objvchrtemp.VoucherNo = GetMaxVoucherNumber(Convert.ToDateTime(objvchrtemp.TransactionDate), usercredentials.UserName, usercredentials.PacsId, usercredentials.BranchId, usercredentials.PACSSerialNumber, objvchrtemp.TransactionType.TransactionTypeID, finyear.YearCode);

                        log.Debug("leaved objvchrtemp.VoucherNo in SaveTransactionDetailsForMissingTransactions");

                        if (objvchrtemp.VoucherNo == 0)
                        {
                            message = "Could Not Generate Voucher No";
                            voucherId = 0;

                        }
                    }

                    session.Clear();
                    session.BeginTransaction();
                    if (objTransactionDTDTO.objDenominationDTO != null)
                    {
                        IList<Denominations> objDenominations = new List<Denominations>();
                        objDenominations = FillDenaminationDetails(objTransactionDTDTO.objDenominationDTO, usercredentials.PacsId, usercredentials.BranchId, objTransaction.FinTransactionType.TransactionTypeId, objTransactionDTDTO.TransactionDate, objvchrtemp.CashBookId);
                        if (objDenominations[0].TotalAmount != 0 || objDenominations[1].TotalAmount != 0)
                        {
                            if (objDenominations.Count > 0)
                            {
                                foreach (var denomination in objDenominations)
                                {
                                    if (denomination.TotalAmount != 0)
                                    {
                                        denomination.VoucherNumber = objvchrtemp.VoucherNo;
                                        session.Save(denomination);
                                    }
                                }
                            }
                        }
                    }
                    var temp = objvchrtemp.VoucherDetailsTemp;
                    VoucherControlRecord objControlRecords = SaveControlRecord(objvchrtemp, usercredentials, objTransaction.Activities.ActivityId, objTransactionDTDTO);
                    objControlRecords.IDGeneratorForPacs = usercredentials.PacsId;
                    objControlRecords.SerialNumberOfPacs = usercredentials.PACSSerialNumber;
                    session.Save(objControlRecords);
                    if (objvchrtemp.VoucherNo != 0 && objvchrtemp.VoucherID != 0)
                    {
                        log.Debug("leaved objvchrtemp.VoucherNo in SaveTransactionDetailsForMissingTransactions after SaveControlRecord");
                        objvchrtemp.VoucherNo = GetMaxVoucherNumber(Convert.ToDateTime(objvchrtemp.TransactionDate), usercredentials.UserName, usercredentials.PacsId, usercredentials.BranchId, usercredentials.PACSSerialNumber, objvchrtemp.TransactionType.TransactionTypeID, finyear.YearCode);
                        log.Debug("leaved objvchrtemp.VoucherNo in SaveTransactionDetailsForMissingTransactions after SaveControlRecord");
                    }

                    if (transferslist.Count > 0)
                    {
                        foreach (var objTrans in transferslist)
                        {
                            objTrans.VoucherNo = objvchrtemp.VoucherNo;
                            objTrans.BatchId = Convert.ToInt64(objvchrtemp.BatchId);
                            session.SaveOrUpdate(objTrans);
                        }
                        session.SaveOrUpdate(objvchrtemp);
                    }
                    else
                    {
                        session.Save(objvchrtemp);
                    }
                    //RijndaelEnhanced _encryptHash2 = new RijndaelEnhanced();
                    //string _plaintext2 = Convert.ToString(objvchrtemp.TransactionDate) + "|" + Convert.ToString(objvchrtemp.Amount) + "|" + Convert.ToString(objvchrtemp.VoucherNo);
                    //string _EncryptText2 = _encryptHash2.Encrypt(_plaintext2);
                    // objvchrtemp.SaltValue = _EncryptText2;


                    if (objTransactionDTDTO.ProductTypeId != null)
                    {
                        if (objTransactionDTDTO.ProductTypeId == 3)
                        {
                            if (objTransaction.FinTransactionType.TransactionTypeId != 2)
                            {


                                long applicationno = GetLoanApplicationno(objTransactionDTDTO.Product, objTransactionDTDTO.AccountNo, Convert.ToInt64(objTransactionDTDTO.AddmissionPkey), usercredentials.PacsId, usercredentials.BranchId);
                                int repaymenttype = GetRepaymentTypeId(objTransactionDTDTO.Product, usercredentials.PacsId, usercredentials.BranchId);
                                if (repaymenttype == 1 || repaymenttype == 2)
                                {
                                    var dcblist = GetDCBTempListForTermLoans(objTransactionDTDTO.DemandList, usercredentials, objTransactionDTDTO.Product, applicationno, objTransactionDTDTO.AccountNo, Convert.ToInt64(objTransactionDTDTO.AddmissionPkey), objvchrtemp.VoucherID, objTransactionDTDTO.XML, objTransactionDTDTO.IsAllowExcessAmount);
                                    var othertransrolllist = GetOtherTransrollsDCBTempDetails(objTransactionDTDTO, usercredentials.PacsId, usercredentials.BranchId);
                                    if (othertransrolllist != null && othertransrolllist.Count > 0)
                                    {
                                        dcblist.AddRange(othertransrolllist);
                                    }
                                    foreach (var dcbtemp in dcblist)
                                    {
                                        //if (_outstandingResults != null)
                                        //{
                                        //    var systemdemand = _outstandingResults.Where(i => i.ApplicationNo == v.ApplicationNo && i.Loanproduct.Slno == v.ProductCode && i.LoanNumber == v.Loanno && i.Duedate == v.DueDate).ToList();
                                        //    if(systemdemand!=null && systemdemand.Count>0)
                                        //    { 
                                        //        v.SInterest = systemdemand.Sum(i => i.Interest);
                                        //        v.SPenalInterest = systemdemand.Sum(i => i.PenalInterest);
                                        //        v.SIOD = systemdemand.Sum(i => i.Ioa);
                                        //        v.SOthers = 0;
                                        //    }
                                        //}
                                        if (dcbtemp.OtherTransrollId == 0)
                                        {
                                            dcbtemp.SInterest = _outstandingResults.Where(i => i.ApplicationNo == dcbtemp.ApplicationNo).Sum(i => i.Interest);
                                            dcbtemp.SPenalInterest = _outstandingResults.Where(i => i.ApplicationNo == dcbtemp.ApplicationNo).Sum(i => i.PenalInterest);
                                            dcbtemp.SIOD = _outstandingResults.Where(i => i.ApplicationNo == dcbtemp.ApplicationNo).Sum(i => i.Ioa);
                                        }
                                        else
                                        {
                                            dcbtemp.SOthers = _outstandingResults.Where(i => i.OtherAmountTransroll != null && i.OtherAmountTransroll.TransrollID == dcbtemp.OtherTransrollId).Sum(i => i.OtherAmount);
                                        }
                                        dcbtemp.VoucherID = objvchrtemp.VoucherID;
                                        dcbtemp.RepaymentType = repaymenttype;
                                        session.Save(dcbtemp);
                                    }
                                }
                                else
                                {
                                    var dcbtemplist = GetDCBDetailsTemp(objTransactionDTDTO, usercredentials.PacsId, usercredentials.BranchId, IsForSubvention, objTransaction.Activities.ActivityId, _outstandingResults);

                                    foreach (var dcbtemp in dcbtemplist)
                                    {
                                        dcbtemp.VoucherID = objvchrtemp.VoucherID;
                                        dcbtemp.Loanno = objTransactionDTDTO.AccountNo;
                                        dcbtemp.ApplicationNo = applicationno;
                                        dcbtemp.TransactiondDate = usercredentials.Logindatetime;
                                        if (dcbtemp.OtherTransrollId == 0)
                                        {
                                            dcbtemp.SInterest = _outstandingResults.Where(i => i.ApplicationNo == dcbtemp.ApplicationNo).Sum(i => i.Interest);
                                            dcbtemp.SPenalInterest = _outstandingResults.Where(i => i.ApplicationNo == dcbtemp.ApplicationNo).Sum(i => i.PenalInterest);
                                            dcbtemp.SIOD = _outstandingResults.Where(i => i.ApplicationNo == dcbtemp.ApplicationNo).Sum(i => i.Ioa);
                                        }
                                        else
                                        {
                                            dcbtemp.SOthers = _outstandingResults.Where(i => i.OtherAmountTransroll != null && i.OtherAmountTransroll.TransrollID == dcbtemp.OtherTransrollId).Sum(i => i.OtherAmount);
                                        }
                                        var duedate = GetMaxDueDate(applicationno, usercredentials.PacsId, usercredentials.BranchId);
                                        if (duedate != null && duedate != new DateTime(1, 1, 1))
                                        {
                                            dcbtemp.DueDate = duedate.Value.Date;
                                        }
                                        else
                                        {
                                            dcbtemp.DueDate = usercredentials.Logindatetime;
                                        }
                                        //RijndaelEnhanced _encryptHash = new RijndaelEnhanced();
                                        //string _plaintext = Convert.ToString(dcbtemp.TransactiondDate) + "|" + Convert.ToString(dcbtemp.CollectedPrincipal) + "|" + Convert.ToString(dcbtemp.CollectedInterest) + "|" + Convert.ToString(dcbtemp.CollectedIOD) + "|" + Convert.ToString(dcbtemp.CollectedPenalInterest) + "|" + Convert.ToString(dcbtemp.CollectedOthers) + "|" + Convert.ToString(objvchrtemp.VoucherNo);
                                        //string _EncryptText = _encryptHash.Encrypt(_plaintext);
                                        //dcbtemp.SaltValue = _EncryptText;
                                        dcbtemp.RepaymentType = repaymenttype;
                                        session.Save(dcbtemp);
                                    }
                                }
                            }
                            else if (objTransaction.FinTransactionType.TransactionTypeId == 2)
                            {
                                string moredisbursements = objTransactionDTDTO.MoreDisbursementDetailsXML;
                                MoreDisbursementDetails more = GetMoreDisbursementDetails(moredisbursements, objvchrtemp.VoucherID);
                                if (more != null)
                                {
                                    session.Save(more);
                                }
                            }
                        }
                        else if (temp.FirstOrDefault().ProductTypeID.ProductTypeID == 2)
                        {
                            TransactionBL objTransactionBL = new TransactionBL(session);
                            long transactionid = objTransactionBL.GetTransactionID(objTransactionDTDTO.ActivityType);
                            if (transactionid == 30013)
                            {
                                ChequeWithdrawalsTemp objChequeTemp = FillChequeWithdrawalTemp(objTransactionDTDTO, usercredentials, objvchrtemp);
                                objChequeTemp.VoucherNumber = objvchrtemp.VoucherNo;
                                session.Save(objChequeTemp);
                            }
                        }
                    }
                    //Added for Daily Activity Log start by Nishanth
                    if (usercredentials.IsEnableDailyActivityLog == true)
                    {
                        Mdm.Model.DailyActivityLog _dailyActivityLog = DailyActivityLog.CreateDailyActivityLog(usercredentials.UserName, usercredentials.Logindatetime, objTransactionDTDTO.formid, objTransactionDTDTO.ProductTypeId, 1, usercredentials.PacsId, usercredentials.BranchId, usercredentials.PACSSerialNumber);
                        session.Save(_dailyActivityLog);
                    }
                    //Added for Daily Activity Log End
                    session.Transaction.Commit();
                    voucherId = objvchrtemp.VoucherID;
                }
                else
                {
                    voucherId = 0;
                    message = "No Enough Cash Balance!";
                }
                log.Debug(" Leaving into SaveShareAllotedDetails");

                decimal debit = objvchrtemp.VoucherDetailsTemp.Sum(i => i.Debit);
                decimal credit = objvchrtemp.VoucherDetailsTemp.Sum(i => i.Credit);
                long voucherNo = objvchrtemp.VoucherNo;
                bool isApprovelimit = false;
                //IList<VoucherApprovalLimits> voucherapprovallimitsList = session.QueryOver<VoucherApprovalLimits>().Where(i => i.Role == usercredentials.RoleId && i.BranchId == usercredentials.BranchId && i.PacsId == usercredentials.PacsId).List();
                //if (voucherapprovallimitsList != null && voucherapprovallimitsList.Count > 0)
                //{
                //    IList<VoucherApprovalLimits> listv = voucherapprovallimitsList.Where(j => j.MinAmount <= objvchrtemp.Amount && j.MaxAmount >= objvchrtemp.Amount && j.TransactionType == objvchrtemp.TransactionType.TransactionTypeID).ToList<VoucherApprovalLimits>();
                //    if (listv.Count != 0)
                //    {
                //        isApprovelimit = true;
                //    }
                //}
                string sqlquery = string.Format(@"select MaxAmount from fa_voucherapprovallimits where Role=:Role and PacsId=:PacsId and BranchId=:BranchId and MinAmount<=:Amount and MaxAmount>=:Amount and TransactionType=:TransactionType");//;
                decimal count = session.CreateSQLQuery(sqlquery)
                    .SetParameter("Role", usercredentials.RoleId)
                         .SetParameter("PacsId", usercredentials.PacsId)
                          .SetParameter("BranchId", usercredentials.BranchId)
                           .SetParameter("Amount", objvchrtemp.Amount)
                            .SetParameter("TransactionType", objvchrtemp.TransactionType.TransactionTypeID)
                    .UniqueResult<decimal>();
                if (count != 0)
                {
                    isApprovelimit = true;
                }
                if (voucherNo == 0 && message == "")
                {
                    message = "Assign Voucher sequence for daywise or yearwise";
                }
                object[] objVoucherId = { voucherId, debit, credit, isApprovelimit, message, voucherNo };
                return objVoucherId;
            }
            catch (Exception ex)
            {
                ////TransactionErrorLogBL.TrackErrorLog(ex.Message, GlobalUserCredentials); 
                log.Error(ex);
                object[] objVoucherId = { };
                return objVoucherId;
            }

        }
        /// <summary>
        /// Author: Rajashekhar
        /// Date:18/02/2016
        /// PUrpose:To GetDisbursement Object
        /// </summary>
        /// <param name="voucher"></param>
        /// <param name="pacsid"></param>
        /// <param name="branchid"></param>
        /// <param name="applicationno"></param>
        /// <param name="loanno"></param>
        /// <param name="maxdisbursalid"></param>
        /// <param name="pmaster"></param>
        /// <param name="maxslno"></param>
        /// <param name="duedate"></param>
        /// <returns></returns>
        public Disbursements GetDisbursementsObject(DateTime logindate, long pacsid, int branchid, long applicationno, string loanno, int maxdisbursalid, ProductMaster pmaster, DateTime duedate)
        {
            log.Debug("entered in GetDisbursementsObject()");
            try
            {
                Disbursements _disbursements = new Disbursements();
                _disbursements.ApplicationNo = applicationno;
                _disbursements.BranchId = branchid;
                _disbursements.PacsId = pacsid;
                _disbursements.DateofAdvice = logindate;
                //_disbursements.DebitSlipNo = voucher.VoucherNo.ToString();
                _disbursements.DisbursalDate = logindate;
                _disbursements.DisbursalID = maxdisbursalid;
                _disbursements.DpnDate = logindate;
                _disbursements.LoanNo = loanno;
                _disbursements.Narration = "Amount Disbursed";
                _disbursements.ProductCode = pmaster;
                //_disbursements.TransactionId = voucher.VoucherID;

                log.Debug("Leaving in GetDisbursementsObject()");
                return _disbursements;
            }
            catch (Exception ex)
            {
                ////TransactionErrorLogBL.TrackErrorLog(ex.Message, GlobalUserCredentials);
                log.Error(ex);
                return null;
            }
        }


        /// <summary>
        /// Author: Rajashekhar
        /// Date:18/02/2016
        /// Purpose:To GetOutstanding Object
        /// </summary>
        /// <param name="objdisbursements"></param>
        /// <param name="admissionnopkey"></param>
        /// <param name="roi"></param>
        /// <param name="penalroi"></param>
        /// <param name="ioaroi"></param>
        /// <param name="PaymentAmount"></param>
        /// <param name="transrollmaster"></param>
        /// <param name="duedate"></param>
        /// <returns></returns>
        public Outstandings GetOutstandingsObject(Disbursements objdisbursements, long admissionnopkey, decimal roi, decimal penalroi, decimal ioaroi, decimal PaymentAmount, DateTime duedate, ISession ses, UserCredentials users)
        {
            log.Debug("entered in GetOutstandingsObject()");
            Outstandings _outstandings = new Outstandings();
            try
            {
                _outstandings.AdmissionNo = ses.Load<CustomerPersonalDetails>(admissionnopkey);
                _outstandings.CalculateInterest = true;
                _outstandings.ApplicationNo = objdisbursements.ApplicationNo;
                _outstandings.BranchId = objdisbursements.BranchId;
                _outstandings.DisbursalID = objdisbursements.DisbursalID;
                _outstandings.DisbursementSlno = objdisbursements.Disbursementid;
                _outstandings.DueDate = duedate;
                _outstandings.Interest = 0;
                _outstandings.IOA = 0;
                _outstandings.IOAROI = ioaroi;
                _outstandings.LoanNo = objdisbursements.LoanNo;
                _outstandings.OutstandingAmount = PaymentAmount;
                _outstandings.OutstandingDate = objdisbursements.DisbursalDate;
                _outstandings.PacsId = objdisbursements.PacsId;
                _outstandings.IDGeneratorForPacs = objdisbursements.PacsId;
                _outstandings.SerialNumberOfPacs = users.PACSSerialNumber;
                _outstandings.PenalInterest = 0;
                _outstandings.PenalROI = penalroi;
                _outstandings.ProductCode = objdisbursements.ProductCode;
                _outstandings.ROI = roi;
                _outstandings.TransactionId = objdisbursements.TransactionId;
                _outstandings.TransrollID = session.Load<TransRollMaster>(1);


                _outstandings.DueDate = duedate;
                log.Debug("Leaving in GetOutstandingsObject()");
                return _outstandings;
            }
            catch (Exception ex)
            {
                ////TransactionErrorLogBL.TrackErrorLog(ex.Message, GlobalUserCredentials);
                log.Error(ex);
                return null;
            }
        }


        public int GetRepaymentTypeId(int productslno, long pacsid, int branchid)
        {
            Intellect.Unite.WebPackages.Loans.BL.LoansCommonMasterBl commonbll = new Loans.BL.LoansCommonMasterBl(session);
            return commonbll.GetRepaymentTypeId(productslno, pacsid, branchid);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="voucher"></param>
        /// <param name="usercredentials"></param>
        /// <returns></returns>
        public VoucherControlRecord SaveControlRecord(VoucherMainTemp voucher, UserCredentials usercredentials, long transactionid, TransactionDTO objTransactionDTDTO)
        {
            log.Debug(" Entering into SaveControlRecord");

            VoucherControlRecord objControlRecord = new VoucherControlRecord();
            try
            {
                objControlRecord.Activity = "Save";
                objControlRecord.AdmissionNo = objTransactionDTDTO.AdmnNo.ToString();
                objControlRecord.AccountNo = objTransactionDTDTO.AccountNo.ToString();
                objControlRecord.BranchId = usercredentials.BranchId;
                objControlRecord.DateTime = usercredentials.Logindatetime.ToString();
                objControlRecord.KeyValue = voucher.VoucherNo.ToString();
                objControlRecord.Name = usercredentials.UserName;
                objControlRecord.PacsId = usercredentials.PacsId;
                objControlRecord.IDGeneratorForPacs = usercredentials.PacsId;
                objControlRecord.SerialNumberOfPacs = usercredentials.PACSSerialNumber;
                objControlRecord.Task = transactionid.ToString();
                objControlRecord.UserId = usercredentials.UserName;
                objControlRecord.Xml = "";

                objControlRecord.IsApproved = true;

                log.Debug(" Leaving into SaveControlRecord");
            }
            catch (Exception ex)
            {
                ////TransactionErrorLogBL.TrackErrorLog(ex.Message, GlobalUserCredentials);
                log.Error(ex);
                //return null;
            }
            return objControlRecord;
        }
        public IList<DemandCollectionBalanceDetailsTemp> GetOtherTransrollsDCBTempDetails(TransactionDTO objdto, long pacsid, int branchid)
        {


            IList<DemandCollectionBalanceDetailsTemp> dcbtemplist = new List<DemandCollectionBalanceDetailsTemp>();
            try
            {
                DemandCollectionBalanceDetailsTemp dcbtemp = new DemandCollectionBalanceDetailsTemp();
                if (objdto != null)
                {
                    XmlDocument transactionxml = new XmlDocument();
                    transactionxml.LoadXml(objdto.XML.ToString());
                    var transactionlist = GetTransactionMasterDTOList(transactionxml);
                    var othertransrolls = transactionlist.Where(i => i.TransrollID != 1 && i.TransrollID != 2 && i.TransrollID != 3 && i.TransrollID != 101 && i.TransrollID != 4 && i.TransrollID != 130).ToList();
                    var maintransrolls = transactionlist.Except(othertransrolls);
                    foreach (var v in othertransrolls)
                    {
                        dcbtemp = new DemandCollectionBalanceDetailsTemp();
                        dcbtemp.DemandOthers = v.MaxAmount;
                        dcbtemp.CollectedOthers = v.Amount;
                        dcbtemp.OtherTransrollId = v.TransrollID;
                        dcbtemp.ProductCode = objdto.Product;
                        dcbtemp.PacsId = pacsid;
                        dcbtemp.BranchId = branchid;
                        dcbtemp.BalanceOthers = (dcbtemp.DemandOthers - dcbtemp.CollectedOthers) > 0 ? (dcbtemp.DemandOthers - dcbtemp.CollectedOthers) : 0;
                        if (v.Amount > 0)
                        {
                            dcbtemplist.Add(dcbtemp);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                ////TransactionErrorLogBL.TrackErrorLog(ex.Message, GlobalUserCredentials);
                log.Error(ex);
                //return null;
            }
            return dcbtemplist;
        }
        public IList<DemandCollectionBalanceDetails> GetOtherTransrollsDCBDetails(TransactionDTO objdto, long pacsid, int branchid)
        {
            IList<DemandCollectionBalanceDetails> dcbtemplist = new List<DemandCollectionBalanceDetails>();
            try
            {
                DemandCollectionBalanceDetails dcbtemp = new DemandCollectionBalanceDetails();
                if (objdto != null)
                {
                    XmlDocument transactionxml = new XmlDocument();
                    transactionxml.LoadXml(objdto.XML.ToString());
                    var transactionlist = GetTransactionMasterDTOList(transactionxml);
                    var othertransrolls = transactionlist.Where(i => i.TransrollID != 1 && i.TransrollID != 2 && i.TransrollID != 3 && i.TransrollID != 101 && i.TransrollID != 4 && i.TransrollID != 130).ToList();
                    var maintransrolls = transactionlist.Except(othertransrolls);
                    foreach (var v in othertransrolls)
                    {
                        dcbtemp = new DemandCollectionBalanceDetails();
                        dcbtemp.DemandOthers = v.MaxAmount;
                        dcbtemp.CollectedOthers = v.Amount;
                        dcbtemp.OtherTransrollId = v.TransrollID;
                        dcbtemp.ProductCode = objdto.Product;
                        dcbtemp.PacsId = pacsid;
                        dcbtemp.BranchId = branchid;
                        dcbtemp.BalanceOthers = (dcbtemp.DemandOthers - dcbtemp.CollectedOthers) > 0 ? (dcbtemp.DemandOthers - dcbtemp.CollectedOthers) : 0;
                        if (v.Amount > 0)
                        {
                            dcbtemplist.Add(dcbtemp);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                ////TransactionErrorLogBL.TrackErrorLog(ex.Message, GlobalUserCredentials);
                log.Error(ex);
                //return null;
            }
            return dcbtemplist;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="objdto"></param>
        /// <param name="pacsid"></param>
        /// <param name="branchid"></param>
        /// <returns></returns>
        public IList<DemandCollectionBalanceDetailsTemp> GetDCBDetailsTemp(TransactionDTO objdto, long pacsid, int branchid, bool IsForSubvention, long activitypkey, IList<OutStandingResults> _osresults)
        {

            log.Debug(" Entering into DemandCollectionBalanceDetailsTemp");

            List<DemandCollectionBalanceDetailsTemp> dcbtemplist = new List<DemandCollectionBalanceDetailsTemp>();

            try
            {
                DemandCollectionBalanceDetailsTemp dcbtemp = new DemandCollectionBalanceDetailsTemp();
                if (objdto != null)
                {
                    IList<PacsWiseSubventionLedgers> subvention = new List<PacsWiseSubventionLedgers>();
                    XmlDocument transactionxml = new XmlDocument();
                    transactionxml.LoadXml(objdto.XML.ToString());
                    var transactionlist = GetTransactionMasterDTOList(transactionxml);
                    decimal centralinterest = 0, stateinterest = 0;
                    long stateledger = 0, centralledger = 0;
                    bool isSubventionApplicable = false;
                    subvention = session.QueryOver<PacsWiseSubventionLedgers>().Where(i => i.PacsId == pacsid && i.BranchId == branchid && i.ProductCode == objdto.Product).List();
                    if (subvention != null && subvention.Count > 0)
                    {
                        isSubventionApplicable = true;
                        stateledger = subvention.FirstOrDefault().StateLedgerId;
                        centralledger = subvention.FirstOrDefault().CentralLedgerId;
                        centralinterest = subvention.FirstOrDefault().CentralROI;
                        stateinterest = subvention.FirstOrDefault().StateROI;
                    }

                    var othertransrolls = transactionlist.Where(i => i.TransrollID != 1 && i.TransrollID != 2 && i.TransrollID != 3 && i.TransrollID != 101 && i.TransrollID != 4 && i.TransrollID != 130).ToList();
                    var maintransrolls = transactionlist.Except(othertransrolls);
                    bool isDemandInterestexecuted = false;
                    bool isdemandPenalexecuted = false;
                    bool isDemandIODexecuted = false;
                    foreach (var v in maintransrolls)
                    {
                        if (v.TransrollID == 1)
                        {
                            dcbtemp.DemandPrincipal = v.MaxAmount;
                            dcbtemp.CollectedPrincipal = v.Amount;
                        }
                        else if (v.TransrollID == 2)
                        {
                            if (IsForSubvention)
                            {
                                if (v.Ledger == stateledger)
                                {
                                    dcbtemp.SubventionState = v.Amount;
                                }
                                else if (v.Ledger == centralledger)
                                {
                                    dcbtemp.SubventionCentral = v.Amount;
                                }
                                dcbtemp.DemandInterest += v.MaxAmount;
                                dcbtemp.CollectedInterest += v.Amount;

                            }
                            else
                            {
                                dcbtemp.DemandInterest += v.MaxAmount;
                                dcbtemp.CollectedInterest += v.Amount;
                            }
                            isDemandInterestexecuted = true;
                        }
                        else if (v.TransrollID == 3)
                        {
                            dcbtemp.DemandPenalInterest += v.MaxAmount;
                            dcbtemp.CollectedPenalInterest += v.Amount;
                            isdemandPenalexecuted = true;
                        }
                        else if (v.TransrollID == 101)
                        {
                            dcbtemp.DemandIOD += v.MaxAmount;
                            dcbtemp.CollectedIOD += v.Amount;
                            isDemandIODexecuted = true;
                        }

                        else
                        {
                            dcbtemp.DemandOthers += v.MaxAmount;
                            dcbtemp.CollectedOthers += v.Amount;
                        }
                    }
                    //added by shekhar 06/01/2023, null handling of Outstanding results , this is added due to Parallel run, there wont be module tables, 
                    //interest calculations wont be happen. 
                    if (_osresults != null && _osresults.Count > 0)
                    {
                        dcbtemp.SInterest = _osresults.Sum(i => i.Interest);
                        dcbtemp.SPenalInterest = _osresults.Sum(i => i.PenalInterest);
                        dcbtemp.SIOD = _osresults.Sum(i => i.Ioa);
                        decimal roi = _osresults.Max(k => k.Roi);
                        if (isSubventionApplicable || dcbtemp.ProductCode == 9)
                        {
                            if (dcbtemp.CollectedInterest == 0)
                            {
                                if (roi == (stateinterest + centralinterest))
                                {
                                    dcbtemp.SubventionState =Math.Round( dcbtemp.SInterest * stateinterest / roi,MidpointRounding.AwayFromZero);
                                    dcbtemp.SubventionCentral = Math.Round(dcbtemp.SInterest * centralinterest / roi, MidpointRounding.AwayFromZero);
                                }
                                else
                                {
                                    dcbtemp.SubventionState = Math.Round(dcbtemp.SInterest * 4 / roi, MidpointRounding.AwayFromZero);
                                    dcbtemp.SubventionCentral = Math.Round(dcbtemp.SInterest * 3 / roi,MidpointRounding.AwayFromZero);
                                }
                            }
                        }

                        if (activitypkey == 4)
                        {
                            dcbtemp.DemandInterest = _osresults.Sum(i => i.Interest);
                            dcbtemp.DemandPenalInterest = _osresults.Sum(i => i.PenalInterest);
                            dcbtemp.DemandIOD = _osresults.Sum(i => i.Ioa);
                        }

                        dcbtemp.DemandInterest = isDemandInterestexecuted ? dcbtemp.DemandInterest : _osresults.Sum(i => i.Interest);
                        dcbtemp.DemandPenalInterest = isdemandPenalexecuted ? dcbtemp.DemandPenalInterest : _osresults.Sum(i => i.PenalInterest);
                        dcbtemp.DemandIOD = isDemandIODexecuted ? dcbtemp.DemandIOD : _osresults.Sum(i => i.Ioa);

                        //dcbtemp.OtherTransrollId = 0;
                        // dcbtemp.DemandOthers = 0;
                        // dcbtemp.CollectedOthers = 0;
                     
                        if (IsForSubvention)
                        {
                            if (subvention != null && subvention.Count > 0)
                            {
                                if (subvention.FirstOrDefault().CentralLedgerId != null && subvention.FirstOrDefault().StateLedgerId != null)
                                {
                                    dcbtemp.DemandInterest = _osresults.Sum(i => i.Interest);
                                    dcbtemp.BalanceInterest = (dcbtemp.DemandInterest - dcbtemp.CollectedInterest) > 0 ? (dcbtemp.DemandInterest - dcbtemp.CollectedInterest) : 0;
                                }
                                else
                                {
                                    if (subvention.FirstOrDefault().CentralLedgerId != null && (subvention.FirstOrDefault().CentralROI != null && subvention.FirstOrDefault().CentralROI != 0))
                                    {
                                        dcbtemp.DemandInterest = _osresults.Sum(i => i.Interest);
                                        dcbtemp.BalanceInterest = (dcbtemp.DemandInterest - dcbtemp.CollectedInterest) > 0 ? (dcbtemp.DemandInterest - dcbtemp.CollectedInterest) : 0;
                                    }
                                    else if (subvention.FirstOrDefault().StateLedgerId != null && (subvention.FirstOrDefault().StateROI != null && subvention.FirstOrDefault().StateROI != 0))
                                    {
                                        dcbtemp.DemandInterest = _osresults.Sum(i => i.Interest);
                                        dcbtemp.BalanceInterest = (dcbtemp.DemandInterest - dcbtemp.CollectedInterest) > 0 ? (dcbtemp.DemandInterest - dcbtemp.CollectedInterest) : 0;

                                    }
                                    else
                                    {
                                        dcbtemp.BalanceInterest = (dcbtemp.DemandInterest - dcbtemp.CollectedInterest) > 0 ? (dcbtemp.DemandInterest - dcbtemp.CollectedInterest) : 0;
                                    }
                                }
                            }
                        }
                        else
                        {
                            dcbtemp.BalanceInterest = (dcbtemp.DemandInterest - dcbtemp.CollectedInterest) > 0 ? (dcbtemp.DemandInterest - dcbtemp.CollectedInterest) : 0;
                        }
                    }
                    dcbtemp.ProductCode = objdto.Product;
                    dcbtemp.PacsId = pacsid;
                    dcbtemp.BranchId = branchid;
                    dcbtemp.BalanceIOD = (dcbtemp.DemandIOD - dcbtemp.CollectedIOD) > 0 ? (dcbtemp.DemandIOD - dcbtemp.CollectedIOD) : 0;
                    dcbtemp.BalanceOthers = (dcbtemp.DemandOthers - dcbtemp.CollectedOthers) > 0 ? (dcbtemp.DemandOthers - dcbtemp.CollectedOthers) : 0;
                    dcbtemp.BalancePenalInterest = (dcbtemp.DemandPenalInterest - dcbtemp.CollectedPenalInterest) > 0 ? (dcbtemp.DemandPenalInterest - dcbtemp.CollectedPenalInterest) : 0;
                    if (objdto.IsAllowExcessAmount)
                    {
                        dcbtemp.BalancePrincipal = (dcbtemp.DemandPrincipal - dcbtemp.CollectedPrincipal);
                    }
                    else
                    {
                        dcbtemp.BalancePrincipal = (dcbtemp.DemandPrincipal - dcbtemp.CollectedPrincipal) > 0 ? (dcbtemp.DemandPrincipal - dcbtemp.CollectedPrincipal) : 0;
                    }

                    dcbtemplist.Add(dcbtemp);
                    var otherslist = GetOtherTransrollsDCBTempDetails(objdto, pacsid, branchid);
                    if (otherslist != null && otherslist.Count > 0)
                    {
                        dcbtemplist.AddRange(otherslist);
                    }
                }

                // if (activitypkey == 4)
                // {
                //     dcbtemp.DemandInterest = _osresults.Sum(i => i.Interest);
                //     dcbtemp.DemandPenalInterest = _osresults.Sum(i => i.PenalInterest);
                //     dcbtemp.DemandIOD= _osresults.Sum(i => i.Ioa);
                // }

                // dcbtemp.OtherTransrollId = 0;
                // dcbtemp.DemandOthers = 0;
                // dcbtemp.CollectedOthers = 0;
                // dcbtemp.ProductCode = objdto.Product;
                // dcbtemp.PacsId = pacsid;
                // dcbtemp.BranchId = branchid;
                // dcbtemp.BalanceInterest = (dcbtemp.DemandInterest - dcbtemp.CollectedInterest) > 0 ? (dcbtemp.DemandInterest - dcbtemp.CollectedInterest) : 0;
                // dcbtemp.BalanceIOD = (dcbtemp.DemandIOD - dcbtemp.CollectedIOD) > 0 ? (dcbtemp.DemandIOD - dcbtemp.CollectedIOD) : 0;
                // dcbtemp.BalanceOthers = (dcbtemp.DemandOthers - dcbtemp.CollectedOthers) > 0 ? (dcbtemp.DemandOthers - dcbtemp.CollectedOthers) : 0;
                // dcbtemp.BalancePenalInterest = (dcbtemp.DemandPenalInterest - dcbtemp.CollectedPenalInterest) > 0 ? (dcbtemp.DemandPenalInterest - dcbtemp.CollectedPenalInterest) : 0;
                //if(objdto.IsAllowExcessAmount)
                //{
                //    dcbtemp.BalancePrincipal = (dcbtemp.DemandPrincipal - dcbtemp.CollectedPrincipal) ;
                //}
                //else
                //{
                //    dcbtemp.BalancePrincipal = (dcbtemp.DemandPrincipal - dcbtemp.CollectedPrincipal) > 0 ? (dcbtemp.DemandPrincipal - dcbtemp.CollectedPrincipal) : 0;
                //}

                // dcbtemplist.Add(dcbtemp);
                // var otherslist = GetOtherTransrollsDCBTempDetails(objdto, pacsid, branchid);
                // if (otherslist != null && otherslist.Count > 0)
                // {
                //     dcbtemplist.AddRange(otherslist);
                // }

                // if (activitypkey == 4)
                // {
                //     dcbtemp.DemandInterest = _osresults.Sum(i => i.Interest);
                //     dcbtemp.DemandPenalInterest = _osresults.Sum(i => i.PenalInterest);
                //     dcbtemp.DemandIOD= _osresults.Sum(i => i.Ioa);
                // }

                // dcbtemp.OtherTransrollId = 0;
                // dcbtemp.DemandOthers = 0;
                // dcbtemp.CollectedOthers = 0;
                // dcbtemp.ProductCode = objdto.Product;
                // dcbtemp.PacsId = pacsid;
                // dcbtemp.BranchId = branchid;
                // dcbtemp.BalanceInterest = (dcbtemp.DemandInterest - dcbtemp.CollectedInterest) > 0 ? (dcbtemp.DemandInterest - dcbtemp.CollectedInterest) : 0;
                // dcbtemp.BalanceIOD = (dcbtemp.DemandIOD - dcbtemp.CollectedIOD) > 0 ? (dcbtemp.DemandIOD - dcbtemp.CollectedIOD) : 0;
                // dcbtemp.BalanceOthers = (dcbtemp.DemandOthers - dcbtemp.CollectedOthers) > 0 ? (dcbtemp.DemandOthers - dcbtemp.CollectedOthers) : 0;
                // dcbtemp.BalancePenalInterest = (dcbtemp.DemandPenalInterest - dcbtemp.CollectedPenalInterest) > 0 ? (dcbtemp.DemandPenalInterest - dcbtemp.CollectedPenalInterest) : 0;
                // dcbtemp.SInterest = _osresults.Sum(i => i.Interest);
                // dcbtemp.SPenalInterest = _osresults.Sum(i => i.PenalInterest);
                // dcbtemp.SIOD = _osresults.Sum(i => i.Ioa);


                // if(objdto.IsAllowExcessAmount)
                //{
                //    dcbtemp.BalancePrincipal = (dcbtemp.DemandPrincipal - dcbtemp.CollectedPrincipal) ;
                //}
                //else
                //{
                //    dcbtemp.BalancePrincipal = (dcbtemp.DemandPrincipal - dcbtemp.CollectedPrincipal) > 0 ? (dcbtemp.DemandPrincipal - dcbtemp.CollectedPrincipal) : 0;
                //}

                // dcbtemplist.Add(dcbtemp);
                // //var otherslist = GetOtherTransrollsDCBTempDetails(objdto, pacsid, branchid);
                // if (otherslist != null && otherslist.Count > 0)
                // {
                //     dcbtemplist.AddRange(otherslist);
                // }

            }
            catch (Exception ex)
            {
                ////TransactionErrorLogBL.TrackErrorLog(ex.Message, GlobalUserCredentials);
                log.Error(ex);
                //return null;
            }
            return dcbtemplist;
        }

        public IList<DemandCollectionBalanceDetailsTemp> GetDCBDetailsTempWithSecondVoucher(TransactionDTO objdto, long pacsid, int branchid, bool IsForSubvention, long activitypkey, IList<OutStandingResults> _osresults)
        {
            log.Debug(" Entering into DemandCollectionBalanceDetailsTemp");
            List<DemandCollectionBalanceDetailsTemp> dcbtemplist = new List<DemandCollectionBalanceDetailsTemp>();
            try
            {
                if (objdto != null)
                {
                    XmlDocument transactionxml = new XmlDocument();
                    transactionxml.LoadXml(objdto.XML.ToString());
                    var transactionlist = GetTransactionMasterDTOList(transactionxml);
                    var othertransrolls = transactionlist.Where(i => i.TransrollID != 1 && i.TransrollID != 2 && i.TransrollID != 3 && i.TransrollID != 101 && i.TransrollID != 4 && i.TransrollID != 130).ToList();
                    var maintransrolls = transactionlist.Select(k => k.TransrollID).ToList();
                    bool isDemandInterestexecuted = false;
                    bool isdemandPenalexecuted = false;
                    bool isDemandIODexecuted = false;
                    foreach (var v in maintransrolls.Distinct().ToList())
                    {
                        DemandCollectionBalanceDetailsTemp dcbtemp = new DemandCollectionBalanceDetailsTemp();
                        if (v == 1)
                        {
                            dcbtemp.DemandPrincipal = transactionlist.Where(k => k.TransrollID == v).Sum(k => k.MaxAmount);
                            dcbtemp.CollectedPrincipal = transactionlist.Where(k => k.TransrollID == v).Sum(k => k.Amount);
                        }
                        else if (v == 2)
                        {
                            dcbtemp.DemandInterest += transactionlist.Where(k => k.TransrollID == v).Sum(k => k.MaxAmount);
                            dcbtemp.CollectedInterest += transactionlist.Where(k => k.TransrollID == v).Sum(k => k.Amount);
                            isdemandPenalexecuted = true;
                        }
                        else if (v == 3)
                        {
                            dcbtemp.DemandPenalInterest += transactionlist.Where(k => k.TransrollID == v).Sum(k => k.MaxAmount);
                            dcbtemp.CollectedPenalInterest += transactionlist.Where(k => k.TransrollID == v).Sum(k => k.Amount);
                            isdemandPenalexecuted = true;
                        }
                        else if (v == 101)
                        {
                            dcbtemp.DemandIOD += transactionlist.Where(k => k.TransrollID == v).Sum(k => k.MaxAmount);
                            dcbtemp.CollectedIOD += transactionlist.Where(k => k.TransrollID == v).Sum(k => k.Amount);
                            isDemandIODexecuted = true;
                        }

                        else
                        {
                            dcbtemp.DemandOthers += transactionlist.Where(k => k.TransrollID == v).Sum(k => k.MaxAmount);
                            dcbtemp.CollectedOthers += transactionlist.Where(k => k.TransrollID == v).Sum(k => k.Amount);
                        }
                        if (_osresults != null && _osresults.Count > 0)
                        {
                            dcbtemp.SInterest = _osresults.Sum(i => i.Interest);
                            dcbtemp.SPenalInterest = _osresults.Sum(i => i.PenalInterest);
                            dcbtemp.SIOD = _osresults.Sum(i => i.Ioa);
                            decimal roi = _osresults.Max(k => k.Roi);

                            if (activitypkey == 4)
                            {
                                dcbtemp.DemandInterest = _osresults.Sum(i => i.Interest);
                                dcbtemp.DemandPenalInterest = _osresults.Sum(i => i.PenalInterest);
                                dcbtemp.DemandIOD = _osresults.Sum(i => i.Ioa);
                            }

                            dcbtemp.DemandInterest = isDemandInterestexecuted ? dcbtemp.DemandInterest : _osresults.Sum(i => i.Interest);
                            dcbtemp.DemandPenalInterest = isdemandPenalexecuted ? dcbtemp.DemandPenalInterest : _osresults.Sum(i => i.PenalInterest);
                            dcbtemp.DemandIOD = isDemandIODexecuted ? dcbtemp.DemandIOD : _osresults.Sum(i => i.Ioa);
                        }
                        dcbtemp.OtherTransrollId = 0;
                        dcbtemp.DemandOthers = 0;
                        dcbtemp.CollectedOthers = 0;
                        dcbtemp.ProductCode = objdto.Product;
                        dcbtemp.PacsId = pacsid;
                        dcbtemp.BranchId = branchid;
                        dcbtemp.BalanceInterest = (dcbtemp.DemandInterest - dcbtemp.CollectedInterest) > 0 ? (dcbtemp.DemandInterest - dcbtemp.CollectedInterest) : 0;
                        dcbtemp.BalanceIOD = (dcbtemp.DemandIOD - dcbtemp.CollectedIOD) > 0 ? (dcbtemp.DemandIOD - dcbtemp.CollectedIOD) : 0;
                        dcbtemp.BalanceOthers = (dcbtemp.DemandOthers - dcbtemp.CollectedOthers) > 0 ? (dcbtemp.DemandOthers - dcbtemp.CollectedOthers) : 0;
                        dcbtemp.BalancePenalInterest = (dcbtemp.DemandPenalInterest - dcbtemp.CollectedPenalInterest) > 0 ? (dcbtemp.DemandPenalInterest - dcbtemp.CollectedPenalInterest) : 0;
                        if (objdto.IsAllowExcessAmount)
                        {
                            dcbtemp.BalancePrincipal = (dcbtemp.DemandPrincipal - dcbtemp.CollectedPrincipal);
                        }
                        else
                        {
                            dcbtemp.BalancePrincipal = (dcbtemp.DemandPrincipal - dcbtemp.CollectedPrincipal) > 0 ? (dcbtemp.DemandPrincipal - dcbtemp.CollectedPrincipal) : 0;
                        }

                        dcbtemplist.Add(dcbtemp);

                    }
                }
            }
            catch (Exception ex)
            {
                log.Error(ex);
            }
            return dcbtemplist;
        }

        public IList<DemandCollectionBalanceDetails> GetDCBDetails(TransactionDTO objdto, long pacsid, int branchid,long ApplicationNo)
        {
            log.Debug(" Entering into DemandCollectionBalanceDetailsTemp");

            List<DemandCollectionBalanceDetails> dcbtemplist = new List<DemandCollectionBalanceDetails>();
            try
            {
                DemandCollectionBalanceDetails dcbtemp = new DemandCollectionBalanceDetails();
                if (objdto != null)
                {
                    XmlDocument transactionxml = new XmlDocument();
                    transactionxml.LoadXml(objdto.XML.ToString());
                    var transactionlist = GetTransactionMasterDTOList(transactionxml);

                    var othertransrolls = transactionlist.Where(i => i.TransrollID != 1 && i.TransrollID != 2 && i.TransrollID != 3 && i.TransrollID != 101 && i.TransrollID != 4 && i.TransrollID != 130).ToList();
                    var maintransrolls = transactionlist.Except(othertransrolls);
                    foreach (var v in maintransrolls)
                    {
                        if (v.TransrollID == 1)
                        {
                            dcbtemp.DemandPrincipal = v.MaxAmount;
                            dcbtemp.CollectedPrincipal = v.Amount;
                        }
                        else if (v.TransrollID == 2)
                        {
                            dcbtemp.DemandInterest = v.MaxAmount;
                            dcbtemp.CollectedInterest = v.Amount;

                        }
                        else if (v.TransrollID == 3)
                        {
                            dcbtemp.DemandPenalInterest = v.MaxAmount;
                            dcbtemp.CollectedPenalInterest = v.Amount;
                        }
                        else if (v.TransrollID == 101)
                        {
                            dcbtemp.DemandIOD = v.MaxAmount;
                            dcbtemp.CollectedIOD = v.Amount;
                        }
                        else if (v.TransrollID == 4)
                        {
                            dcbtemp.DemandIOD = v.MaxAmount;
                            dcbtemp.CollectedIOD = v.Amount;
                        }
                        else
                        {
                            dcbtemp.DemandIOD = v.MaxAmount;
                            dcbtemp.CollectedIOD = v.Amount;
                        }
                    }
                    dcbtemp.OtherTransrollId = 0;
                    dcbtemp.DemandOthers = 0;
                    dcbtemp.CollectedOthers = 0;
                    dcbtemp.ProductCode = objdto.Product;
                    dcbtemp.PacsId = pacsid;
                    dcbtemp.BranchId = branchid;
                    dcbtemp.Loanno = objdto.AccountNo;
                    dcbtemp.ApplicationNo = ApplicationNo;
                    dcbtemp.BalanceInterest = (dcbtemp.DemandInterest - dcbtemp.CollectedInterest) > 0 ? (dcbtemp.DemandInterest - dcbtemp.CollectedInterest) : 0;
                    dcbtemp.BalanceIOD = (dcbtemp.DemandIOD - dcbtemp.CollectedIOD) > 0 ? (dcbtemp.DemandIOD - dcbtemp.CollectedIOD) : 0;
                    dcbtemp.BalanceOthers = (dcbtemp.DemandOthers - dcbtemp.CollectedOthers) > 0 ? (dcbtemp.DemandOthers - dcbtemp.CollectedOthers) : 0;
                    dcbtemp.BalancePenalInterest = (dcbtemp.DemandPenalInterest - dcbtemp.CollectedPenalInterest) > 0 ? (dcbtemp.DemandPenalInterest - dcbtemp.CollectedPenalInterest) : 0;
                    dcbtemp.BalancePrincipal = (dcbtemp.DemandPrincipal - dcbtemp.CollectedPrincipal) > 0 ? (dcbtemp.DemandPrincipal - dcbtemp.CollectedPrincipal) : 0;
                    dcbtemplist.Add(dcbtemp);
                    var otherslist = GetOtherTransrollsDCBDetails(objdto, pacsid, branchid);
                    if (otherslist != null && otherslist.Count > 0)
                    {
                        dcbtemplist.AddRange(otherslist);
                    }
                }
                log.Debug(" Leaving into DemandCollectionBalanceDetailsTemp");
            }
            catch (Exception ex)
            {
                ////TransactionErrorLogBL.TrackErrorLog(ex.Message, GlobalUserCredentials);
                log.Error(ex);
                //return null;
            }
            return dcbtemplist;
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="transactionsxml"></param>
        /// <returns></returns>
        public IList<TransactionTypeMasterDTO> GetTransactionMasterDTOList(XmlDocument transactionsxml)
        {
            log.Debug(" Entering into GetTransactionMasterDTOList");

            List<TransactionTypeMasterDTO> listTransaction = new List<TransactionTypeMasterDTO>();
            try
            {
                XmlNodeList xnList = transactionsxml.SelectNodes("/Temp/row");
                foreach (XmlNode xn in xnList)
                {
                    TransactionTypeMasterDTO obj = new TransactionTypeMasterDTO();
                    obj.Ledger = Convert.ToInt64(xn["LedgerID"].InnerText);
                    obj.LedgerDescription = xn["LedgerDescription"].InnerText;
                    obj.TransrollID = Convert.ToInt32(xn["TransrollID"].InnerText);
                    obj.TransrollDescription = xn["TransrollDescription"].InnerText;
                    if (xn["MaxAmount"] != null && xn["MaxAmount"].InnerText != "" && xn["MaxAmount"].InnerText != "NaN")
                    {
                        obj.MaxAmount = Convert.ToDecimal(xn["MaxAmount"].InnerText);
                    }
                    else
                    {
                        obj.Amount = Convert.ToDecimal(xn["Amount"].InnerText);
                        obj.MaxAmount = obj.Amount;
                    }
                    obj.Amount = Convert.ToDecimal(xn["Amount"].InnerText);
                    listTransaction.Add(obj);
                }
                log.Debug(" Leaving into GetTransactionMasterDTOList");
            }
            catch (Exception ex)
            {
                ////TransactionErrorLogBL.TrackErrorLog(ex.Message, GlobalUserCredentials);
                log.Error(ex);
                //return null;
            }
            return listTransaction;
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="productslno"></param>
        /// <param name="accountno"></param>
        /// <param name="admissionnopkey"></param>
        /// <param name="pacsid"></param>
        /// <param name="branchid"></param>
        /// <returns></returns>
        public long GetLoanApplicationno(int productslno, string accountno, long admissionnopkey, long pacsid, int branchid)
        {
            log.Debug(" Entering into GetLoanApplicationno");
            //try
            //{
            //    IQuery query = session.CreateQuery("select distinct d.ApplicationNo from Outstandings d where  d.AdmissionNo.PerPkey = :admission  and d.LoanNo=:loanno and d.ProductCode.Slno=:pcode and d.PacsId=:pacs and d.BranchId=:branch");
            //    query.SetParameter("admission", Convert.ToString(admissionnopkey));
            //    query.SetParameter("pacs", pacsid);
            //    query.SetParameter("branch", branchid);
            //    query.SetParameter("loanno", accountno);
            //    query.SetParameter("pcode", productslno);
            //    log.Error(" Leaving into GetLoanApplicationno");
            //    return query.UniqueResult<long>();
            //}
            //catch (Exception ex)
            //{
            //    ////TransactionErrorLogBL.TrackErrorLog(ex.Message, GlobalUserCredentials);
            //    log.Error(ex);
            //    return 0;
            //}
            try
            {
                string sqlquery = string.Empty;
                sqlquery = UniteERPQuery.VoucherProcessing.GetLoanApplicationnoQ1();
                //sqlquery = @"select distinct applicationno from LN_Outstandings where ProductCode='" + productslno + "' and  LoanNo='" + accountno + "' and  AdmissionNo='" + admissionnopkey + "' and PacsId='" + pacsid + "' and BranchId='" + branchid + "'";
                var applicationno = session.CreateSQLQuery(sqlquery)
                    .SetParameter("productslno", productslno)
                     .SetParameter("accountno", accountno)
                      .SetParameter("admissionnopkey", admissionnopkey)
                       .SetParameter("pacsid", pacsid)
                        .SetParameter("branchid", branchid)
                    .UniqueResult<long>();
                if (applicationno == 0)
                {
                    sqlquery = string.Empty;
                    sqlquery = UniteERPQuery.VoucherProcessing.GetLoanApplicationnoQ2();
                    //sqlquery = @"select distinct applicationno from ln_sanctions where applicationno in(
                    //        select  applicationno  from ln_applicationmain 
                    //    where productid='" + productslno + "'  and admissionno='" + admissionnopkey + "' and PacsId='" + pacsid + "' and BranchId='" + branchid + "') and loanno='" + accountno + @"'";
                    applicationno = session.CreateSQLQuery(sqlquery)
                        .SetParameter("productslno", productslno)
                         .SetParameter("accountno", accountno)
                          .SetParameter("admissionnopkey", admissionnopkey)
                           .SetParameter("pacsid", pacsid)
                            .SetParameter("branchid", branchid)
                        .UniqueResult<long>();
                }
                return applicationno;
            }
            catch (Exception ex)
            {
                log.Error(ex);
                return 0;
            }

        }
        public Tuple<long, decimal> GetApplicationNoandOustanding(int productslno, string accountno, long admissionnopkey, long pacsid, int branchid)
        {
            long applicationno = 0;
            decimal outstanding = 0;

            try
            {
                log.Debug(" Entering into GetLoanApplicationno");

                string sqlquery = string.Empty;
                sqlquery = UniteERPQuery.VoucherProcessing.GetApplicationNoandOustandingQ1();
                //sqlquery = @"select distinct applicationno,sum(outstandingAmount) OS  from LN_Outstandings where ProductCode='" + productslno + "' and  LoanNo='" + accountno + "' and  AdmissionNo='" + admissionnopkey + "' and PacsId='" + pacsid + "' and BranchId='" + branchid + "' and TransrollID=1 group by ApplicationNo";
                var appresult = session.CreateSQLQuery(sqlquery)
                    .SetParameter("productslno", productslno)
                    .SetParameter("accountno", accountno)
                    .SetParameter("admissionnopkey", admissionnopkey)
                   .SetParameter("pacsid", pacsid)
                    .SetParameter("branchid", branchid)
                    .List<object[]>();
                if (appresult != null && appresult.Count() > 0)
                {
                    applicationno = Convert.ToInt64(appresult[0][0]);
                    outstanding = Convert.ToDecimal(appresult[0][1]);
                    return new Tuple<long, decimal>(applicationno, outstanding);
                }
                else
                {
                    sqlquery = string.Empty;
                    sqlquery = UniteERPQuery.VoucherProcessing.GetApplicationNoandOustandingQ2();
                    //sqlquery = @"select distinct applicationno from ln_sanctions where applicationno in(
                    //        select  applicationno  from ln_applicationmain 
                    //    where productid='" + productslno + "'  and admissionno='" + admissionnopkey + "' and PacsId='" + pacsid + "' and BranchId='" + branchid + "') and loanno='" + accountno + @"'";
                    applicationno = session.CreateSQLQuery(sqlquery)
                        .SetParameter("productslno", productslno)
                        .SetParameter("accountno", accountno)
                        .SetParameter("admissionnopkey", admissionnopkey)
                        .SetParameter("pacsid", pacsid)
                        .SetParameter("branchid", branchid)
                        .UniqueResult<long>();
                    return new Tuple<long, decimal>(applicationno, 0);
                }
            }
            catch (Exception ex)
            {
                log.Error(ex);
                return new Tuple<long, decimal>(applicationno, outstanding);
            }

        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="ledger"></param>
        /// <param name="pacsid"></param>
        /// <param name="branchid"></param>
        /// <returns></returns>
        public long GetMaxVoucherIdfromVoucherDetailsTempByLedgerCode(int ledger, long pacsid, int branchid)
        {
            log.Debug(" Entering into GetMaxVoucherIdfromVoucherDetailsTempByLedgerCode");
            try
            {
                VoucherDetailsTemp obj;
                //obj.VoucherDetailID
                //listVoucherDetailTemp = session.QueryOver<VoucherDetailsTemp>().Where(i => i.LedgerCode == objLedger && i.PacsId == userCredentials.PacsId && i.BranchId == userCredentials.BranchId).List<VoucherDetailsTemp>();
                IQuery query = session.CreateQuery("select max(vd.VoucherDetailID) from VoucherDetailsTemp vd where  vd.LedgerCode.LedgerId = :Ledger  and vd.PacsId=:pacs and vd.BranchId=:branch");
                query.SetParameter("Ledger", ledger);
                query.SetParameter("pacs", pacsid);
                query.SetParameter("branch", branchid);
                log.Debug(" Leaving into GetMaxVoucherIdfromVoucherDetailsTempByLedgerCode");
                return query.UniqueResult<long>();
            }
            catch (Exception ex)
            {
                ////TransactionErrorLogBL.TrackErrorLog(ex.Message, GlobalUserCredentials);
                log.Error(ex);
                return 0;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="ledger"></param>
        /// <param name="pacsid"></param>
        /// <param name="branchid"></param>
        /// <returns></returns>
        public long GetMaxVoucherIdfromVoucherDetailsByLedgerCode(int ledger, long pacsid, int branchid)
        {
            log.Debug(" Entering into GetMaxVoucherIdfromVoucherDetailsByLedgerCode");
            try
            {
                VoucherDetailsTemp obj;
                //obj.VoucherDetailID
                //listVoucherDetailTemp = session.QueryOver<VoucherDetailsTemp>().Where(i => i.LedgerCode == objLedger && i.PacsId == userCredentials.PacsId && i.BranchId == userCredentials.BranchId).List<VoucherDetailsTemp>();
                IQuery query = session.CreateQuery("select max(vd.VoucherDetailID) from VoucherDetails vd where  vd.LedgerCode.LedgerId = :Ledger  and vd.PacsId=:pacs and vd.BranchId=:branch");
                query.SetParameter("Ledger", ledger);
                query.SetParameter("pacs", pacsid);
                query.SetParameter("branch", branchid);
                log.Debug(" Leaving into GetMaxVoucherIdfromVoucherDetailsByLedgerCode");
                return query.UniqueResult<long>();
            }
            catch (Exception ex)
            {
                ////TransactionErrorLogBL.TrackErrorLog(ex.Message, GlobalUserCredentials);
                log.Error(ex);
                return 0;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="ledger"></param>
        /// <param name="pacsid"></param>
        /// <param name="branchid"></param>
        /// <param name="accountcode"></param>
        /// <returns></returns>
        public long GetMaxVoucherIdfromVoucherDetailsByLedgerCodeandAccountCode(int ledger, long pacsid, int branchid, string accountcode)
        {
            log.Debug(" Entering into GetMaxVoucherIdfromVoucherDetailsByLedgerCodeandAccountCode");
            try
            {
                VoucherDetailsTemp obj;
                //obj.AccountCode.AccountID
                //listVoucherDetailTemp = session.QueryOver<VoucherDetailsTemp>().Where(i => i.LedgerCode == objLedger && i.PacsId == userCredentials.PacsId && i.BranchId == userCredentials.BranchId).List<VoucherDetailsTemp>();
                IQuery query = session.CreateQuery("select max(vd.VoucherDetailID) from VoucherDetails vd where  vd.LedgerCode.LedgerId = :Ledger  and vd.PacsId=:pacs and vd.BranchId=:branch and vd.AccountCode.AccountID=:Accountid");
                query.SetParameter("Ledger", ledger);
                query.SetParameter("pacs", pacsid);
                query.SetParameter("branch", branchid);
                query.SetParameter("Accountid", accountcode);
                log.Debug(" Leaving into GetMaxVoucherIdfromVoucherDetailsByLedgerCodeandAccountCode");
                return query.UniqueResult<long>();
            }
            catch (Exception ex)
            {
                ////TransactionErrorLogBL.TrackErrorLog(ex.Message, GlobalUserCredentials);
                log.Error(ex);
                return 0;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="collectedprincipal"></param>
        /// <param name="collectedinterest"></param>
        /// <param name="collectedpenalinterest"></param>
        /// <param name="collectediod"></param>
        /// <param name="collectedothers"></param>
        /// <param name="otherstransrollid"></param>
        /// <param name="pacsid"></param>
        /// <param name="branchid"></param>
        /// <param name="applicationno"></param>
        /// <param name="loanno"></param>
        /// <param name="admissionno"></param>
        /// <param name="TransactionDate"></param>
        /// <returns></returns>
        public IList<Outstandings> PrepareOutstandingsObject(decimal collectedprincipal, decimal collectedinterest, decimal collectedpenalinterest, decimal collectediod, decimal collectedothers, int otherstransrollid, long pacsid, int branchid, long applicationno, string loanno, string admissionno, DateTime TransactionDate)
        {
            log.Debug(" Entering into PrepareOutstandingsObject");

            try
            {
                IQuery query = session.CreateQuery(string.Format(@" from  Outstandings d where  d.ApplicationNo=:applno and d.Pacsid=:pacsid and d.BranchId=:branchid and (d.OutstandingAmount>0 or d.Interest>0 or d.PenalInterest>0 or d.IOA>0)"));
                query.SetParameter("applno", applicationno);
                query.SetParameter("pacsid", pacsid);
                query.SetParameter("branchid", branchid);
                var outstandingslist = query.List<Outstandings>();
                if (outstandingslist != null && outstandingslist.Count > 0)
                {
                    foreach (var v in outstandingslist.OrderBy(i => i.DisbursementSlno).ToList())
                    {
                        if (v.Interest > 0)
                        {
                            if (collectedinterest >= v.Interest)
                            {
                                collectedinterest = collectedinterest - v.Interest;
                                v.Interest = 0;
                            }
                            else
                            {
                                v.Interest = v.Interest - collectedinterest;
                                collectedinterest = 0;
                            }
                        }
                        if (v.PenalInterest > 0)
                        {
                            if (collectedpenalinterest >= v.PenalInterest)
                            {
                                collectedpenalinterest -= v.PenalInterest;
                                v.PenalInterest = 0;
                            }
                            else
                            {
                                v.PenalInterest -= collectedpenalinterest;
                                collectedpenalinterest = 0;
                            }
                        }
                        if (v.IOA > 0)
                        {
                            if (collectediod >= v.IOA)
                            {
                                collectediod -= v.IOA;
                                v.IOA = 0;
                            }
                            else
                            {
                                v.IOA -= collectediod;
                                collectediod = 0;
                            }
                        }
                        if (v.OutstandingAmount > 0)
                        {
                            if (collectedprincipal >= v.OutstandingAmount)
                            {
                                collectedprincipal -= v.OutstandingAmount;
                                v.OutstandingAmount = 0;
                            }
                            else
                            {
                                v.OutstandingAmount -= collectedprincipal;
                                collectedprincipal = 0;
                            }
                        }
                        v.OutstandingDate = TransactionDate;
                    }
                }
                log.Debug(" Leaving into PrepareOutstandingsObject");
                return outstandingslist;
            }
            catch (Exception ex)
            {
                ////TransactionErrorLogBL.TrackErrorLog(ex.Message, GlobalUserCredentials);
                log.Error(ex);
                return null;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="batchid"></param>
        /// <param name="pacsid"></param>
        /// <param name="branchid"></param>
        /// <returns></returns>
        private VoucherMainTemp GetVchrMainTempByBatchid(long batchid, long pacsid, int branchid)
        {
            log.Debug(" Entering into GetVchrMainTempByBatchid");

            VoucherMainTemp objTemp = new VoucherMainTemp();
            try
            {
                IQuery query = session.CreateQuery(" from VoucherMainTemp d where  d.BatchId = :batchid  and d.PacsId=:pacs and d.BranchId=:branch");
                query.SetParameter("batchid", batchid);
                query.SetParameter("pacs", pacsid);
                query.SetParameter("branch", branchid);

                objTemp = query.UniqueResult<VoucherMainTemp>();
                log.Debug(" Leaving into GetVchrMainTempByBatchid");
            }
            catch (Exception ex)
            {
                ////TransactionErrorLogBL.TrackErrorLog(ex.Message, GlobalUserCredentials);
                log.Error(ex);
                //return null;
            }
            return objTemp;
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="transaction"></param>
        /// <param name="users"></param>
        /// <param name="objvchrtemp"></param>
        /// <returns></returns>
        private ChequeWithdrawalsTemp FillChequeWithdrawalTemp(TransactionDTO transaction, UserCredentials users, VoucherMainTemp objvchrtemp)
        {
            log.Debug(" Entering into FillChequeWithdrawalTemp");
            try
            {
                ChequeWithdrawalsTemp objchequedetails = new ChequeWithdrawalsTemp();
                IList<VoucherDetailsTemp> VchrDtlTemp = objvchrtemp.VoucherDetailsTemp;
                var savingsDetails = session.QueryOver<SbApplication>().Where(i => i.AccountCode == VchrDtlTemp[0].AccountCode && i.PacsId == users.PacsId && i.BranchId == users.BranchId && i.Status == "A" && i.ApprovalStatus == true).SingleOrDefault();
                //SbApplication sbapplication=session.Load<SbApplication>(VchrDtlTemp[0].AccountCode.AccountID);
                if (savingsDetails != null)
                {
                    objchequedetails.AccountNo = savingsDetails;
                    objchequedetails.Amount = objvchrtemp.Amount;
                    objchequedetails.InstrumentNo = transaction.ChequeNo;
                    objchequedetails.Instrumentdate = transaction.ChequeDate;
                    objchequedetails.BranchID = users.BranchId;
                    objchequedetails.PacsID = users.PacsId;
                    objchequedetails.Remarks = transaction.Narration;
                    objchequedetails.TransactionDate = transaction.TransactionDate;
                    objchequedetails.IDGeneratorForPacs = users.PacsId;
                    objchequedetails.SerialNumberOfPacs = users.PACSSerialNumber;
                }
                log.Debug(" Leaving into FillChequeWithdrawalTemp");
                return objchequedetails;
            }
            catch (Exception ex)
            {
                ////TransactionErrorLogBL.TrackErrorLog(ex.Message, GlobalUserCredentials);
                log.Error(ex);
                return null;
            }

        }


        public List<DemandCollectionBalanceDetailsTemp> GetDCBTempListForTermLoans(string demanddetailsxml, UserCredentials usercredentials, int productslno, long applicationno, string loanno, long admissionnopkey, long voucherid, string dtoxml, bool allowexcessamount)
        {
            List<DemandCollectionBalanceDetailsTemp> dcblist = new List<DemandCollectionBalanceDetailsTemp>();
            try
            {
                if (!string.IsNullOrEmpty(demanddetailsxml))
                {
                    //RijndaelEnhanced _encryptHash = new RijndaelEnhanced();
                    XmlDocument xd = new XmlDocument();
                    xd.LoadXml(demanddetailsxml);
                    XmlNodeList xnList = xd.SelectNodes("/Root/DemandDetails");
                    XmlDocument transactionxml = new XmlDocument();
                    transactionxml.LoadXml(dtoxml.ToString());
                    var transactionlist = GetTransactionMasterDTOList(transactionxml);
                    foreach (XmlNode xns in xnList)
                    {
                        foreach (XmlNode xn in xns.ChildNodes)
                        {
                            DemandCollectionBalanceDetailsTemp dcbtemp = new DemandCollectionBalanceDetailsTemp();
                            if (!Convert.IsDBNull(xn["DemandPrinicpal"]))
                            {
                                dcbtemp.DemandPrincipal = Convert.ToDecimal(xn["DemandPrinicpal"].InnerText);
                            }
                            if (!Convert.IsDBNull(xn["DemandInterest"]))
                            {
                                dcbtemp.DemandInterest = Convert.ToDecimal(xn["DemandInterest"].InnerText);

                            }
                            if (!Convert.IsDBNull(xn["DemandPenalInterest"]))
                            {
                                dcbtemp.DemandPenalInterest = Convert.ToDecimal(xn["DemandPenalInterest"].InnerText);

                            }
                            if (!Convert.IsDBNull(xn["DemandIOD"]))
                            {
                                dcbtemp.DemandIOD = Convert.ToDecimal(xn["DemandIOD"].InnerText);

                            }
                            if (!Convert.IsDBNull(xn["CollectedPrincipal"]))
                            {
                                dcbtemp.CollectedPrincipal = Convert.ToDecimal(xn["CollectedPrincipal"].InnerText);
                            }
                            if (!Convert.IsDBNull(xn["CollectedInterst"]))
                            {
                                dcbtemp.CollectedInterest = Convert.ToDecimal(xn["CollectedInterst"].InnerText);

                            }
                            if (!Convert.IsDBNull(xn["CollectedPenalInterest"]))
                            {
                                dcbtemp.CollectedPenalInterest = Convert.ToDecimal(xn["CollectedPenalInterest"].InnerText);

                            }
                            if (!Convert.IsDBNull(xn["CollectedIOD"]))
                            {
                                dcbtemp.CollectedIOD = Convert.ToDecimal(xn["CollectedIOD"].InnerText);

                            }

                            if (!Convert.IsDBNull(xn["InstallmentDueDate"]))
                            {
                                dcbtemp.DueDate = GetvalidDate(xn["InstallmentDueDate"].InnerText, usercredentials.Logindatetime);// DateTime.ParseExact(xn["InstallmentDueDate"].InnerText, "dd/MM/yyyy", CultureInfo.InvariantCulture);// Convert.ToDateTime(xn["InstallmentDueDate"].InnerText);
                            }
                            if (!Convert.IsDBNull(xn["IsAdvanceAmount"]))
                            {
                                dcbtemp.IsAdvanceCollection = Convert.ToBoolean(xn["IsAdvanceAmount"].InnerText == "1" ? true : false);
                                dcbtemp.IsSubsidyCollection = !dcbtemp.IsAdvanceCollection;
                            }
                            if (!Convert.IsDBNull(xn["AdvanceAmount"]))
                            {
                                dcbtemp.AdvancceAamount = Convert.ToDecimal(xn["AdvanceAmount"].InnerText);
                            }
                            if (!Convert.IsDBNull(xn["IsSameInstallmentAmount"]))
                            {
                                dcbtemp.IsSameInstallment = Convert.ToBoolean(xn["IsSameInstallmentAmount"].InnerText == "1" ? true : false);
                            }
                            //if (!Convert.IsDBNull(xn["DemandOthers"]))
                            //{
                            //    dcbtemp.DueDate = Convert.ToDateTime(xn["DemandOthers"].InnerText);
                            //}
                            dcbtemp.TransactiondDate = usercredentials.Logindatetime;
                            dcbtemp.ApplicationNo = applicationno;
                            dcbtemp.Loanno = loanno;
                            dcbtemp.ProductCode = productslno;
                            dcbtemp.PacsId = usercredentials.PacsId;
                            dcbtemp.BranchId = usercredentials.BranchId;
                            dcbtemp.IDGeneratorForPacs = usercredentials.PacsId;
                            dcbtemp.SerialNumberOfPacs = usercredentials.PACSSerialNumber;
                            dcbtemp.BalanceInterest = (dcbtemp.DemandInterest - dcbtemp.CollectedInterest) > 0 ? (dcbtemp.DemandInterest - dcbtemp.CollectedInterest) : 0;
                            dcbtemp.BalanceIOD = (dcbtemp.DemandIOD - dcbtemp.CollectedIOD) > 0 ? (dcbtemp.DemandIOD - dcbtemp.CollectedIOD) : 0;
                            dcbtemp.BalanceOthers = (dcbtemp.DemandOthers - dcbtemp.CollectedOthers) > 0 ? (dcbtemp.DemandOthers - dcbtemp.CollectedOthers) : 0;
                            dcbtemp.BalancePenalInterest = (dcbtemp.DemandPenalInterest - dcbtemp.CollectedPenalInterest) > 0 ? (dcbtemp.DemandPenalInterest - dcbtemp.CollectedPenalInterest) : 0;
                            if (allowexcessamount)
                            {
                                dcbtemp.BalancePrincipal = (dcbtemp.DemandPrincipal - dcbtemp.CollectedPrincipal);
                            }
                            else
                            {
                                dcbtemp.BalancePrincipal = (dcbtemp.DemandPrincipal - dcbtemp.CollectedPrincipal) > 0 ? (dcbtemp.DemandPrincipal - dcbtemp.CollectedPrincipal) : 0;
                            }
                            string _plaintext = Convert.ToString(dcbtemp.TransactiondDate) + "|" + Convert.ToString(dcbtemp.CollectedPrincipal) + "|" + Convert.ToString(dcbtemp.CollectedInterest) + "|" + Convert.ToString(dcbtemp.CollectedIOD) + "|" + Convert.ToString(dcbtemp.CollectedPenalInterest) + "|" + Convert.ToString(dcbtemp.CollectedOthers) + "|" + Convert.ToString(voucherid);
                            //string _EncryptText = _encryptHash.Encrypt(_plaintext);
                            //dcbtemp.SaltValue = _EncryptText;
                            dcblist.Add(dcbtemp);
                        }
                        //decimal totalinterest = dcblist.Sum(i => i.DemandInterest);
                        //decimal penalinterest = dcblist.Sum(i => i.DemandPenalInterest);
                        //decimal iod = dcblist.Sum(i => i.DemandIOD);
                        //decimal editedinterest = transactionlist.Where(i => i.TransrollID == 2).Sum(i => i.MaxAmount);
                        //decimal editedpenalinterest = transactionlist.Where(i => i.TransrollID == 3).Sum(i => i.MaxAmount);
                        //decimal editediodinterest = transactionlist.Where(i => i.TransrollID == 101).Sum(i => i.MaxAmount);
                        //if (editedinterest > totalinterest)
                        //{
                        //    dcblist.LastOrDefault().DemandInterest += (editedinterest - totalinterest);
                        //}
                        //if (editedpenalinterest > penalinterest)
                        //{
                        //    dcblist.LastOrDefault().DemandPenalInterest += (editedpenalinterest - penalinterest);
                        //}
                        //if (editediodinterest > iod)
                        //{
                        //    dcblist.LastOrDefault().DemandIOD += (editediodinterest - iod);
                        //}

                    }

                }
                return dcblist;
            }
            catch (Exception ex)
            {
                ////TransactionErrorLogBL.TrackErrorLog(ex.Message, GlobalUserCredentials);
                log.Error(ex);
                return null;
            }
        }

        public DateTime GetvalidDate(string date, DateTime logindate)
        {
            string[] formats = {"M/d/yyyy h:mm:ss tt", "M/d/yyyy h:mm tt",
                     "MM/dd/yyyy hh:mm:ss", "M/d/yyyy h:mm:ss",
                     "M/d/yyyy hh:mm tt", "M/d/yyyy hh tt",
                     "M/d/yyyy h:mm", "M/d/yyyy h:mm",
                     "MM/dd/yyyy hh:mm", "M/dd/yyyy hh:mm","yyyy-mm-dd"};

            string[] pSplit = new string[] { "-", "/" };
            string[] Split = date.Split(pSplit, StringSplitOptions.None);
            if (Split!=null && Split.Length>0)
            {
                if (Split[0].Length>2)
                {
                    //year
                    date = Split[0] + "/" + Split[1] + "/" + Split[2];
                }
                else
                {
                    date= Split[2] + "/" + Split[1] + "/" + Split[0];
                }
            }
            return Convert.ToDateTime(date);
            //DateTime parsedDate;
            //var isValidFormat = DateTime.TryParseExact(date, formats, CultureInfo.InvariantCulture, DateTimeStyles.None, out parsedDate);
            //if (isValidFormat)
            //{
            //    return parsedDate;
            //}
            //else
            //{
            //    return logindate;
            //}

        }


        public MoreDisbursementDetails GetMoreDisbursementDetails(string MoreDisburXML, long voucherid)
        {
            log.Debug("Entered in GetMoreDisbursementDetails");
            try
            {
                if (!string.IsNullOrEmpty(MoreDisburXML))
                {
                    XmlDocument xd = new XmlDocument();
                    xd.LoadXml(MoreDisburXML);
                    XmlNodeList xnList = xd.SelectNodes("/Root/MoreDisbursementDetails");
                    foreach (XmlNode xns in xnList)
                    {
                        foreach (XmlNode xn in xns.ChildNodes)
                        {
                            MoreDisbursementDetails more = new MoreDisbursementDetails();
                            more.VoucherId = voucherid;
                            more.ApplicationNo = Convert.ToInt64(xn["ApplicationNo"].InnerText);
                            more.ProductSlNo = Convert.ToInt32(xn["ProductSlno"].InnerText);
                            more.LoanNo = Convert.ToString(xn["LoanNo"].InnerText);

                            more.DCCBLoanNo = Convert.ToString(xn["DCCBLoanNo"].InnerText);
                            more.OldLoanNo = Convert.ToString(xn["OldLoanNo"].InnerText);

                            
                            if (!Convert.IsDBNull(xn["DpnDate"]))
                            {
                                more.DPNDate = GetvalidDate(xn["DpnDate"].InnerText, DateTime.Today);// DateTime.ParseExact(xn["DpnDate"].InnerText, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                //more.DPNDate = Convert.ToDateTime(xn["DpnDate"].InnerText);
                            }
                            more.DPNNo = Convert.ToString(xn["DpnNo"].InnerText);
                            if (!Convert.IsDBNull(xn["DueDate"]))
                            {
                                more.DueDate = GetvalidDate(xn["DueDate"].InnerText, DateTime.Today);// DateTime.ParseExact(xn["DueDate"].InnerText, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                                                                                     //  more.DueDate = Convert.ToDateTime(xn["DueDate"].InnerText);
                            }
                            if (!Convert.IsDBNull(xn["OldLoanNo"]))
                            {
                                more.OldLoanNo = Convert.ToString(xn["OldLoanNo"].InnerText);
                            }
                            if (!Convert.IsDBNull(xn["DCCBSBNo"]))
                            {
                                more.DCCBSBNo = Convert.ToString(xn["DCCBSBNo"].InnerText);
                            }
                            more.DebitSlipNo = Convert.ToString(xn["DebitSlipNo"].InnerText);
                            more.LedgerFolioNo = Convert.ToString(xn["LedgerFolioNo"].InnerText);
                            more.AdmissionNoPkey = Convert.ToInt64(xn["AdmissionNoPkey"].InnerText);
                            if (xn["DateOfAdvice"] != null)
                            {
                                more.DateOfAdvice = GetvalidDate(xn["DateOfAdvice"].InnerText, DateTime.Today);// DateTime.ParseExact(xn["DateOfAdvice"].InnerText, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                                                                                          // more.DateOfAdvice = Convert.ToDateTime(xn["DateOfAdvice"].InnerText);
                            }

                            if (!Convert.IsDBNull(xn["PolicyName"]))
                            {
                                more.PolicyName = Convert.ToString(xn["PolicyName"].InnerText);
                            }
                            if (!Convert.IsDBNull(xn["ROI"]))
                            {
                                more.ROI = Convert.ToDecimal(xn["ROI"].InnerText);
                            }
                            if (!Convert.IsDBNull(xn["PenalROI"]))
                            {
                                more.PenalROI = Convert.ToDecimal(xn["PenalROI"].InnerText);
                            }
                            if (!Convert.IsDBNull(xn["IOAROI"]))
                            {
                                more.IOAROI = Convert.ToDecimal(xn["IOAROI"].InnerText);
                            }


                            if (!Convert.IsDBNull(xn["IsVocuherWithShareAmount"]))
                            {
                                var isshare = Convert.ToString(xn["IsVoucherWithShareAmount"].InnerText);

                                more.IsVocuherWithShareAmount = isshare == "Y" ? true : false;
                            }
                            if (!Convert.IsDBNull(xn["ShareAmount"]))
                            {
                                more.ShareAmount = Convert.ToDecimal(xn["ShareAmount"].InnerText);
                            }
                            if (!Convert.IsDBNull(xn["ShareBalance"]))
                            {
                                more.ShareBalance = Convert.ToDecimal(xn["ShareBalance"].InnerText);
                            }
                            if (!Convert.IsDBNull(xn["SchemeId"]))
                            {
                                more.SchemeID = Convert.ToInt32(xn["SchemeId"].InnerText);
                            }
                            if (!Convert.IsDBNull(xn["ChequeDetails"]))
                            {
                                more.ChequeDetails = Convert.ToString(xn["ChequeDetails"].InnerText);
                            }
                            return more;
                        }
                    }
                    log.Debug("Leaving  GetMoreDisbursementDetails");
                }
                return null;
            }
            catch (Exception ex)
            {
                ////TransactionErrorLogBL.TrackErrorLog(ex.Message, GlobalUserCredentials);
                log.Error(ex);
                return null;
            }
        }

        public IList<VoucherDetailsTemp> FillVoucherDetailsTempForSubventionReceivable(IList<VoucherDetailsTemp> listVchrTemp, bool contra, TransactionDTO objVchrTransDto, UserCredentials userCredentials, long CashBookId, ProductWiseActivities activityType, long admissionnopkey, FinancialYearMaster finyear)
        {
            log.Debug(" Entering into FillVoucherDetailsTempForSubventionReceivable");
            try
            {
                Ledger objLedger = new Ledger();
                VoucherDetailsTemp VchrContraDetailsTemp = new VoucherDetailsTemp();
                bool IsForSubvention = true;

                if (finyear != null)
                {
                    VchrContraDetailsTemp.YearCode = finyear;
                }
                else
                {
                    VchrContraDetailsTemp.YearCode = GetFinancialYearCode(objVchrTransDto.TransactionDate);
                }

                //SWActivityTypeMaster activityType = session.Load<SWActivityTypeMaster>(objVchrTransDto.ActivityType);
                if (contra == false)
                {
                    XmlDocument xd = new XmlDocument();
                    xd.LoadXml(objVchrTransDto.XML.ToString());
                    TransactionTypeMasterDTO obj;
                    listTransaction = new List<TransactionTypeMasterDTO>();
                    XmlNodeList xnList = xd.SelectNodes("/Temp/row");
                    foreach (XmlNode xn in xnList)
                    {
                        obj = new TransactionTypeMasterDTO();
                        obj.Ledger = Convert.ToInt64(xn["LedgerID"].InnerText);
                        obj.LedgerDescription = xn["LedgerDescription"].InnerText;
                        obj.TransrollID = Convert.ToInt32(xn["TransrollID"].InnerText);
                        obj.TransrollDescription = xn["TransrollDescription"].InnerText;
                        obj.Amount = Convert.ToDecimal(xn["Amount"].InnerText);

                        listTransaction.Add(obj);
                        VoucherDetailsTemp listVoucherTemp = FillVoucherDetailTemp(objVchrTransDto, userCredentials, VchrContraDetailsTemp.YearCode, activityType, obj.Amount, obj.Ledger, 2, CashBookId, IsForSubvention, admissionnopkey);
                        //   listVoucherTemp.TransactionID = 40011;
                        if (listVoucherTemp.Credit != 0 || listVoucherTemp.Debit != 0)
                        {
                            listVoucherTemp.Debit = 0;
                            listVoucherTemp.Credit = 0;
                            listVoucherTemp.Debit = obj.Amount;
                            listVchrTemp.Add(listVoucherTemp);
                        }
                    }
                }
                else
                {

                    VoucherDetailsTemp objVoucherDetailsTemp = FillVoucherDetailTempCash(objVchrTransDto, userCredentials, VchrContraDetailsTemp.YearCode, activityType, CashBookId, IsForSubvention, admissionnopkey);
                    // objVoucherDetailsTemp.TransactionID = 40011;
                    listVchrTemp.Add(objVoucherDetailsTemp);

                }
                log.Debug(" Leaving into FillVoucherDetailsTempForSubventionReceivable");
                return listVchrTemp;
            }
            catch (Exception ex)
            {
                ////TransactionErrorLogBL.TrackErrorLog(ex.Message, GlobalUserCredentials);
                log.Error(ex);
                return null;
            }
        }

        public IList<VoucherDetailsTemp> FillVoucherDetailsTempForSubvention(IList<VoucherDetailsTemp> listVchrTemp, bool contra, TransactionDTO objVchrTransDto, UserCredentials userCredentials, long CashBookId, ProductWiseActivities activityType, long admissionnopkey, FinancialYearMaster finyear)
        {
            log.Debug(" Entering into FillVoucherDetailsTempData");
            try
            {
                Ledger objLedger = new Ledger();
                VoucherDetailsTemp VchrContraDetailsTemp = new VoucherDetailsTemp();
                bool IsForSubvention = true;

                if (finyear != null)
                {
                    VchrContraDetailsTemp.YearCode = finyear;
                }
                else
                {
                    VchrContraDetailsTemp.YearCode = GetFinancialYearCode(objVchrTransDto.TransactionDate);
                }

                //SWActivityTypeMaster activityType = session.Load<SWActivityTypeMaster>(objVchrTransDto.ActivityType);
                if (contra == false)
                {
                    XmlDocument xd = new XmlDocument();
                    xd.LoadXml(objVchrTransDto.XML.ToString());
                    TransactionTypeMasterDTO obj;
                    listTransaction = new List<TransactionTypeMasterDTO>();
                    XmlNodeList xnList = xd.SelectNodes("/Temp/row");
                    foreach (XmlNode xn in xnList)
                    {
                        obj = new TransactionTypeMasterDTO();
                        obj.Ledger = Convert.ToInt64(xn["LedgerID"].InnerText);
                        obj.LedgerDescription = xn["LedgerDescription"].InnerText;
                        obj.TransrollID = Convert.ToInt32(xn["TransrollID"].InnerText);
                        obj.TransrollDescription = xn["TransrollDescription"].InnerText;
                        obj.Amount = Convert.ToDecimal(xn["Amount"].InnerText);

                        listTransaction.Add(obj);
                        VoucherDetailsTemp listVoucherTemp = FillVoucherDetailTemp(objVchrTransDto, userCredentials, VchrContraDetailsTemp.YearCode, activityType, obj.Amount, obj.Ledger, obj.TransrollID, CashBookId, IsForSubvention, admissionnopkey);
                        //   listVoucherTemp.TransactionID = 40011;
                        if (listVoucherTemp.Credit != 0 || listVoucherTemp.Debit != 0)
                        {
                            listVoucherTemp.Debit = 0;
                            listVoucherTemp.Credit = 0;
                            listVoucherTemp.Debit = obj.Amount;
                            listVchrTemp.Add(listVoucherTemp);
                        }
                    }
                }
                else
                {

                    VoucherDetailsTemp objVoucherDetailsTemp = FillVoucherDetailTempCash(objVchrTransDto, userCredentials, VchrContraDetailsTemp.YearCode, activityType, CashBookId, IsForSubvention, admissionnopkey);
                    // objVoucherDetailsTemp.TransactionID = 40011;
                    listVchrTemp.Add(objVoucherDetailsTemp);

                }
                log.Debug(" Leaving into FillVoucherDetailsTempData");
                return listVchrTemp;
            }
            catch (Exception ex)
            {
                ////TransactionErrorLogBL.TrackErrorLog(ex.Message, GlobalUserCredentials);
                log.Error(ex);
                return null;
            }
        }

        public VoucherDetailsTemp GetAccountVoucherForSubvention(TransactionDTO objVchrTransDto, UserCredentials userCredentials, long CashBookId, ProductWiseActivities activityType, long admissionnopkey, FinancialYearMaster finyear)
        {
            log.Debug(" Entering into FillVoucherDetailsTempData");
            VoucherDetailsTemp vtemp = new VoucherDetailsTemp();
            try
            {
                TransactionBL bll = new TransactionBL(session);
                AccountDetails objAccountDetails = new AccountDetails();
                VoucherDetailsTemp listVoucherTemp = new VoucherDetailsTemp();
                Ledger objLedger = new Ledger();

                if (finyear != null)
                {
                    vtemp.YearCode = finyear;
                }
                else
                {
                    vtemp.YearCode = GetFinancialYearCode(objVchrTransDto.TransactionDate);
                }

                //SWActivityTypeMaster activityType = session.Load<SWActivityTypeMaster>(objVchrTransDto.ActivityType);
                decimal collectionamount = 0;
                XmlDocument xd = new XmlDocument();
                xd.LoadXml(objVchrTransDto.XML.ToString());
                TransactionTypeMasterDTO obj;
                listTransaction = new List<TransactionTypeMasterDTO>();
                XmlNodeList xnList = xd.SelectNodes("/Temp/row");
                foreach (XmlNode xn in xnList)
                {
                    obj = new TransactionTypeMasterDTO();
                    obj.Ledger = Convert.ToInt64(xn["LedgerID"].InnerText);
                    obj.LedgerDescription = xn["LedgerDescription"].InnerText;
                    obj.TransrollID = Convert.ToInt32(xn["TransrollID"].InnerText);
                    obj.TransrollDescription = xn["TransrollDescription"].InnerText;
                    obj.Amount = Convert.ToDecimal(xn["Amount"].InnerText);
                    collectionamount += obj.Amount;
                    var ledger = bll.GetLedgerDetails(Convert.ToInt64(objVchrTransDto.ActivityType), obj.TransrollID, userCredentials.PacsId, userCredentials.BranchId);

                }

                vtemp = FillVoucherDetailTempForSubvention(objVchrTransDto, userCredentials, vtemp.YearCode, activityType, collectionamount, 2, CashBookId, admissionnopkey);
                if (vtemp.Credit != 0 || vtemp.Debit != 0)
                {
                    vtemp.Debit = 0;
                    vtemp.Credit = 0;
                    vtemp.Credit = collectionamount;

                }

                log.Debug(" Leaving into FillVoucherDetailsTempData");
                return vtemp;
            }
            catch (Exception ex)
            {
                ////TransactionErrorLogBL.TrackErrorLog(ex.Message, GlobalUserCredentials);
                log.Error(ex);
                return null;
            }
        }
        private VoucherDetailsTemp FillVoucherDetailTempForSubvention(TransactionDTO objVchrTransDto, UserCredentials userCredentials, FinancialYearMaster yearcode, ProductWiseActivities activityType, decimal amount, int transrolid, long CashBookId, long admissionnopkey)
        {
            try
            {
                CommonFasBL fascommonbl = new CommonFasBL(session);
                VoucherDetailsTemp listVchrTemp = new VoucherDetailsTemp();
                VoucherDetailsTemp objVoucherDetailsTemp = new VoucherDetailsTemp();
                if (amount > 0)
                {

                    Ledger objLedger = new Ledger();


                    objVoucherDetailsTemp.ProductId = GetProductDetailsByslno(objVchrTransDto.Product);
                    objLedger = fascommonbl.GetLedgerByProductSlNoAndTransrollID(objVoucherDetailsTemp.ProductId.Slno, transrolid, 3, userCredentials.PacsId, userCredentials.BranchId);
                    objVoucherDetailsTemp.ProductTypeID = objVoucherDetailsTemp.ProductId.ProductTypeID;// session.Load<ProductTypeMaster>();
                    //if (ledgerid < 1000)
                    //    objLedger = session.QueryOver<Ledger>().Where(i => i.LedgerId == ledgerid && i.PacsId == "0" && i.BranchId == "0").SingleOrDefault<Ledger>();
                    //else
                    //    objLedger = session.QueryOver<Ledger>().Where(i => i.LedgerId == ledgerid && i.PacsId == userCredentials.PacsId && i.BranchId == userCredentials.BranchId).SingleOrDefault<Ledger>();
                    AccountDetails objAccountDetails = new AccountDetails();
                    objAccountDetails = GetAccountDetails(objVoucherDetailsTemp.ProductId.Slno, objVchrTransDto.AccountNo, userCredentials.PacsId, userCredentials.BranchId, admissionnopkey);
                    objVoucherDetailsTemp.AccountCode = objAccountDetails;
                    objVoucherDetailsTemp.YearCode = yearcode;
                    objVoucherDetailsTemp.TransactionDate = userCredentials.Logindatetime;
                    if (activityType.FinTransactionType.TransactionTypeId == 1)
                    {
                        objVoucherDetailsTemp.Debit = 0;
                        objVoucherDetailsTemp.Credit = amount;
                    }
                    else
                    {
                        objVoucherDetailsTemp.Debit = amount;
                        objVoucherDetailsTemp.Credit = 0;
                    }
                    objVoucherDetailsTemp.LedgerCode = objLedger;
                    //listVoucherDetail = new List<VoucherDetails>();
                    if (objVoucherDetailsTemp.AccountCode != null)
                    {
                        if (objVoucherDetailsTemp.LedgerCode.AccountType.AccountTypeID == 1)
                        {
                            objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetCashBalance(userCredentials.PacsId, userCredentials.BranchId, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), objVoucherDetailsTemp.YearCode.YearCode, CashBookId, 0);
                        }
                        else
                        {
                            long accountid = objVoucherDetailsTemp.AccountCode.AccountID;
                            objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(objVoucherDetailsTemp.LedgerCode.LedgerId, userCredentials.PacsId, userCredentials.BranchId, objVoucherDetailsTemp.YearCode.YearCode, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId, accountid);
                            //objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(objVoucherDetailsTemp.LedgerCode, userCredentials.PacsId, userCredentials.BranchId, objVoucherDetailsTemp.YearCode, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), accountid);
                        }
                    }
                    else
                    {
                        if (objVoucherDetailsTemp.LedgerCode.AccountType.AccountTypeID == 1)
                        {
                            objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetCashBalance(userCredentials.PacsId, userCredentials.BranchId, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), objVoucherDetailsTemp.YearCode.YearCode, CashBookId, 0);
                        }
                        else
                        {
                            objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(objVoucherDetailsTemp.LedgerCode.LedgerId, userCredentials.PacsId, userCredentials.BranchId, objVoucherDetailsTemp.YearCode.YearCode, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId);
                        }
                        //objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(objVoucherDetailsTemp.LedgerCode, userCredentials.PacsId, userCredentials.BranchId, objVoucherDetailsTemp.YearCode, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)));
                        //listVoucherDetail = session.QueryOver<VoucherDetails>().Where(i => i.LedgerCode == vdm.LedgerCode  && i.PacsId == Vd.PacsId && i.BranchId == Vd.BranchId).List<VoucherDetails>();
                    }
                    if (objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.liabilities) || objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.income))
                    {
                        objVoucherDetailsTemp.BalanceAmount = objVoucherDetailsTemp.OpeningAmount + objVoucherDetailsTemp.Credit - objVoucherDetailsTemp.Debit;
                    }
                    else if (objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.asset) || objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.Expenditure))
                    {
                        objVoucherDetailsTemp.BalanceAmount = objVoucherDetailsTemp.OpeningAmount - objVoucherDetailsTemp.Credit + objVoucherDetailsTemp.Debit;
                    }
                    objVoucherDetailsTemp.CashBookId = CashBookId;
                    objVoucherDetailsTemp.Narration = objVchrTransDto.Narration; //"share deposit"; //GetNarrationTemplateDetails(104).DebitCashNarration;
                    objVoucherDetailsTemp.TransrollID = transrolid;
                    objVoucherDetailsTemp.TransactionDate = Convert.ToDateTime(objVchrTransDto.TransactionDate).Date;
                    objVoucherDetailsTemp.ValueDate = Convert.ToDateTime(objVchrTransDto.ValueDate.ToShortDateString() + " " + DateTime.Now.TimeOfDay);
                    objVoucherDetailsTemp.VoucherDetailID = 0;
                    objVoucherDetailsTemp.PacsId = userCredentials.PacsId;
                    objVoucherDetailsTemp.BranchId = userCredentials.BranchId;
                    objVoucherDetailsTemp.IDGeneratorForPacs = userCredentials.PacsId;
                    objVoucherDetailsTemp.SerialNumberOfPacs = userCredentials.PACSSerialNumber;
                    // objVoucherDetailsTemp.TransactionID = 40011;
                    TransactionBL objTransactionBL = new TransactionBL(session);
                    objVoucherDetailsTemp.TransactionID = objTransactionBL.GetTransactionID(objVchrTransDto.ActivityType);

                }

                return objVoucherDetailsTemp;
            }
            catch (Exception ex)
            {
                ////TransactionErrorLogBL.TrackErrorLog(ex.Message, GlobalUserCredentials);
                log.Error(ex);
                return null;
            }
        }

        public DateTime? GetMaxDueDate(long applicationno, long pacsid, int branchid)
        {
            string sqlquery = string.Empty;
            try
            {
                sqlquery = UniteERPQuery.VoucherProcessing.GetMaxDueDate();
                //sqlquery = @"select max(duedate) Duedate from ln_outstandings where applicationno='" + applicationno + "' and transrollid=1 and pacsid='" + pacsid + "' and branchid='" + branchid + "'";
                return session.CreateSQLQuery(sqlquery)
                    .SetParameter("applicationno", applicationno)
                     .SetParameter("pacsid", pacsid)
                      .SetParameter("branchid", branchid)
                      //long applicationno, long pacsid, int branchid
                    .UniqueResult<DateTime>();
            }
            catch (Exception ex)
            {
                ////TransactionErrorLogBL.TrackErrorLog(ex.Message, GlobalUserCredentials);
                log.Error(ex);
                return null;
            }
        }
        public bool GetVoucherApprovalStatus(long voucherid, UserCredentials usercredentials)
        {
            bool isApprovelimit = false;
            try
            {

                //code commented by manohar to get data from voucher main temp
                //                string sqlquery = string.Format(@"select MaxAmount from fa_voucherapprovallimits where Role={0} and PacsId='{1}' and BranchId='{2}' and 
                //                    MinAmount<=(select amount from FA_VoucherMain where VoucherID={3}) and MaxAmount>=(select amount from FA_VoucherMain where VoucherID={3}) 
                //                    and TransactionType=(select transactiontype from FA_VoucherMain where VoucherID={3})",
                string sqlquery = UniteERPQuery.VoucherProcessing.GetMaxDueDate2();
                //string sqlquery = string.Format(@"select MaxAmount from fa_voucherapprovallimits where Role={0} and PacsId='{1}' and BranchId='{2}' and 
                //    MinAmount<=(select amount from FA_VoucherMainTemp where VoucherID={3}) and MaxAmount>=(select amount from FA_VoucherMainTemp where VoucherID={3}) 
                //    and TransactionType=(select transactiontype from FA_VoucherMainTemp where VoucherID={3})",
                // usercredentials.RoleId, usercredentials.PacsId, usercredentials.BranchId, voucherid);//;
                decimal count = session.CreateSQLQuery(sqlquery)
                    .SetParameter("RoleId", usercredentials.RoleId)
                    .SetParameter("PacsId", usercredentials.PacsId)
                    .SetParameter("BranchId", usercredentials.BranchId)
                    .SetParameter("voucherid", voucherid)
                    //int RoleId, long PacsId, int BranchId,long voucherid
                    .UniqueResult<decimal>();
                if (count != 0)
                {
                    isApprovelimit = true;
                }

            }
            catch (Exception ex)
            {
                ////TransactionErrorLogBL.TrackErrorLog(ex.Message, GlobalUserCredentials);
                log.Error(ex);
                //return null;
            }
            return isApprovelimit;
        }


        #region Investments and borrowings

        public object[] SaveTransactionDetailsForFirm(TransactionDTO objTransactionDTDTO, UserCredentials usercredentials, bool IsReceipt)
        {
            try
            {
                FinancialYearMaster finyear = GetFinancialYearCode(objTransactionDTDTO.TransactionDate);
                //ProductWiseActivities objTransaction = session.Load<ProductWiseActivities>(objTransactionDTDTO.ActivityType);
                IList<ProductWiseActivities> lstProductWiseActivities = session.QueryOver<ProductWiseActivities>().Where(i => i.Activities.ActivityId == objTransactionDTDTO.ActivityType && i.FormId == objTransactionDTDTO.formid && i.Product.Slno == objTransactionDTDTO.Product).List<ProductWiseActivities>();
                Intellect.Unite.WebPackages.Loans.BL.LoansCommonMasterBl commonbl = new Loans.BL.LoansCommonMasterBl(session);
                //FinancialYearMaster yearcode = GetFinancialYearCode(objTransactionDTDTO.TransactionDate);
                ProductDetails productdetails = new ProductDetails();
                bool isAllowExcessAmount = false;
                decimal ExcessAmount = 0;

                log.Debug("Entering SaveShareAllotedDetails");

                if (objTransactionDTDTO.AccountPkey != null && objTransactionDTDTO.AccountPkey > 0)
                {
                    var accountdetails = session.Load<AccountDetails>(objTransactionDTDTO.AccountPkey);
                    if (accountdetails != null && accountdetails.AccountID > 0)
                    {
                        objTransactionDTDTO.AccountNo = accountdetails.AccountCode;
                        objTransactionDTDTO.AccountCode = accountdetails.AccountCode;
                    }
                }
                //SWActivityTypeMaster objTransaction = session.Load<SWActivityTypeMaster>(objTransactionDTDTO.ActivityType);

                VoucherMainTemp objvchrtemp = FillNewVoucherForFirm(objTransactionDTDTO, usercredentials, Convert.ToInt64(objTransactionDTDTO.AddmissionPkey), IsReceipt, finyear);


                var voucherdetailstemp = objvchrtemp.VoucherDetailsTemp;
                var cashvoucher = voucherdetailstemp.Where(i => i.TransrollID == 99).FirstOrDefault();

                bool allowTransaction = false;
                if (objvchrtemp.VoucherType.VoucherTypeID == 1)//cash
                {
                    CommonFasBL objbl = new CommonFasBL();
                    // Sunil
                    string ValueForParallel = objbl.GetParameterValueForParallelRun(usercredentials.PacsId, usercredentials.BranchId);
                    if (ValueForParallel == "Y")
                    {
                        allowTransaction = true;
                    }
                    else
                    {
                       if ((objvchrtemp.TransactionType.TransactionTypeID == 1) || (cashvoucher != null && cashvoucher.BalanceAmount > 0))
                      {
                        allowTransaction = true;
                      }
                       else
                     {
                        allowTransaction = false;
                     }
                    }
                }
                else if (objvchrtemp.VoucherType.VoucherTypeID == 2 || objvchrtemp.VoucherType.VoucherTypeID == 3)//transfer
                {
                    allowTransaction = true;
                }
                string message = string.Empty;
                long voucherId = 0;
                if (allowTransaction)
                {
                    if (objvchrtemp.VoucherNo == 0)
                    {
                        log.Debug("Entering  objvchrtemp.VoucherNo GetMaxVoucherNumber SaveTransactionDetailsForFirm");
                        objvchrtemp.VoucherNo = GetMaxVoucherNumber(Convert.ToDateTime(objvchrtemp.TransactionDate), usercredentials.UserName, usercredentials.PacsId, usercredentials.BranchId, usercredentials.PACSSerialNumber, objvchrtemp.TransactionType.TransactionTypeID, finyear.YearCode);

                        log.Debug("leave  objvchrtemp.VoucherNo GetMaxVoucherNumber SaveTransactionDetailsForFirm");

                        if (objvchrtemp.VoucherNo == 0)
                        {
                            message = "Could Not Generate Voucher No";
                            voucherId = 0;

                        }
                    }

                    session.Clear();
                    session.BeginTransaction();
                    if (objTransactionDTDTO.objDenominationDTO != null)
                    {
                        IList<Denominations> objDenominations = new List<Denominations>();
                        objDenominations = FillDenaminationDetails(objTransactionDTDTO.objDenominationDTO, usercredentials.PacsId, usercredentials.BranchId, lstProductWiseActivities.FirstOrDefault().FinTransactionType.TransactionTypeId, objTransactionDTDTO.TransactionDate, objvchrtemp.CashBookId);
                        if (objDenominations[0].TotalAmount != 0)
                        {
                            if (objDenominations.Count > 0)
                            {
                                foreach (var denomination in objDenominations)
                                {
                                    denomination.VoucherNumber = objvchrtemp.VoucherNo;
                                    denomination.IDGeneratorForPacs = usercredentials.PacsId;
                                    denomination.SerialNumberOfPacs = usercredentials.PACSSerialNumber;
                                    session.Save(denomination);
                                }
                            }
                        }
                    }
                    var temp = objvchrtemp.VoucherDetailsTemp;
                    VoucherControlRecord objControlRecords = SaveControlRecordForFirm(objvchrtemp, usercredentials, lstProductWiseActivities.FirstOrDefault().FinTransactionType.TransactionTypeId, objTransactionDTDTO);
                    objControlRecords.IDGeneratorForPacs = usercredentials.PacsId;
                    objControlRecords.SerialNumberOfPacs = usercredentials.PACSSerialNumber;
                    session.Save(objControlRecords);
                    if (transferslist.Count > 0)
                    {
                        foreach (var objTrans in transferslist)
                        {
                            objTrans.VoucherNo = objvchrtemp.VoucherNo;
                            objTrans.BatchId = Convert.ToInt64(objvchrtemp.BatchId);
                            session.SaveOrUpdate(objTrans);
                        }
                        session.SaveOrUpdate(objvchrtemp);
                    }
                    else
                    {
                        session.Save(objvchrtemp);
                    }
                    //RijndaelEnhanced _encryptHash2 = new RijndaelEnhanced();
                    //string _plaintext2 = Convert.ToString(objvchrtemp.TransactionDate) + "|" + Convert.ToString(objvchrtemp.Amount) + "|" + Convert.ToString(objvchrtemp.VoucherNo);
                    //string _EncryptText2 = _encryptHash2.Encrypt(_plaintext2);

                    if (usercredentials.IsEnableDailyActivityLog == true)
                    {
                        Mdm.Model.DailyActivityLog _dailyActivityLog = DailyActivityLog.CreateDailyActivityLog(usercredentials.UserName, usercredentials.Logindatetime, objTransactionDTDTO.formid, objTransactionDTDTO.ProductTypeId, 1, usercredentials.PacsId, usercredentials.BranchId, usercredentials.PACSSerialNumber);
                        session.Save(_dailyActivityLog);
                    }
                    //Added for Daily Activity Log End
                    session.Transaction.Commit();
                    voucherId = objvchrtemp.VoucherID;
                }
                else
                {
                    voucherId = 0;
                    message = "No Enough Cash Balance!";
                }
                log.Debug(" Leaving into SaveShareAllotedDetails");

                decimal debit = objvchrtemp.VoucherDetailsTemp.Sum(i => i.Debit);
                decimal credit = objvchrtemp.VoucherDetailsTemp.Sum(i => i.Credit);
                long voucherNo = objvchrtemp.VoucherNo;
                bool isApprovelimit = false;
                IList<VoucherApprovalLimits> voucherapprovallimitsList = session.QueryOver<VoucherApprovalLimits>().Where(i => i.Role == usercredentials.RoleId && i.BranchId == usercredentials.BranchId && i.PacsId == usercredentials.PacsId).List();
                if (voucherapprovallimitsList != null && voucherapprovallimitsList.Count > 0)
                {
                    IList<VoucherApprovalLimits> listv = voucherapprovallimitsList.Where(j => j.MinAmount <= objvchrtemp.Amount && j.MaxAmount >= objvchrtemp.Amount && j.TransactionType == objvchrtemp.TransactionType.TransactionTypeID).ToList<VoucherApprovalLimits>();
                    if (listv.Count != 0)
                    {
                        isApprovelimit = true;
                    }
                }
                if (voucherNo == 0 && message == "")
                {
                    message = "Assign Voucher sequence for daywise or yearwise";
                }
                object[] objVoucherId = { voucherId, debit, credit, isApprovelimit, message, voucherNo };
                return objVoucherId;
            }
            catch (Exception ex)
            {
                log.Error(ex);
                object[] objVoucherId = { };
                return objVoucherId;
            }

        }


        public VoucherMainTemp FillNewVoucherForFirm(TransactionDTO objTransactionDTO, UserCredentials userCredentials, long admissionnopkey, bool IsReceipt, FinancialYearMaster finyear)
        {
            log.Debug(" Entering into FillNewVoucher");
            CommonFasBL fascommonbl = new CommonFasBL(session);
            VoucherMainTemp objVoucherMain = new VoucherMainTemp();
            try
            {
                IList<VoucherDetailsTemp> voucherdetailslist = new List<VoucherDetailsTemp>();
                //ProductWiseActivities activityType = session.Load<ProductWiseActivities>(objTransactionDTO.ActivityType);

                if (Convert.ToInt64(objTransactionDTO.BatchID) != 0)
                {
                    objVoucherMain = GetVchrMainTempByBatchid(Convert.ToInt64(objTransactionDTO.BatchID), userCredentials.PacsId, userCredentials.BranchId);
                    if (objVoucherMain != null)
                    {
                        voucherdetailslist = objVoucherMain.VoucherDetailsTemp;
                    }
                    else
                    {
                        objVoucherMain = new VoucherMainTemp();

                        objVoucherMain = FillVouchermaintempForFirm(userCredentials, objTransactionDTO, IsReceipt, finyear);

                    }
                }
                else
                {
                    objVoucherMain = new VoucherMainTemp();

                    objVoucherMain = FillVouchermaintempForFirm(userCredentials, objTransactionDTO, IsReceipt, finyear);

                }
                long CashBookId = fascommonbl.Getcashcounterid(userCredentials.UserName, userCredentials.PacsId, userCredentials.BranchId);
                objVoucherMain.CashBookId = CashBookId;

                voucherdetailslist = FillVoucherDetailsTempDataForFirm(voucherdetailslist, false, objTransactionDTO, userCredentials, CashBookId, IsReceipt, finyear);

                if (objTransactionDTO.VoucherType == 1)
                {
                    objTransactionDTO.BatchID = 0;
                    voucherdetailslist = FillVoucherDetailsTempDataForFirm(voucherdetailslist, true, objTransactionDTO, userCredentials, CashBookId, IsReceipt, finyear);
                    objVoucherMain.VoucherDetailsTemp = voucherdetailslist;
                }
                else if (objTransactionDTO.VoucherType == 2)
                {
                    objVoucherMain.VoucherDetailsTemp = voucherdetailslist;
                    if (objVoucherMain.BatchId > 0)
                    {

                        Transfers objTransfers = new Transfers();
                        objTransfers = GetBatchByBatchId(Convert.ToInt64(objTransactionDTO.BatchID), userCredentials.PacsId, userCredentials.BranchId);
                        if (objTransfers == null)
                        {
                            transferslist = new List<Transfers>();
                            objTransfers = FillBatchDetails(userCredentials, objTransactionDTO, objVoucherMain.VoucherDetailsTemp);
                            transferslist.Add(objTransfers);
                        }
                        else
                        {
                            objTransfers = new Transfers();
                            if (objTransactionDTO.BatchID > 0)
                            {
                                transferslist = new List<Transfers>();
                                objTransfers = new Transfers();
                                objTransfers = GetBatchByBatchId(Convert.ToInt64(objTransactionDTO.BatchID), userCredentials.PacsId, userCredentials.BranchId);
                            }
                            objTransfers.Deposit = voucherdetailslist.Sum(i => i.Credit);
                            objTransfers.Withdrawl = voucherdetailslist.Sum(i => i.Debit);
                            transferslist.Add(objTransfers);
                        }
                    }
                }
                else if (objTransactionDTO.VoucherType == 3)
                {
                    //if (activityType != null && activityType.Activities.ActivityId == 8)
                    //{
                    //    objVoucherMain.VoucherDetailsTemp = voucherdetailslist;

                    //    VoucherDetailsTemp vtemp = GetPreparedVoucherDetailsTempObjectForInterestRebateCollections(objTransactionDTO, userCredentials, objVoucherMain.YearCode, activityType, voucherdetailslist.Sum(i => i.Credit), 0, 2, CashBookId);
                    //    if (vtemp != null)
                    //    {
                    //        objVoucherMain.VoucherDetailsTemp.Add(vtemp);
                    //    }
                    //}
                    //else
                    //{
                    VoucherDetailsTemp objContraTemp = FillVoucherDetailsTempDatafordefaultTransferForInvestments(objTransactionDTO, userCredentials, objVoucherMain.YearCode, CashBookId);
                    voucherdetailslist.Add(objContraTemp);
                    objVoucherMain.VoucherDetailsTemp = voucherdetailslist;
                    //}
                }
                objVoucherMain.Amount = listTransaction.Sum(i => i.Amount);
                log.Debug(" Leaving into FillNewVoucher");
            }
            catch (Exception ex)
            {
                log.Error(ex);
            }
            return objVoucherMain;
        }


        private VoucherMainTemp FillVouchermaintempForFirm(UserCredentials userCredentials, TransactionDTO objTransactionDTO, bool IsReceipt, FinancialYearMaster finyear)
        {
            log.Debug(" Entering into FillVouchermaintemp");

            VoucherMainTemp objVoucherMain = new VoucherMainTemp();
            try
            {
                objVoucherMain.BranchId = userCredentials.BranchId;
                objVoucherMain.BatchId = objTransactionDTO.BatchID;
                objVoucherMain.Narration = objTransactionDTO.Narration;// "share deposit";//GetNarrationTemplateDetails(5).CreditCashNarration;
                //objVoucherMain.NarrationRegional = objTransactionDTO.NarrationRegional;
                objVoucherMain.PacsId = userCredentials.PacsId;
                objVoucherMain.TransactionDate = objTransactionDTO.TransactionDate.Date;
                objVoucherMain.ValueDate = Convert.ToDateTime(objTransactionDTO.ValueDate.ToShortDateString() + " " + DateTime.Now.TimeOfDay);
                objVoucherMain.VisibleStatus = false;
                objVoucherMain.VoucherNo = 0;// objShareTransDto.VoucherNumber;
                objVoucherMain.SocityVoucherNo = objTransactionDTO.SocietyVoucherNo;
                objVoucherMain.VoucherType = session.Load<VoucherTypeMaster>(objTransactionDTO.VoucherType); //objCommonFasBL.GetVoucherType(1);
                //FATransactionMaster 1.Receipt;2.Payment;3.Transfer
                //VoucherType 1.Cash 2.Transfer 3.Bank 4.DefaultTransfer
                if (objTransactionDTO.VoucherType == 1)
                {
                    if (IsReceipt == true)//receipt
                    {
                        objVoucherMain.TransactionType = session.Load<FATransactionMaster>(1);
                    }
                    else if (IsReceipt == false)//payment
                    {
                        objVoucherMain.TransactionType = session.Load<FATransactionMaster>(2);
                    }
                }
                else //vouchertype=2=transfer
                {
                    objVoucherMain.TransactionType = session.Load<FATransactionMaster>(3);
                }
                objVoucherMain.VoucherDeleted = false;
                objVoucherMain.PassStatus = false;

                if (finyear != null)
                {
                    objVoucherMain.YearCode = finyear;
                }
                else
                {
                    objVoucherMain.YearCode = GetFinancialYearCode(objTransactionDTO.TransactionDate);
                }
                objVoucherMain.IDGeneratorForPacs = userCredentials.PacsId;
                objVoucherMain.SerialNumberOfPacs = userCredentials.PACSSerialNumber;
                log.Debug(" Leaving into FillVouchermaintemp");
            }
            catch (Exception ex)
            {
                log.Error(ex);
            }
            return objVoucherMain;
        }

        private IList<VoucherDetailsTemp> FillVoucherDetailsTempDataForFirm(IList<VoucherDetailsTemp> listVchrTemp, bool contra, TransactionDTO objVchrTransDto, UserCredentials userCredentials, long CashBookId, bool IsReceipt, FinancialYearMaster finyear)
        {
            log.Debug(" Entering into FillVoucherDetailsTempData");


            AccountDetails objAccountDetails = new AccountDetails();
            Ledger objLedger = new Ledger();
            VoucherDetailsTemp VchrContraDetailsTemp = new VoucherDetailsTemp();

            if (listVchrTemp.Count != 0)
            {
                VchrContraDetailsTemp.YearCode = listVchrTemp[0].YearCode;
            }
            else
            {
                VchrContraDetailsTemp.YearCode = GetFinancialYearCode(objVchrTransDto.TransactionDate);
            }


            //SWActivityTypeMaster activityType = session.Load<SWActivityTypeMaster>(objVchrTransDto.ActivityType);
            if (contra == false)
            {
                XmlDocument xd = new XmlDocument();
                xd.LoadXml(objVchrTransDto.XML.ToString());
                TransactionTypeMasterDTO obj;
                listTransaction = new List<TransactionTypeMasterDTO>();
                XmlNodeList xnList = xd.SelectNodes("/Temp/row");
                foreach (XmlNode xn in xnList)
                {
                    obj = new TransactionTypeMasterDTO();
                    obj.Ledger = Convert.ToInt64(xn["LedgerID"].InnerText);
                    obj.LedgerDescription = xn["LedgerDescription"].InnerText;
                    obj.TransrollID = Convert.ToInt32(xn["TransrollID"].InnerText);
                    obj.TransrollDescription = xn["TransrollDescription"].InnerText;
                    obj.Amount = Convert.ToDecimal(xn["Amount"].InnerText);

                    listTransaction.Add(obj);
                    VoucherDetailsTemp listVoucherTemp = FillVoucherDetailTempForFirm(objVchrTransDto, userCredentials, VchrContraDetailsTemp.YearCode, obj.Amount, obj.Ledger, obj.TransrollID, CashBookId, IsReceipt);
                    if (listVoucherTemp.Credit != 0 || listVoucherTemp.Debit != 0)
                    {
                        listVoucherTemp.IDGeneratorForPacs = userCredentials.PacsId;
                        listVoucherTemp.SerialNumberOfPacs = userCredentials.PACSSerialNumber;
                        listVchrTemp.Add(listVoucherTemp);
                    }
                }
            }
            else
            {
                VoucherDetailsTemp objVoucherDetailsTemp = FillVoucherDetailTempCashForFirm(objVchrTransDto, userCredentials, VchrContraDetailsTemp.YearCode, CashBookId, IsReceipt, finyear);
                objVoucherDetailsTemp.IDGeneratorForPacs = userCredentials.PacsId;
                objVoucherDetailsTemp.SerialNumberOfPacs = userCredentials.PACSSerialNumber;
                listVchrTemp.Add(objVoucherDetailsTemp);
            }
            log.Debug(" Leaving into FillVoucherDetailsTempData");
            return listVchrTemp;
        }

        private VoucherDetailsTemp FillVoucherDetailTempForFirm(TransactionDTO objVchrTransDto, UserCredentials userCredentials, FinancialYearMaster yearcode, decimal amount, long ledgerid, int transrolid, long CashBookId, bool IsReceipt)
        {
            CommonFasBL fascommonbl = new CommonFasBL(session);
            VoucherDetailsTemp listVchrTemp = new VoucherDetailsTemp();
            VoucherDetailsTemp objVoucherDetailsTemp = new VoucherDetailsTemp();
            if (amount > 0)
            {
                Ledger objLedger = new Ledger();
                objVoucherDetailsTemp.TransactionDate = Convert.ToDateTime(objVchrTransDto.TransactionDate).Date;
                objVoucherDetailsTemp.ValueDate = Convert.ToDateTime(objVchrTransDto.ValueDate.ToShortDateString() + " " + DateTime.Now.TimeOfDay);
                objVoucherDetailsTemp.VoucherDetailID = 0;
                objVoucherDetailsTemp.PacsId = userCredentials.PacsId;
                objVoucherDetailsTemp.BranchId = userCredentials.BranchId;
                TransactionBL objTransactionBL = new TransactionBL(session);

                objVoucherDetailsTemp.ProductId = GetProductDetailsByslno(objVchrTransDto.Product);
                objVoucherDetailsTemp.ProductTypeID = objVoucherDetailsTemp.ProductId.ProductTypeID;// session.Load<ProductTypeMaster>();
                objLedger = session.QueryOver<Ledger>().Where(i => i.LedgerId == ledgerid && (i.PacsId == userCredentials.PacsId || i.PacsId == 0) && (i.BranchId == userCredentials.BranchId || i.BranchId == 0)).SingleOrDefault<Ledger>();

                AccountDetails objAccountDetails = new AccountDetails();
                objAccountDetails = session.Load<AccountDetails>(objVchrTransDto.AccountPkey);
                objVoucherDetailsTemp.AccountCode = objAccountDetails;

                objVoucherDetailsTemp.YearCode = yearcode;
                if (objVchrTransDto.formid == 16002)
                {
                    objVoucherDetailsTemp.TransactionID = 16011; // Investment application transaction.
                }
                else if (objVchrTransDto.formid == 16003)
                {
                    objVoucherDetailsTemp.TransactionID = 16012;// Investment Interest Payments.
                }
                else if (objVchrTransDto.formid == 16004)
                {
                    objVoucherDetailsTemp.TransactionID = 16013;// Investment closure.
                }
                else if (objVchrTransDto.formid == 16005)
                {
                    objVoucherDetailsTemp.TransactionID = 16014; // Investment foreclosure.
                }
                else if (objVchrTransDto.formid == 16006)
                {
                    objVoucherDetailsTemp.TransactionID = 16015; // investment share deposits.
                }
                else if (objVchrTransDto.formid == 16007)
                {
                    objVoucherDetailsTemp.TransactionID = 16016; // investment share withdrawal.
                }
                if (IsReceipt == true)
                {
                    objVoucherDetailsTemp.Debit = 0;
                    objVoucherDetailsTemp.Credit = amount;
                }
                else
                {
                    objVoucherDetailsTemp.Debit = amount;
                    objVoucherDetailsTemp.Credit = 0;
                }
                objVoucherDetailsTemp.LedgerCode = objLedger;
                //listVoucherDetail = new List<VoucherDetails>();
                if (objVoucherDetailsTemp.AccountCode != null)
                {
                    if (objVoucherDetailsTemp.LedgerCode.AccountType.AccountTypeID == 1)
                    {
                        objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetCashBalance(userCredentials.PacsId, userCredentials.BranchId, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), objVoucherDetailsTemp.YearCode.YearCode, CashBookId, 0);
                    }
                    else
                    {
                        long accountid = objVoucherDetailsTemp.AccountCode.AccountID;
                        objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(objVoucherDetailsTemp.LedgerCode.LedgerId, userCredentials.PacsId, userCredentials.BranchId, objVoucherDetailsTemp.YearCode.YearCode, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId, accountid);
                        //objVoucheDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(objVoucherDetailsTemp.LedgerCode, userCredentials.PacsId, userCredentials.BranchId, objVoucherDetailsTemp.YearCode, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), accountid);
                    }

                }
                else
                {
                    if (objVoucherDetailsTemp.LedgerCode.AccountType.AccountTypeID == 1)
                    {
                        objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetCashBalance(userCredentials.PacsId, userCredentials.BranchId, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), objVoucherDetailsTemp.YearCode.YearCode, CashBookId, 0);
                    }
                    else
                    {
                        objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(objVoucherDetailsTemp.LedgerCode.LedgerId, userCredentials.PacsId, userCredentials.BranchId, objVoucherDetailsTemp.YearCode.YearCode, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId);
                    }
                    //objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(objVoucherDetailsTemp.LedgerCode, userCredentials.PacsId, userCredentials.BranchId, objVoucherDetailsTemp.YearCode, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)));
                    //listVoucherDetail = session.QueryOver<VoucherDetails>().Where(i => i.LedgerCode == vdm.LedgerCode  && i.PacsId == Vd.PacsId && i.BranchId == Vd.BranchId).List<VoucherDetails>();
                }
                if (objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.liabilities) || objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.income))
                {
                    objVoucherDetailsTemp.BalanceAmount = objVoucherDetailsTemp.OpeningAmount + objVoucherDetailsTemp.Credit - objVoucherDetailsTemp.Debit;
                }
                else if (objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.asset) || objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.Expenditure))
                {
                    objVoucherDetailsTemp.BalanceAmount = objVoucherDetailsTemp.OpeningAmount - objVoucherDetailsTemp.Credit + objVoucherDetailsTemp.Debit;
                }
                objVoucherDetailsTemp.CashBookId = CashBookId;
                objVoucherDetailsTemp.Narration = objVchrTransDto.Narration; //"share deposit"; //GetNarrationTemplateDetails(104).DebitCashNarration;
                objVoucherDetailsTemp.TransrollID = transrolid;
                objVoucherDetailsTemp.NarrationForPassBookPrint = objVchrTransDto.NarrationForSBTransactions;

                // 10011;//(GetTransactionActivitiesDetails(10011, 1001)).Moduleactivityid;

            }

            return objVoucherDetailsTemp;
        }

        private VoucherDetailsTemp FillVoucherDetailTempCashForFirm(TransactionDTO objVchrTransDto, UserCredentials userCredentials, FinancialYearMaster yearcode, long CashBookId, bool IsReceipt, FinancialYearMaster finyear)
        {
            CommonFasBL fascommonbl = new CommonFasBL(session);
            VoucherDetailsTemp VchrContraDetailsTemp = new VoucherDetailsTemp();
            VchrContraDetailsTemp.ProductId = GetProductDetailsByslno(objVchrTransDto.Product);
            VchrContraDetailsTemp.ProductTypeID = VchrContraDetailsTemp.ProductId.ProductTypeID;// session.Load<ProductTypeMaster>(objVoucherDetailsTemp.ProductId.ProductTypeID);
            Ledger objLedger = GetLedgerDetails(VchrContraDetailsTemp.ProductId.Slno, 99, userCredentials.PacsId, userCredentials.BranchId);
            VchrContraDetailsTemp.LedgerCode = objLedger;

            AccountDetails objAccountDetails = new AccountDetails();
            objAccountDetails = session.Load<AccountDetails>(objVchrTransDto.AccountPkey);
            VchrContraDetailsTemp.AccountCode = objAccountDetails;

            if (finyear != null)
            {
                VchrContraDetailsTemp.YearCode = finyear;
            }
            else
            {
                VchrContraDetailsTemp.YearCode = GetFinancialYearCode(objVchrTransDto.TransactionDate);
            }

            if (IsReceipt == true)
            {
                VchrContraDetailsTemp.Debit = listTransaction.Sum(i => i.Amount);
                VchrContraDetailsTemp.Credit = 0;
            }
            else
            {
                VchrContraDetailsTemp.Debit = 0;
                VchrContraDetailsTemp.Credit = listTransaction.Sum(i => i.Amount);
            }
            IList<VoucherDetailsTemp> listVoucherDetailTemp = new List<VoucherDetailsTemp>();
            //if (VchrContraDetailsTemp.AccountCode != null)
            //{

            //    VchrContraDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(VchrContraDetailsTemp.LedgerCode.LedgerId, userCredentials.PacsId, userCredentials.BranchId, VchrContraDetailsTemp.YearCode.YearCode, Convert.ToDateTime(objVchrTransDto.TransactionDate.AddDays(1)),VchrContraDetailsTemp.LedgerCode.LedgerType.LedgerTypeId, VchrContraDetailsTemp.AccountCode.AccountID);
            //    //VchrContraDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(VchrContraDetailsTemp.LedgerCode, userCredentials.PacsId, userCredentials.BranchId, VchrContraDetailsTemp.YearCode, Convert.ToDateTime(objVchrTransDto.TransactionDate.AddDays(1)), VchrContraDetailsTemp.AccountCode.AccountID);
            //}
            //else
            //{if (objVoucherDetailsTemp.LedgerCode.AccountType.AccountTypeID == 1)
            if (VchrContraDetailsTemp.LedgerCode.AccountType.AccountTypeID == 1)
            {
                VchrContraDetailsTemp.OpeningAmount = fascommonbl.GetCashBalance(userCredentials.PacsId, userCredentials.BranchId, Convert.ToDateTime(objVchrTransDto.TransactionDate.AddDays(1)), VchrContraDetailsTemp.YearCode.YearCode, CashBookId, 0);
            }
            else
            {
                VchrContraDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(VchrContraDetailsTemp.LedgerCode.LedgerId, userCredentials.PacsId, userCredentials.BranchId, VchrContraDetailsTemp.YearCode.YearCode, Convert.ToDateTime(objVchrTransDto.TransactionDate.AddDays(1)), VchrContraDetailsTemp.LedgerCode.LedgerType.LedgerTypeId);
            }
            //VchrContraDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(VchrContraDetailsTemp.LedgerCode, userCredentials.PacsId, userCredentials.BranchId, VchrContraDetailsTemp.YearCode, Convert.ToDateTime(objVchrTransDto.TransactionDate.AddDays(1)));
            //listVoucherDetail = session.QueryOver<VoucherDetails>().Where(i => i.LedgerCode == vdm.LedgerCode  && i.PacsId == Vd.PacsId && i.BranchId == Vd.BranchId).List<VoucherDetails>();
            // }
            if (VchrContraDetailsTemp.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.liabilities))
            {
                VchrContraDetailsTemp.BalanceAmount = VchrContraDetailsTemp.OpeningAmount + VchrContraDetailsTemp.Credit - VchrContraDetailsTemp.Debit;
            }
            else if (VchrContraDetailsTemp.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.asset))
            {
                VchrContraDetailsTemp.BalanceAmount = VchrContraDetailsTemp.OpeningAmount - VchrContraDetailsTemp.Credit + VchrContraDetailsTemp.Debit;
            }

            VchrContraDetailsTemp.Narration = "Cash"; //objVchrTransDto.Narration;
            VchrContraDetailsTemp.TransrollID = 99;

            VchrContraDetailsTemp.TransactionDate = Convert.ToDateTime(objVchrTransDto.TransactionDate).Date;

            VchrContraDetailsTemp.ValueDate = Convert.ToDateTime(objVchrTransDto.ValueDate.ToShortDateString() + " " + DateTime.Now.TimeOfDay);
            VchrContraDetailsTemp.VoucherDetailID = 0;
            VchrContraDetailsTemp.CashBookId = CashBookId;
            VchrContraDetailsTemp.PacsId = userCredentials.PacsId;
            VchrContraDetailsTemp.BranchId = userCredentials.BranchId;



            TransactionBL objTransactionBL = new TransactionBL(session);
            if (objVchrTransDto.formid == 16002)
            {
                VchrContraDetailsTemp.TransactionID = 16011;
            }
            else if (objVchrTransDto.formid == 16003)
            {
                VchrContraDetailsTemp.TransactionID = 16012;
            }
            else if (objVchrTransDto.formid == 16004)
            {
                VchrContraDetailsTemp.TransactionID = 16013;
            }
            else if (objVchrTransDto.formid == 16005)
            {
                VchrContraDetailsTemp.TransactionID = 16014;
            }
            else if (objVchrTransDto.formid == 16006)
            {
                VchrContraDetailsTemp.TransactionID = 16015;
            }

            return VchrContraDetailsTemp;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="voucher"></param>
        /// <param name="usercredentials"></param>
        /// <returns></returns>
        public VoucherControlRecord SaveControlRecordForFirm(VoucherMainTemp voucher, UserCredentials usercredentials, long transactionid, TransactionDTO objTransactionDTDTO)
        {
            log.Debug(" Entering into SaveControlRecord");

            VoucherControlRecord objControlRecord = new VoucherControlRecord();
            objControlRecord.Activity = "Save";
            objControlRecord.AdmissionNo = objTransactionDTDTO.AccountNo.ToString();
            objControlRecord.AccountNo = objTransactionDTDTO.AccountNo.ToString();
            objControlRecord.BranchId = usercredentials.BranchId;
            objControlRecord.DateTime = usercredentials.Logindatetime.ToString();
            objControlRecord.KeyValue = voucher.VoucherNo.ToString();
            objControlRecord.Name = usercredentials.UserName;
            objControlRecord.PacsId = usercredentials.PacsId;
            objControlRecord.Task = transactionid.ToString();
            objControlRecord.UserId = usercredentials.UserName;
            objControlRecord.Xml = "";
            objControlRecord.IsApproved = true;

            log.Debug(" Leaving into SaveControlRecord");
            return objControlRecord;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="objVchrTransDto"></param>
        /// <param name="userCredentials"></param>
        /// <param name="yearcode"></param>
        /// <returns></returns>
        private VoucherDetailsTemp FillVoucherDetailsTempDatafordefaultTransferForInvestments(TransactionDTO objVchrTransDto, UserCredentials userCredentials, FinancialYearMaster yearcode, long CashBookId)
        {
            log.DebugFormat(" Entering into FillVoucherDetailsTempDatafordefaultTransfer,TransactionDTO -{0},UserCredentials-{1},FinancialYearMaster-{2}",
                                                 objVchrTransDto, userCredentials, yearcode);
            try
            {
                CommonFasBL fascommonbl = new CommonFasBL(session);
                VoucherDetailsTemp VchrContraDetailsTemp = new VoucherDetailsTemp();

                AccountDetails objAccountDetails = session.Load<AccountDetails>(Convert.ToInt64(objVchrTransDto.ContraAccountNo)); //GetAccountDetails(VchrContraDetailsTemp.ProductId.Slno, objVchrTransDto.AccountNo, userCredentials.PacsId, userCredentials.BranchId);
                VchrContraDetailsTemp.AccountCode = objAccountDetails;

                //ProductWiseActivities activityType = session.Load<ProductWiseActivities>(objVchrTransDto.ActivityType);
                VchrContraDetailsTemp.ProductId = GetProductDetailsByslno(objAccountDetails.ProductID.Slno);
                VchrContraDetailsTemp.ProductTypeID = VchrContraDetailsTemp.ProductId.ProductTypeID;// session.Load<ProductTypeMaster>(objVoucherDetailsTemp.ProductId.ProductTypeID);


                Ledger objLedger = objAccountDetails.LedgerPKey; //GetLedgerDetails(VchrContraDetailsTemp.ProductId.Slno, 99, userCredentials.PacsId, userCredentials.BranchId);
                VchrContraDetailsTemp.LedgerCode = objLedger;

                if (yearcode != null)
                {
                    VchrContraDetailsTemp.YearCode = yearcode;
                }
                else
                {
                    VchrContraDetailsTemp.YearCode = GetFinancialYearCode(objVchrTransDto.TransactionDate);
                }

                VchrContraDetailsTemp.TransactionDate = Convert.ToDateTime(objVchrTransDto.TransactionDate).Date;
                if (objVchrTransDto.FinancialTransactionType == 1)
                {
                    VchrContraDetailsTemp.Debit = listTransaction.Sum(i => i.Amount);
                    VchrContraDetailsTemp.Credit = 0;
                }
                else
                {
                    VchrContraDetailsTemp.Debit = 0;
                    VchrContraDetailsTemp.Credit = listTransaction.Sum(i => i.Amount);
                }
                if (VchrContraDetailsTemp.AccountCode != null)
                {
                    if (VchrContraDetailsTemp.LedgerCode.AccountType.AccountTypeID == 1)
                    {
                        VchrContraDetailsTemp.OpeningAmount = fascommonbl.GetCashBalance(userCredentials.PacsId, userCredentials.BranchId, Convert.ToDateTime(VchrContraDetailsTemp.TransactionDate.AddDays(1)), VchrContraDetailsTemp.YearCode.YearCode, CashBookId, 0);
                    }
                    else
                    {
                        VchrContraDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(VchrContraDetailsTemp.LedgerCode.LedgerId, userCredentials.PacsId, userCredentials.BranchId, VchrContraDetailsTemp.YearCode.YearCode, Convert.ToDateTime(VchrContraDetailsTemp.TransactionDate.AddDays(1)), VchrContraDetailsTemp.LedgerCode.LedgerType.LedgerTypeId, VchrContraDetailsTemp.AccountCode.AccountID);
                    }
                    //VchrContraDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(VchrContraDetailsTemp.LedgerCode, userCredentials.PacsId, userCredentials.BranchId, VchrContraDetailsTemp.YearCode, Convert.ToDateTime(VchrContraDetailsTemp.TransactionDate.AddDays(1)), VchrContraDetailsTemp.AccountCode.AccountID);
                }
                else
                {
                    if (VchrContraDetailsTemp.LedgerCode.AccountType.AccountTypeID == 1)
                    {
                        VchrContraDetailsTemp.OpeningAmount = fascommonbl.GetCashBalance(userCredentials.PacsId, userCredentials.BranchId, Convert.ToDateTime(VchrContraDetailsTemp.TransactionDate.AddDays(1)), VchrContraDetailsTemp.YearCode.YearCode, CashBookId, 0);
                    }
                    else
                    {
                        VchrContraDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(VchrContraDetailsTemp.LedgerCode.LedgerId, userCredentials.PacsId, userCredentials.BranchId, VchrContraDetailsTemp.YearCode.YearCode, Convert.ToDateTime(VchrContraDetailsTemp.TransactionDate.AddDays(1)), VchrContraDetailsTemp.LedgerCode.LedgerType.LedgerTypeId);
                    }
                    //VchrContraDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(VchrContraDetailsTemp.LedgerCode, userCredentials.PacsId, userCredentials.BranchId, VchrContraDetailsTemp.YearCode, Convert.ToDateTime(VchrContraDetailsTemp.TransactionDate.AddDays(1)));
                    //listVoucherDetail = session.QueryOver<VoucherDetails>().Where(i => i.LedgerCode == vdm.LedgerCode  && i.PacsId == Vd.PacsId && i.BranchId == Vd.BranchId).List<VoucherDetails>();
                }
                if (VchrContraDetailsTemp.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.liabilities))
                {
                    VchrContraDetailsTemp.BalanceAmount = VchrContraDetailsTemp.OpeningAmount + VchrContraDetailsTemp.Credit - VchrContraDetailsTemp.Debit;
                }
                else if (VchrContraDetailsTemp.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.asset))
                {
                    VchrContraDetailsTemp.BalanceAmount = VchrContraDetailsTemp.OpeningAmount - VchrContraDetailsTemp.Credit + VchrContraDetailsTemp.Debit;
                }
                VchrContraDetailsTemp.Narration = objVchrTransDto.Narration;

                VchrContraDetailsTemp.TransrollID = GetTransrolIDByLedgercodeAndContraActivityID(objVchrTransDto.ActivityType, objVchrTransDto.ContraProduct, VchrContraDetailsTemp.LedgerCode.LedgerId, userCredentials.PacsId, userCredentials.BranchId);



                VchrContraDetailsTemp.ValueDate = Convert.ToDateTime(objVchrTransDto.ValueDate.ToShortDateString() + " " + DateTime.Now.TimeOfDay);
                VchrContraDetailsTemp.VoucherDetailID = 0;
                VchrContraDetailsTemp.CashBookId = CashBookId;
                VchrContraDetailsTemp.PacsId = userCredentials.PacsId;
                VchrContraDetailsTemp.BranchId = userCredentials.BranchId;
                VchrContraDetailsTemp.IDGeneratorForPacs = userCredentials.PacsId;
                VchrContraDetailsTemp.SerialNumberOfPacs = userCredentials.PACSSerialNumber;
                VchrContraDetailsTemp.TransactionID = GetTransactionId(objVchrTransDto.ActivityType, objVchrTransDto.ContraProduct, userCredentials.PacsId, userCredentials.BranchId); //Convert.ToInt64(activityType.TransactionId);// 10011;
                log.Debug("Leaving FillVoucherDetailsTempDatafordefaultTransfer");
                return VchrContraDetailsTemp;
            }
            catch (Exception ex)
            {
                ////TransactionErrorLogBL.TrackErrorLog(ex.Message, GlobalUserCredentials);
                log.Error(ex);
                return null;
            }

        }
        #endregion

        private VoucherDetailsTemp FillVoucherDetailTempForSubventionCollection(VoucherDetailsTemp objVoucherDetailsTemp, TransactionDTO objVchrTransDto, UserCredentials userCredentials, FinancialYearMaster yearcode, bool IsCredit, decimal amount, int transrolid, long CashBookId, AccountDetails accountdetails, long ledgerid, ProductWiseActivities activities, bool isParallelRun = false)
        {

            CommonFasBL fascommonbl = new CommonFasBL(session);
            objVoucherDetailsTemp = new VoucherDetailsTemp();
            if (amount > 0)
            {

                Ledger objLedger = new Ledger();


                objVoucherDetailsTemp.ProductId = GetProductDetailsByslno(objVchrTransDto.Product);
                if (ledgerid == 0)
                {
                    objLedger = fascommonbl.GetLedgerByProductWiseAcitivityPkeyandTransrollID(activities.PKey, transrolid, userCredentials.PacsId, userCredentials.BranchId);
                }
                else
                {
                    objLedger = session.Load<Ledger>(ledgerid);
                }
                objVoucherDetailsTemp.ProductTypeID = objVoucherDetailsTemp.ProductId.ProductTypeID;// session.Load<ProductTypeMaster>();
                objVoucherDetailsTemp.AccountCode = accountdetails;
                objVoucherDetailsTemp.YearCode = yearcode;
                objVoucherDetailsTemp.TransactionDate = userCredentials.Logindatetime;
                if (IsCredit)
                {
                    objVoucherDetailsTemp.Debit = 0;
                    objVoucherDetailsTemp.Credit = amount;
                }
                else
                {
                    objVoucherDetailsTemp.Debit = amount;
                    objVoucherDetailsTemp.Credit = 0;
                }
                objVoucherDetailsTemp.LedgerCode = objLedger;
                if (isParallelRun == false)
                {
                    if (objVoucherDetailsTemp.AccountCode != null)
                    {
                        if (objVoucherDetailsTemp.LedgerCode.AccountType.AccountTypeID == 1)
                        {
                            objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetCashBalance(userCredentials.PacsId, userCredentials.BranchId, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), objVoucherDetailsTemp.YearCode.YearCode, CashBookId, 0);
                        }
                        else
                        {
                            long accountid = objVoucherDetailsTemp.AccountCode.AccountID;
                            objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(objVoucherDetailsTemp.LedgerCode.LedgerId, userCredentials.PacsId, userCredentials.BranchId, objVoucherDetailsTemp.YearCode.YearCode, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId, accountid);
                        }
                    }
                    else
                    {
                        if (objVoucherDetailsTemp.LedgerCode.AccountType.AccountTypeID == 1)
                        {
                            objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetCashBalance(userCredentials.PacsId, userCredentials.BranchId, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), objVoucherDetailsTemp.YearCode.YearCode, CashBookId, 0);
                        }
                        else
                        {
                            objVoucherDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(objVoucherDetailsTemp.LedgerCode.LedgerId, userCredentials.PacsId, userCredentials.BranchId, objVoucherDetailsTemp.YearCode.YearCode, Convert.ToDateTime(objVoucherDetailsTemp.TransactionDate.AddDays(1)), objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId);
                        }
                    }
                    if (objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.liabilities) || objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.income))
                    {
                        objVoucherDetailsTemp.BalanceAmount = objVoucherDetailsTemp.OpeningAmount + objVoucherDetailsTemp.Credit - objVoucherDetailsTemp.Debit;
                    }
                    else if (objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.asset) || objVoucherDetailsTemp.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.Expenditure))
                    {
                        objVoucherDetailsTemp.BalanceAmount = objVoucherDetailsTemp.OpeningAmount - objVoucherDetailsTemp.Credit + objVoucherDetailsTemp.Debit;
                    }
                }
                objVoucherDetailsTemp.CashBookId = CashBookId;
                objVoucherDetailsTemp.Narration = objVchrTransDto.Narration; //"share deposit"; //GetNarrationTemplateDetails(104).DebitCashNarration;
                objVoucherDetailsTemp.TransrollID = transrolid;
                objVoucherDetailsTemp.TransactionDate = Convert.ToDateTime(objVchrTransDto.TransactionDate).Date;
                objVoucherDetailsTemp.ValueDate = Convert.ToDateTime(objVchrTransDto.ValueDate.ToShortDateString() + " " + DateTime.Now.TimeOfDay);
                objVoucherDetailsTemp.VoucherDetailID = 0;
                objVoucherDetailsTemp.PacsId = userCredentials.PacsId;
                objVoucherDetailsTemp.BranchId = userCredentials.BranchId;
                objVoucherDetailsTemp.IDGeneratorForPacs = userCredentials.PacsId;
                objVoucherDetailsTemp.SerialNumberOfPacs = userCredentials.PACSSerialNumber;
                // objVoucherDetailsTemp.TransactionID = 40011;
                TransactionBL objTransactionBL = new TransactionBL(session);
                objVoucherDetailsTemp.TransactionID = objTransactionBL.GetTransactionID(objVchrTransDto.ActivityType);
                return objVoucherDetailsTemp;
            }

            return null;

        }
        private VoucherDetailsTemp FillVoucherDetailTempCashForDefaultTransfer(TransactionDTO objVchrTransDto, UserCredentials userCredentials, FinancialYearMaster yearcode, ProductWiseActivities activityType, long CashBookId, bool IsCash, int transrollid, decimal amount, AccountDetails accountdetails, bool isParallelRun = false)
        {
            CommonFasBL fascommonbl = new CommonFasBL(session);
            VoucherDetailsTemp VchrContraDetailsTemp = new VoucherDetailsTemp();
            VchrContraDetailsTemp.AccountCode = accountdetails;
            VchrContraDetailsTemp.YearCode = yearcode;
            VchrContraDetailsTemp.ProductId = GetProductDetailsByslno(objVchrTransDto.Product);
            VchrContraDetailsTemp.ProductTypeID = VchrContraDetailsTemp.ProductId.ProductTypeID;// session.Load<ProductTypeMaster>(objVoucherDetailsTemp.ProductId.ProductTypeID);
            Ledger objLedger = new Ledger();
            if (IsCash)
            {
                objLedger = session.Load<Ledger>(Convert.ToInt64(EnumFixedLedgers.CashLedger));
            }
            else
            {
                objLedger = fascommonbl.GetLedgerByProductWiseAcitivityPkeyandTransrollID(activityType.PKey, transrollid, userCredentials.PacsId, userCredentials.BranchId);
            }
            VchrContraDetailsTemp.LedgerCode = objLedger;
            if (activityType.FinTransactionType.TransactionTypeId == 1)
            {
                VchrContraDetailsTemp.Debit = amount;
                VchrContraDetailsTemp.Credit = 0;
            }
            else
            {
                VchrContraDetailsTemp.Debit = 0;
                VchrContraDetailsTemp.Credit = amount;
            }
            IList<VoucherDetailsTemp> listVoucherDetailTemp = new List<VoucherDetailsTemp>();
            if (isParallelRun == false)
            {
                if (VchrContraDetailsTemp.LedgerCode.AccountType.AccountTypeID == 1)
                {
                    VchrContraDetailsTemp.OpeningAmount = fascommonbl.GetCashBalance(userCredentials.PacsId, userCredentials.BranchId, Convert.ToDateTime(objVchrTransDto.TransactionDate.AddDays(1)), VchrContraDetailsTemp.YearCode.YearCode, CashBookId, 0);
                }
                else if (VchrContraDetailsTemp.AccountCode != null)
                {
                    VchrContraDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(VchrContraDetailsTemp.LedgerCode.LedgerId, userCredentials.PacsId, userCredentials.BranchId, VchrContraDetailsTemp.YearCode.YearCode, Convert.ToDateTime(objVchrTransDto.TransactionDate.AddDays(1)), VchrContraDetailsTemp.LedgerCode.LedgerType.LedgerTypeId, VchrContraDetailsTemp.AccountCode.AccountID);
                }
                else
                {
                    VchrContraDetailsTemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(VchrContraDetailsTemp.LedgerCode.LedgerId, userCredentials.PacsId, userCredentials.BranchId, VchrContraDetailsTemp.YearCode.YearCode, Convert.ToDateTime(objVchrTransDto.TransactionDate.AddDays(1)), VchrContraDetailsTemp.LedgerCode.LedgerType.LedgerTypeId);
                }
                if (VchrContraDetailsTemp.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.liabilities))
                {
                    VchrContraDetailsTemp.BalanceAmount = VchrContraDetailsTemp.OpeningAmount + VchrContraDetailsTemp.Credit - VchrContraDetailsTemp.Debit;
                }
                else if (VchrContraDetailsTemp.LedgerCode.LedgerType.LedgerTypeId == Convert.ToInt32(EnumLedgerTypes.asset))
                {
                    VchrContraDetailsTemp.BalanceAmount = VchrContraDetailsTemp.OpeningAmount - VchrContraDetailsTemp.Credit + VchrContraDetailsTemp.Debit;
                }
            }
            if (IsCash)
            {
                VchrContraDetailsTemp.Narration = "Cash"; //objVchrTransDto.Narration;
                VchrContraDetailsTemp.TransrollID = 99;
            }
            else
            {
                VchrContraDetailsTemp.Narration = objVchrTransDto.Narration;
                VchrContraDetailsTemp.TransrollID = transrollid;
            }

            VchrContraDetailsTemp.TransactionDate = Convert.ToDateTime(objVchrTransDto.TransactionDate).Date;

            VchrContraDetailsTemp.ValueDate = Convert.ToDateTime(objVchrTransDto.ValueDate.ToShortDateString() + " " + DateTime.Now.TimeOfDay);
            VchrContraDetailsTemp.VoucherDetailID = 0;
            VchrContraDetailsTemp.CashBookId = CashBookId;
            VchrContraDetailsTemp.PacsId = userCredentials.PacsId;
            VchrContraDetailsTemp.BranchId = userCredentials.BranchId;
            VchrContraDetailsTemp.IDGeneratorForPacs = userCredentials.PacsId;
            VchrContraDetailsTemp.SerialNumberOfPacs = userCredentials.PACSSerialNumber;

            TransactionBL objTransactionBL = new TransactionBL(session);
            VchrContraDetailsTemp.TransactionID = objTransactionBL.GetTransactionID(objVchrTransDto.ActivityType);// 10011;// Convert.ToInt64(voucherprocessing.VoucherProcessing.VoucherProcessingId);// 10011;
            if (VchrContraDetailsTemp.TransactionID == 0)
            {
                if (activityType.FinTransactionType.TransactionTypeId == 1)
                {
                    VchrContraDetailsTemp.TransactionID = 40011;
                }
                else
                {
                    VchrContraDetailsTemp.TransactionID = 40012;
                }
            }
            return VchrContraDetailsTemp;
        }

        public VoucherMainTemp FillNewVoucherForDoubleEntry(TransactionDTO objTransactionDTO, UserCredentials userCredentials, long admissionnopkey, ProductWiseActivities activityType, FinancialYearMaster finyear, decimal shareamount, long voucherno, bool isParellelRun = false)
        {
            log.Debug(" Entering into FillNewVoucher");

            CommonFasBL fascommonbl = new CommonFasBL(session);
            VoucherMainTemp objVoucherMain = new VoucherMainTemp();
            IList<VoucherDetailsTemp> voucherdetailslist = new List<VoucherDetailsTemp>();
            // ProductWiseActivities activityType = session.Load<ProductWiseActivities>(objTransactionDTO.ActivityType);


            objVoucherMain = new VoucherMainTemp();
            objVoucherMain = FillVouchermaintemp(userCredentials, objTransactionDTO, activityType, finyear);
            objVoucherMain.VoucherNo = voucherno; //GetMaxVoucherNumber(Convert.ToDateTime(objVoucherMain.TransactionDate), userCredentials.UserName, userCredentials.PacsId, userCredentials.BranchId, userCredentials.PACSSerialNumber, objVoucherMain.TransactionType.TransactionTypeID, objVoucherMain.YearCode.YearCode);

            long CashBookId = userCredentials.CashBookId;
            if (userCredentials.CashBookId != 0)
            {
                CashBookId = fascommonbl.Getcashcounterid(userCredentials.UserName, userCredentials.PacsId, userCredentials.BranchId);
            }

            objVoucherMain.CashBookId = CashBookId;

            voucherdetailslist = FillVoucherDetailsTempData(voucherdetailslist, false, objTransactionDTO, userCredentials, CashBookId, activityType, admissionnopkey, finyear, isParellelRun);
            voucherdetailslist.FirstOrDefault().Debit = shareamount;
            voucherdetailslist.FirstOrDefault().Narration = "Transfer from Disbursement to share ";

            voucherdetailslist.FirstOrDefault().NarrationForPassBookPrint = "Dis-ShareVoucher";


            VoucherDetailsTemp detailstemp = new VoucherDetailsTemp();
            detailstemp.BranchId = userCredentials.BranchId;
            detailstemp.CashBookId = userCredentials.CashBookId;
            detailstemp.FinanceYear = finyear.YearCode;
            detailstemp.IDGeneratorForPacs = userCredentials.PacsId;
            detailstemp.IsBackDateTransaction = false;
            objVoucherMain.Narration = "Transfer from Disbursement to share ";
            detailstemp.Narration = "Transfer from Disbursement to share ";
            detailstemp.NarrationForPassBookPrint = "Dis-ShareVoucher";
            detailstemp.PacsId = userCredentials.PacsId;
            detailstemp.ProductId = session.Load<ProductMaster>(1);
            detailstemp.ProductTypeID = detailstemp.ProductId.ProductTypeID;
            detailstemp.SerialNumberOfPacs = userCredentials.PACSSerialNumber;
            detailstemp.TransactionDate = objVoucherMain.TransactionDate.Value;
            detailstemp.TransactionID = 10011;
            detailstemp.TransrollID = 5;
            detailstemp.ValueDate = objVoucherMain.ValueDate.Value;
            detailstemp.VStatus = 0;
            detailstemp.YearCode = finyear;
            detailstemp.Credit = shareamount;

            CommonFasBL objCommonFasBL = new CommonFasBL(session);
            var memberstripdto = GetPersonalNameByCustmerID(admissionnopkey, userCredentials.PacsId, userCredentials.BranchId);
            var objAccountDetails = objCommonFasBL.GetAccountDetailsByProductSlNoAndAccNo(detailstemp.ProductId.Slno, memberstripdto.AdmissionNo, admissionnopkey, userCredentials.PacsId, userCredentials.BranchId);
            detailstemp.AccountCode = objAccountDetails;
            detailstemp.LedgerCode = detailstemp.AccountCode.LedgerPKey;

            detailstemp.OpeningAmount = fascommonbl.GetLedgerBalanceByLedgercodeAndAccountID(detailstemp.LedgerCode.LedgerId, userCredentials.PacsId, userCredentials.BranchId, detailstemp.YearCode.YearCode, Convert.ToDateTime(detailstemp.TransactionDate.AddDays(1)), detailstemp.LedgerCode.LedgerType.LedgerTypeId, objAccountDetails.AccountID);

            detailstemp.Debit = 0;
            detailstemp.BalanceAmount = detailstemp.OpeningAmount + detailstemp.Credit - detailstemp.Debit;

            voucherdetailslist.Add(detailstemp);
            objVoucherMain.VoucherDetailsTemp = voucherdetailslist;
            objVoucherMain.Amount = shareamount;
            log.Debug(" Leaving into FillNewVoucher");
            return objVoucherMain;

        }

        public MoreDisbursementDetails CopyDisbursementDetails(MoreDisbursementDetails more)
        {
            MoreDisbursementDetails dis = new MoreDisbursementDetails();
            dis.AdmissionNoPkey = more.AdmissionNoPkey;
            dis.ApplicationNo = more.ApplicationNo;
            dis.BranchID = more.BranchID;
            dis.DateOfAdvice = more.DateOfAdvice;
            dis.DCCBLoanNo = more.DCCBLoanNo;
            dis.DCCBSBNo = more.DCCBSBNo;
            dis.DebitSlipNo = more.DebitSlipNo;
            dis.DisbursalId = more.DisbursalId + 1;
            dis.DisbursmentAmount = more.ShareAmount;
            dis.DPNDate = more.DPNDate;
            dis.DPNNo = more.DPNNo;
            dis.DueDate = more.DueDate;
            dis.ErrorMessage = more.ErrorMessage;
            dis.FirstInstallmentDate = more.FirstInstallmentDate;
            dis.IDGeneratorForPacs = more.IDGeneratorForPacs;
            dis.IOAROI = more.IOAROI;
            dis.IsDuedateEditable = more.IsDuedateEditable;
            dis.IsPolicyExists = more.IsPolicyExists;
            dis.IsVocuherWithShareAmount = more.IsVocuherWithShareAmount;
            dis.LastTransactionDate = more.LastTransactionDate;
            dis.LedgerFolioNo = more.LedgerFolioNo;
            dis.LoanNo = more.LoanNo;
            dis.LoanPeriod = more.LoanPeriod;
            dis.MinimumShareBalance = more.MinimumShareBalance;
            dis.Narration = more.Narration;
            dis.OldLoanNo = more.OldLoanNo;
            dis.PacsId = more.PacsId;
            dis.PenalROI = more.PenalROI;
            dis.PolicyName = more.PolicyName;
            dis.ProductName = more.ProductName;
            dis.ProductSlNo = more.ProductSlNo;
            dis.RepaymentTypeId = more.RepaymentTypeId;
            dis.ROI = more.ROI;
            dis.SerialNumberOfPacs = more.SerialNumberOfPacs;
            dis.ShareAmount = more.ShareAmount;
            dis.ShareBalance = more.ShareBalance;
            dis.SharePercentage = more.SharePercentage;
            dis.ShareValue = more.ShareValue;

            return dis;
        }

        #region parallel run

        public object[] SaveTransactionDetailsParellelRun(TransactionDTO objTransactionDTDTO, UserCredentials usercredentials, IList<OutStandingResults> _outstandingResults)
        {
            bool isParallelRun = true;

            #region log enter
            if (log.IsErrorEnabled == true)
            {
                if (usercredentials.IsDebugEnabled == true)
                {
                    log.Error("Enter SaveTransactionDetails ");
                }
            }
            else
            {
                if (usercredentials.IsDebugEnabled == true)
                {
                    log.Debug("Enter SaveTransactionDetails");
                }
            }
            #endregion logend
            //log.Debug("SaveTransactionDetails, Entered");
            try
            {
                if (usercredentials.isCashCounterIdMandatary == true)
                {
                    if (usercredentials.CashBookId == 0)
                    {

                        bool Approvelimit = false;
                        long voucherid = 0;
                        string status = "Assign cash counter " + usercredentials.UserName;
                        object[] objVoucherTemp = { voucherid, 0, 0, Approvelimit, status, 0 };
                        return objVoucherTemp;
                    }
                }
                VoucherMainTemp voucherID = new VoucherMainTemp();
                #region log enter
                if (log.IsErrorEnabled == true)
                {
                    if (usercredentials.IsDebugEnabled == true)
                    {
                        log.Error("Enter GetFinancialYearCode ");
                    }
                }
                else
                {
                    if (usercredentials.IsDebugEnabled == true)
                    {
                        log.Debug("Enter GetFinancialYearCode");
                    }
                }
                #endregion logend
                FinancialYearMaster finyear = GetFinancialYearCode(objTransactionDTDTO.TransactionDate);
                #region log enter
                if (log.IsErrorEnabled == true)
                {
                    if (usercredentials.IsDebugEnabled == true)
                    {
                        log.Error("Leave GetFinancialYearCode ");
                    }
                }
                else
                {
                    if (usercredentials.IsDebugEnabled == true)
                    {
                        log.Debug("Leave GetFinancialYearCode");
                    }
                }
                #endregion logend

                ProductWiseActivities objTransaction = session.Load<ProductWiseActivities>(objTransactionDTDTO.ActivityType);

                #region log enter
                if (log.IsErrorEnabled == true)
                {
                    if (usercredentials.IsDebugEnabled == true)
                    {
                        log.Error("Leave session.Load<ProductWiseActivities>  parameter " + objTransactionDTDTO.ActivityType + " result: ProductWiseActivities-" + objTransaction);
                    }
                }
                else
                {
                    if (usercredentials.IsDebugEnabled == true)
                    {
                        log.Debug("Leave session.Load<ProductWiseActivities>  parameter " + objTransactionDTDTO.ActivityType + " result: ProductWiseActivities-" + objTransaction);
                    }
                }
                #endregion logend

                Intellect.Unite.WebPackages.Loans.BL.LoansCommonMasterBl commonbl = new Loans.BL.LoansCommonMasterBl(session);
                Intellect.Unite.WebPackages.Loans.BL.CollectionsBl collbll = new Loans.BL.CollectionsBl(session);
                int repaymenttypeid = 0;
                ProductDetailsDTO productdetails = new ProductDetailsDTO();

                //FinancialYearMaster yearcode = GetFinancialYearCode(objTransactionDTDTO.TransactionDate);
                AccountDetails accountdetails = new AccountDetails();
                if (objTransactionDTDTO.AccountPkey != null && objTransactionDTDTO.AccountPkey > 0)
                {
                    accountdetails = session.Load<AccountDetails>(objTransactionDTDTO.AccountPkey);
                    if (accountdetails != null && accountdetails.AccountID > 0)
                    {
                        objTransactionDTDTO.AccountNo = accountdetails.AccountCode;
                        objTransactionDTDTO.AccountCode = accountdetails.AccountCode;

                    }
                }
                //log.Debug("SaveTransactionDetails, AccountDetails");
                #region log enter
                if (log.IsErrorEnabled == true)
                {
                    if (usercredentials.IsDebugEnabled == true)
                    {
                        log.Error("Leave session.Load<AccountDetails>  parameter " + objTransactionDTDTO.AccountPkey + " result: AccountDetails-" + accountdetails);
                    }
                }
                else
                {
                    if (usercredentials.IsDebugEnabled == true)
                    {
                        log.Debug("Leave session.Load<ProductWiseActivities>  parameter " + objTransactionDTDTO.ActivityType + " result: ProductWiseActivities-" + objTransaction);
                    }
                }
                #endregion logend
                string message = string.Empty;
                long voucherId = 0;

                bool isSecondVoucherExists = false;
                long secondvoucherId = 0;
                VoucherMainTemp objvchrtemp = new VoucherMainTemp();
                VoucherMainTemp objSecondvchrtemp = new VoucherMainTemp();
                bool isAllowExcessAmount = false;
                decimal ExcessAmount = 0;
                if (objTransactionDTDTO.ProductTypeId == 3)
                {
                    //log.Debug("SaveTransactionDetails, objTransactionDTDTO.ProductTypeId == 3");
                    #region log enter
                    if (log.IsErrorEnabled == true)
                    {
                        if (usercredentials.IsDebugEnabled == true)
                        {
                            log.Error("SaveTransactionDetails, objTransactionDTDTO.ProductTypeId == 3");
                        }
                    }
                    else
                    {
                        if (usercredentials.IsDebugEnabled == true)
                        {
                            log.Debug("SaveTransactionDetails, objTransactionDTDTO.ProductTypeId == 3");
                        }
                    }
                    #endregion logend
                    #region Loans start fill vouchermain,moduletables
                    #region log enter
                    if (log.IsErrorEnabled == true)
                    {
                        if (usercredentials.IsDebugEnabled == true)
                        {
                            log.Error("Enter commonbl.GetAdjustmentDetailsFlat ");
                        }
                    }
                    else
                    {
                        if (usercredentials.IsDebugEnabled == true)
                        {
                            log.Debug("Enter commonbl.GetAdjustmentDetailsFlat");
                        }
                    }
                    #endregion logend
                    var adjustmentdetails = commonbl.GetAdjustmentDetailsFlat(objTransactionDTDTO.Product, usercredentials.PacsId, usercredentials.BranchId);
                    #region log enter
                    if (log.IsErrorEnabled == true)
                    {
                        if (usercredentials.IsDebugEnabled == true)
                        {
                            log.Error("Leave commonbl.GetAdjustmentDetailsFlat ");
                        }
                    }
                    else
                    {
                        if (usercredentials.IsDebugEnabled == true)
                        {
                            log.Debug("Leave commonbl.GetAdjustmentDetailsFlat");
                        }
                    }
                    #endregion logend

                    #region log enter
                    if (log.IsErrorEnabled == true)
                    {
                        if (usercredentials.IsDebugEnabled == true)
                        {
                            log.Error("Enter commonbl.GetProductDetailsDTOFlat ");
                        }
                    }
                    else
                    {
                        if (usercredentials.IsDebugEnabled == true)
                        {
                            log.Debug("Enter commonbl.GetProductDetailsDTOFlat");
                        }
                    }
                    #endregion logend
                    productdetails = commonbl.GetProductDetailsDTOFlat(usercredentials.PacsId, usercredentials.BranchId, usercredentials.Logindatetime, usercredentials.UserLevel, usercredentials.StateId, usercredentials.DistrictId, objTransactionDTDTO.Product);
                    #region log enter
                    if (log.IsErrorEnabled == true)
                    {
                        if (usercredentials.IsDebugEnabled == true)
                        {
                            log.Error("Leave commonbl.GetProductDetailsDTOFlat ");
                        }
                    }
                    else
                    {
                        if (usercredentials.IsDebugEnabled == true)
                        {
                            log.Debug("Leave commonbl.GetProductDetailsDTOFlat");
                        }
                    }
                    #endregion logend
                    //   productdetails = commonbl.GetProductDetailsByProductCode(objTransactionDTDTO.Product, usercredentials.PacsId, usercredentials.BranchId, usercredentials.Logindatetime, usercredentials.UserLevel, usercredentials.StateId, usercredentials.DistrictId);
                    if (productdetails.IsAllowExcessAmount != null && productdetails.IsAllowExcessAmount == "Yes")
                    {
                        isAllowExcessAmount = true;
                    }
                    repaymenttypeid = Convert.ToInt32(productdetails.RepaymentTypeId);
                    //   var productdetails = commonbl.GetProductDetailsByProductCode(objTransactionDTDTO.Product, usercredentials.PacsId, usercredentials.BranchId, usercredentials.Logindatetime, usercredentials.UserLevel, usercredentials.StateId, usercredentials.DistrictId);
                    if (Convert.ToInt32(productdetails.RepaymentTypeId) == 3 || Convert.ToInt32(productdetails.RepaymentTypeId) == 4)
                    {
                        if (objTransaction.FinTransactionType.TransactionTypeId != 2 && objTransaction.Activities.ActivityId != 8 && objTransaction.Activities.ActivityId != 4 && !objTransactionDTDTO.IsDefaultTransfer)
                        {

                            if (adjustmentdetails != null && adjustmentdetails.Count > 0)
                            {
                                #region log enter
                                if (log.IsErrorEnabled == true)
                                {
                                    if (usercredentials.IsDebugEnabled == true)
                                    {
                                        log.Error("Enter BuildAdjustmentOrder ");
                                    }
                                }
                                else
                                {
                                    if (usercredentials.IsDebugEnabled == true)
                                    {
                                        log.Debug("Enter BuildAdjustmentOrder");
                                    }
                                }
                                #endregion logend
                                bool isincludeothercharges = false;
                                var includeothercharges = collbll.GetLoanParametersByParamId(43, usercredentials.PacsId, usercredentials.BranchId);
                                if (includeothercharges != null && includeothercharges.ParameterValue != null && (includeothercharges.ParameterValue == "Y" || includeothercharges.ParameterValue == "y"))
                                {
                                    isincludeothercharges = true;
                                }
                                if (!isincludeothercharges)
                                {
                                    objTransactionDTDTO.XML = BuildAdjustmentOrder(objTransactionDTDTO, adjustmentdetails);
                                }
                                #region log enter
                                if (log.IsErrorEnabled == true)
                                {
                                    if (usercredentials.IsDebugEnabled == true)
                                    {
                                        log.Error("Leave BuildAdjustmentOrder ");
                                    }
                                }
                                else
                                {
                                    if (usercredentials.IsDebugEnabled == true)
                                    {
                                        log.Debug("Leave BuildAdjustmentOrder");
                                    }
                                }
                                #endregion logend
                            }
                        }
                        //if ((repaymenttypeid == 3 || repaymenttypeid == 4))

                        if (objTransactionDTDTO.IsDefaultTransfer)
                        {
                            //first voucher should be principal and seconde voucher will be default transfer.
                            #region log enter
                            if (log.IsErrorEnabled == true)
                            {
                                if (usercredentials.IsDebugEnabled == true)
                                {
                                    log.Error("Enter FillVoucherTempForDefaultTransferCollection ");
                                }
                            }
                            else
                            {
                                if (usercredentials.IsDebugEnabled == true)
                                {
                                    log.Debug("Enter FillVoucherTempForDefaultTransferCollection");
                                }
                            }
                            #endregion logend
                            var templist = FillVoucherTempForDefaultTransferCollection(objTransactionDTDTO, usercredentials, _outstandingResults, objTransaction, accountdetails, finyear);
                            #region log enter
                            if (log.IsErrorEnabled == true)
                            {
                                if (usercredentials.IsDebugEnabled == true)
                                {
                                    log.Error("Leave FillVoucherTempForDefaultTransferCollection ");
                                }
                            }
                            else
                            {
                                if (usercredentials.IsDebugEnabled == true)
                                {
                                    log.Debug("Leave FillVoucherTempForDefaultTransferCollection");
                                }
                            }
                            #endregion logend
                            objvchrtemp = templist.Where(k => k.VoucherType.VoucherTypeID == 1).FirstOrDefault();
                            objSecondvchrtemp = templist.Where(k => k.VoucherType.VoucherTypeID == 2).FirstOrDefault();
                            if (objSecondvchrtemp.VoucherNo == 0)
                            {

                                #region log enter
                                if (log.IsErrorEnabled == true)
                                {
                                    if (usercredentials.IsDebugEnabled == true)
                                    {
                                        log.Error("Entering secondvoucher.VoucherNo in SaveTransactionDetails");
                                    }
                                }
                                else
                                {
                                    if (usercredentials.IsDebugEnabled == true)
                                    {
                                        log.Debug("Entering secondvoucher.VoucherNo in SaveTransactionDetails");
                                    }
                                }
                                #endregion logend
                                objSecondvchrtemp.VoucherNo = GetMaxVoucherNumber(Convert.ToDateTime(objSecondvchrtemp.TransactionDate), usercredentials.UserName, usercredentials.PacsId, usercredentials.BranchId, usercredentials.PACSSerialNumber, objvchrtemp.TransactionType.TransactionTypeID, finyear.YearCode);

                                #region log enter
                                if (log.IsErrorEnabled == true)
                                {
                                    if (usercredentials.IsDebugEnabled == true)
                                    {
                                        log.Error("leaved secondvoucher.VoucherNo SaveTransactionDetails");
                                    }
                                }
                                else
                                {
                                    if (usercredentials.IsDebugEnabled == true)
                                    {
                                        log.Debug("leaved secondvoucher.VoucherNo SaveTransactionDetails");
                                    }
                                }
                                #endregion logend
                                if (objSecondvchrtemp.VoucherNo == 0)
                                {
                                    message = "Could Not Generate Voucher No";
                                    voucherId = 0;
                                }
                            }
                            //session.Save(secondvoucher);
                            //isSecondVoucherExists = true;
                            //secondvoucherId = secondvoucher.VoucherID;
                        }
                        else
                        {
                            #region log enter
                            if (log.IsErrorEnabled == true)
                            {
                                if (usercredentials.IsDebugEnabled == true)
                                {
                                    log.Error("Enter FillNewVoucher in SaveTransactionDetails");
                                }
                            }
                            else
                            {
                                if (usercredentials.IsDebugEnabled == true)
                                {
                                    log.Debug("Enter FillNewVoucher in SaveTransactionDetails");
                                }
                            }
                            #endregion logend
                            objvchrtemp = FillNewVoucher(objTransactionDTDTO, usercredentials, Convert.ToInt64(objTransactionDTDTO.AddmissionPkey), objTransaction, finyear);
                            #region log enter
                            if (log.IsErrorEnabled == true)
                            {
                                if (usercredentials.IsDebugEnabled == true)
                                {
                                    log.Error("Leave FillNewVoucher in SaveTransactionDetails");
                                }
                            }
                            else
                            {
                                if (usercredentials.IsDebugEnabled == true)
                                {
                                    log.Debug("Leave FillNewVoucher in SaveTransactionDetails");
                                }
                            }
                            #endregion logend
                        }
                    }
                    else
                    {
                        #region log enter
                        if (log.IsErrorEnabled == true)
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Error("Enter FillNewVoucher in SaveTransactionDetails");
                            }
                        }
                        else
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Enter FillNewVoucher in SaveTransactionDetails");
                            }
                        }
                        #endregion logend
                        objvchrtemp = FillNewVoucher(objTransactionDTDTO, usercredentials, Convert.ToInt64(objTransactionDTDTO.AddmissionPkey), objTransaction, finyear);
                        #region log enter
                        if (log.IsErrorEnabled == true)
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Error("Leave FillNewVoucher in SaveTransactionDetails");
                            }
                        }
                        else
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Leave FillNewVoucher in SaveTransactionDetails");
                            }
                        }
                        #endregion logend
                    }
                    #endregion Loans VoucherMian fill end
                }
                else
                {
                    #region OtherThan Loans vouchermain
                    #region log enter
                    if (log.IsErrorEnabled == true)
                    {
                        if (usercredentials.IsDebugEnabled == true)
                        {
                            log.Error("Enter FillNewVoucher in SaveTransactionDetails");
                        }
                    }
                    else
                    {
                        if (usercredentials.IsDebugEnabled == true)
                        {
                            log.Debug("Enter FillNewVoucher in SaveTransactionDetails");
                        }
                    }
                    #endregion logend
                    objvchrtemp = FillNewVoucher(objTransactionDTDTO, usercredentials, Convert.ToInt64(objTransactionDTDTO.AddmissionPkey), objTransaction, finyear, isParallelRun);
                    #region log enter
                    if (log.IsErrorEnabled == true)
                    {
                        if (usercredentials.IsDebugEnabled == true)
                        {
                            log.Error("Leave FillNewVoucher in SaveTransactionDetails");
                        }
                    }
                    else
                    {
                        if (usercredentials.IsDebugEnabled == true)
                        {
                            log.Debug("Leave FillNewVoucher in SaveTransactionDetails");
                        }
                    }
                    #endregion logend
                    #endregion otherThan Loans vouchermain
                }

                objvchrtemp.VoucherDetailsTemp.Select(k => { k.LedgerFolioNo = objTransactionDTDTO.LedgerFolioNo; return k; }).ToList();
                var voucherdetailstemp = objvchrtemp.VoucherDetailsTemp;
                var cashvoucher = voucherdetailstemp.Where(i => i.TransrollID == 99).FirstOrDefault();

                bool IsForSubvention = false;
                if (objTransaction.Activities.ActivityId == 8)
                {
                    IsForSubvention = true;

                }
                bool allowTransaction = false;
                if (objvchrtemp.VoucherType.VoucherTypeID == 1)//cash
                {

                    //if ((objvchrtemp.TransactionType.TransactionTypeID == 2) && isParallelRun == false)
                    //{
                    //    if (cashvoucher != null && cashvoucher.BalanceAmount >= 0)
                    //    {
                    //        allowTransaction = true;
                    //    }
                    //    else
                    //    {
                    //        allowTransaction = false;
                    //    }
                    //}
                    //else
                    //{
                    allowTransaction = true;
                    //}
                }
                else if (objvchrtemp.VoucherType.VoucherTypeID == 2 || objvchrtemp.VoucherType.VoucherTypeID == 3)//transfer
                {
                    allowTransaction = true;
                }

                if (allowTransaction)
                {
                    if (objvchrtemp.VoucherNo == 0)
                    {

                        #region log enter
                        if (log.IsErrorEnabled == true)
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Error("Entering objvchrtemp.VoucherNo in SaveTransactionDetails");
                            }
                        }
                        else
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Entering objvchrtemp.VoucherNo in SaveTransactionDetails");
                            }
                        }
                        #endregion logend
                        objvchrtemp.VoucherNo = GetMaxVoucherNumber(Convert.ToDateTime(objvchrtemp.TransactionDate), usercredentials.UserName, usercredentials.PacsId, usercredentials.BranchId, usercredentials.PACSSerialNumber, objvchrtemp.TransactionType.TransactionTypeID, finyear.YearCode);
                        #region log enter
                        if (log.IsErrorEnabled == true)
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Error("leaved objvchrtemp.VoucherNo in SaveTransactionDetails");
                            }
                        }
                        else
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Debug("leaved objvchrtemp.VoucherNo in SaveTransactionDetails");
                            }
                        }
                        #endregion logend


                        if (objvchrtemp.VoucherNo == 0)
                        {
                            message = "Could Not Generate Voucher No";
                            voucherId = 0;

                        }
                    }
                    long sharevoucherno = 0;
                    bool isvoucherwithshareamount = false;
                    decimal shareamount = 0;
                    MoreDisbursementDetails more = new MoreDisbursementDetails();

                    if (objTransaction.ProductType.ProductTypeID == 3 && objTransaction.FinTransactionType.TransactionTypeId == 2)
                    {
                        #region log enter
                        if (log.IsErrorEnabled == true)
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Error("Entering objTransactionDTDTO.MoreDisbursementDetailsXML in SaveTransactionDetails");
                            }
                        }
                        else
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Entering objTransactionDTDTO.MoreDisbursementDetailsXML in SaveTransactionDetails");
                            }
                        }
                        #endregion logend
                        string moredisbursements = objTransactionDTDTO.MoreDisbursementDetailsXML;
                        #region log enter
                        if (log.IsErrorEnabled == true)
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Error("Leave objTransactionDTDTO.MoreDisbursementDetailsXML in SaveTransactionDetails");
                            }
                        }
                        else
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Leave objTransactionDTDTO.MoreDisbursementDetailsXML in SaveTransactionDetails");
                            }
                        }
                        #endregion logend
                        #region log enter
                        if (log.IsErrorEnabled == true)
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Error("Entering GetMoreDisbursementDetails in SaveTransactionDetails");
                            }
                        }
                        else
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Entering GetMoreDisbursementDetails in SaveTransactionDetails");
                            }
                        }
                        #endregion logend
                        more = GetMoreDisbursementDetails(moredisbursements, voucherId);
                        #region log enter
                        if (log.IsErrorEnabled == true)
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Error("Leave GetMoreDisbursementDetails in SaveTransactionDetails");
                            }
                        }
                        else
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Leave GetMoreDisbursementDetails in SaveTransactionDetails");
                            }
                        }
                        #endregion logend
                        if (more.IsVocuherWithShareAmount)
                        {
                            #region log enter
                            if (log.IsErrorEnabled == true)
                            {
                                if (usercredentials.IsDebugEnabled == true)
                                {
                                    log.Error("Entering GetMaxVoucherNumber in SaveTransactionDetails");
                                }
                            }
                            else
                            {
                                if (usercredentials.IsDebugEnabled == true)
                                {
                                    log.Debug("Entering GetMaxVoucherNumber in SaveTransactionDetails");
                                }
                            }
                            #endregion logend
                            sharevoucherno = GetMaxVoucherNumber(Convert.ToDateTime(objvchrtemp.TransactionDate), usercredentials.UserName, usercredentials.PacsId, usercredentials.BranchId, usercredentials.PACSSerialNumber, objvchrtemp.TransactionType.TransactionTypeID, finyear.YearCode);
                            #region log enter
                            if (log.IsErrorEnabled == true)
                            {
                                if (usercredentials.IsDebugEnabled == true)
                                {
                                    log.Error("Leave GetMaxVoucherNumber in SaveTransactionDetails");
                                }
                            }
                            else
                            {
                                if (usercredentials.IsDebugEnabled == true)
                                {
                                    log.Debug("Leave GetMaxVoucherNumber in SaveTransactionDetails");
                                }
                            }
                            #endregion logend
                            isvoucherwithshareamount = true;
                            shareamount = more.ShareAmount;
                            if (objvchrtemp != null)
                            {
                                if (objvchrtemp.VoucherDetailsTemp != null && objvchrtemp.VoucherDetailsTemp.Where(k => k.TransactionID == 40012).ToList().Count > 0)
                                {
                                    var objCommonFasBL = new CommonFasBL();
                                    if (objvchrtemp.VoucherDetailsTemp.Where(k => k.TransactionID == 40012 && k.AccountCode == accountdetails && k.Debit > 0).ToList().Count > 0)
                                    {
                                        objvchrtemp.VoucherDetailsTemp.Where(k => k.TransactionID == 40012 && k.AccountCode == accountdetails && k.Debit > 0).ToList().FirstOrDefault().Debit -= 2 * (shareamount);
                                    }

                                    if (objvchrtemp.VoucherDetailsTemp.Where(k => k.TransactionID == 40012 && k.Credit > 0).ToList().Count > 0)
                                    {
                                        objvchrtemp.VoucherDetailsTemp.Where(k => k.TransactionID == 40012 && k.Credit > 0).ToList().FirstOrDefault().Credit -= 2 * (shareamount);
                                    }
                                }
                            }
                        }


                    }

                    using (var trans = session.BeginTransaction())
                    {
                        //session.BeginTransaction();
                        log.Debug("SaveTransactionDetails, BeginTransaction");
                        #region DenominationFilling start
                        if (objTransactionDTDTO.objDenominationDTO != null)
                        {
                            IList<Denominations> objDenominations = new List<Denominations>();
                            #region log enter
                            if (log.IsErrorEnabled == true)
                            {
                                if (usercredentials.IsDebugEnabled == true)
                                {
                                    log.Error("Entering FillDenaminationDetails in SaveTransactionDetails");
                                }
                            }
                            else
                            {
                                if (usercredentials.IsDebugEnabled == true)
                                {
                                    log.Debug("Entering FillDenaminationDetails in SaveTransactionDetails");
                                }
                            }
                            #endregion logend
                            objDenominations = FillDenaminationDetails(objTransactionDTDTO.objDenominationDTO, usercredentials.PacsId, usercredentials.BranchId, objTransaction.FinTransactionType.TransactionTypeId, objTransactionDTDTO.TransactionDate, objvchrtemp.CashBookId);
                            #region log enter
                            if (log.IsErrorEnabled == true)
                            {
                                if (usercredentials.IsDebugEnabled == true)
                                {
                                    log.Error("Leave FillDenaminationDetails in SaveTransactionDetails");
                                }
                            }
                            else
                            {
                                if (usercredentials.IsDebugEnabled == true)
                                {
                                    log.Debug("Leave FillDenaminationDetails in SaveTransactionDetails");
                                }
                            }
                            #endregion logend
                            if (objDenominations[0].TotalAmount != 0 || objDenominations[1].TotalAmount != 0)
                            {
                                if (objDenominations.Count > 0)
                                {
                                    foreach (var denomination in objDenominations)
                                    {
                                        if (denomination.TotalAmount != 0)
                                        {
                                            denomination.VoucherNumber = objvchrtemp.VoucherNo;
                                            denomination.IDGeneratorForPacs = usercredentials.PacsId;
                                            denomination.SerialNumberOfPacs = usercredentials.PACSSerialNumber;
                                            session.Save(denomination);
                                        }
                                    }
                                }
                            }
                        }
                        #endregion DenominationFilling end
                        var temp = objvchrtemp.VoucherDetailsTemp;
                        #region ControlRecord start
                        #region log enter
                        if (log.IsErrorEnabled == true)
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Error("Entering SaveControlRecord in SaveTransactionDetails");
                            }
                        }
                        else
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Entering SaveControlRecord in SaveTransactionDetails");
                            }
                        }
                        #endregion logend
                        VoucherControlRecord objControlRecords = SaveControlRecord(objvchrtemp, usercredentials, objTransaction.Activities.ActivityId, objTransactionDTDTO);
                        #region log enter
                        if (log.IsErrorEnabled == true)
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Error("Leave SaveControlRecord in SaveTransactionDetails");
                            }
                        }
                        else
                        {
                            if (usercredentials.IsDebugEnabled == true)
                            {
                                log.Debug("Leave SaveControlRecord in SaveTransactionDetails");
                            }
                        }
                        #endregion logend
                        objControlRecords.IDGeneratorForPacs = usercredentials.PacsId;
                        objControlRecords.SerialNumberOfPacs = usercredentials.PACSSerialNumber;
                        session.Save(objControlRecords);
                        #endregion end
                        #region Transfer Save or update
                        if (transferslist.Count > 0)
                        {
                            foreach (var objTrans in transferslist)
                            {
                                if (more.IsVocuherWithShareAmount)
                                {
                                    objTrans.Withdrawl -= 2 * more.ShareAmount;
                                    objTrans.Balance -= 2 * more.ShareAmount;
                                }
                                objTrans.VoucherNo = objvchrtemp.VoucherNo;
                                objTrans.BatchId = Convert.ToInt64(objvchrtemp.BatchId);
                                objTrans.IDGeneratorForPacs = usercredentials.PacsId;
                                objTrans.SerialNumberOfPacs = usercredentials.PACSSerialNumber;
                                session.SaveOrUpdate(objTrans);
                            }
                            objvchrtemp.IDGeneratorForPacs = usercredentials.PacsId;
                            objvchrtemp.SerialNumberOfPacs = usercredentials.PACSSerialNumber;
                            objvchrtemp.CashBookId = usercredentials.CashBookId;
                            voucherID = session.Merge(objvchrtemp);
                        }
                        else
                        {
                            objvchrtemp.IDGeneratorForPacs = usercredentials.PacsId;
                            objvchrtemp.SerialNumberOfPacs = usercredentials.PACSSerialNumber;
                            objvchrtemp.CashBookId = usercredentials.CashBookId;
                            voucherID = session.Merge(objvchrtemp);
                        }
                        #endregion Transfer Save or update
                        //RijndaelEnhanced _encryptHash2 = new RijndaelEnhanced();
                        //string _plaintext2 = Convert.ToString(objvchrtemp.TransactionDate) + "|" + Convert.ToString(objvchrtemp.Amount) + "|" + Convert.ToString(objvchrtemp.VoucherNo);
                        //string _EncryptText2 = _encryptHash2.Encrypt(_plaintext2);
                        // objvchrtemp.SaltValue = _EncryptText2;


                        if (objTransactionDTDTO.ProductTypeId != null)
                        {
                            if (objTransactionDTDTO.ProductTypeId == 3)
                            {
                                #region Loands And Storage
                                if (voucherID.VoucherID > 0)
                                {
                                    voucherId = voucherID.VoucherID;
                                }
                                else
                                {
                                    voucherId = objvchrtemp.VoucherID;
                                }
                                if ((repaymenttypeid == 3 || repaymenttypeid == 4))
                                {
                                    if (objTransactionDTDTO.IsDefaultTransfer)
                                    {
                                        if (objSecondvchrtemp.VoucherNo != 0)
                                        {
                                            session.Save(objSecondvchrtemp);
                                            isSecondVoucherExists = true;
                                            secondvoucherId = objSecondvchrtemp.VoucherID;
                                        }
                                        else
                                        {
                                            session.Transaction.Rollback();
                                            string status = "Voucher Number not generated";
                                            bool approve = false;
                                            object[] objVoucherTemp = { voucherId, 0, 0, approve, status, 0 };
                                            return objVoucherTemp;
                                        }
                                    }
                                }
                                if (objTransaction.FinTransactionType.TransactionTypeId != 2)
                                {
                                    #region Collection
                                    decimal actualcollectedamount = 0;
                                    #region log enter
                                    if (log.IsErrorEnabled == true)
                                    {
                                        if (usercredentials.IsDebugEnabled == true)
                                        {
                                            log.Error("Entering GetLoanApplicationno in SaveTransactionDetails");
                                        }
                                    }
                                    else
                                    {
                                        if (usercredentials.IsDebugEnabled == true)
                                        {
                                            log.Debug("Entering GetLoanApplicationno in SaveTransactionDetails");
                                        }
                                    }
                                    #endregion logend
                                    long applicationno = GetLoanApplicationno(objTransactionDTDTO.Product, objTransactionDTDTO.AccountNo, Convert.ToInt64(objTransactionDTDTO.AddmissionPkey), usercredentials.PacsId, usercredentials.BranchId);
                                    #region log enter
                                    if (log.IsErrorEnabled == true)
                                    {
                                        if (usercredentials.IsDebugEnabled == true)
                                        {
                                            log.Error("Leave GetLoanApplicationno in SaveTransactionDetails");
                                        }
                                    }
                                    else
                                    {
                                        if (usercredentials.IsDebugEnabled == true)
                                        {
                                            log.Debug("Leave GetLoanApplicationno in SaveTransactionDetails");
                                        }
                                    }
                                    if (repaymenttypeid == 1 || repaymenttypeid == 2)
                                    {
                                        var dcblist = GetDCBTempListForTermLoans(objTransactionDTDTO.DemandList, usercredentials, objTransactionDTDTO.Product, applicationno, objTransactionDTDTO.AccountNo, Convert.ToInt64(objTransactionDTDTO.AddmissionPkey), voucherId, objTransactionDTDTO.XML, objTransactionDTDTO.IsAllowExcessAmount);

                                        if (objTransaction.Activities.ActivityId == 5)
                                        {
                                            #region Advance Collection
                                            AdvanceCollectionsTemp advancetemp = new AdvanceCollectionsTemp();
                                            advancetemp.AdmissionNo = Convert.ToInt64(objTransactionDTDTO.AddmissionPkey);
                                            advancetemp.Amount = dcblist.Sum(a => a.AdvancceAamount);
                                            advancetemp.ApplicationNo = applicationno;
                                            advancetemp.IDGeneratorForPacs = usercredentials.PacsId;
                                            advancetemp.InstallmentAmount = 0;
                                            advancetemp.Installmentamountsame = dcblist.Where(k => k.AdvancceAamount > 0).LastOrDefault().IsSameInstallment;
                                            advancetemp.LoanNo = objTransactionDTDTO.AccountNo;
                                            advancetemp.Outstandingbalnceamount = dcblist.Where(k => k.AdvancceAamount > 0).LastOrDefault().BalancePrincipal;
                                            advancetemp.product = objTransactionDTDTO.Product;
                                            advancetemp.Repaymentchartrebuild = !advancetemp.Installmentamountsame;
                                            advancetemp.SerialNumberOfPacs = usercredentials.PACSSerialNumber;
                                            advancetemp.TransactionDate = objTransactionDTDTO.TransactionDate;
                                            advancetemp.VoucherNo = voucherID.VoucherNo;
                                            advancetemp.VoucherPkey = voucherID.VoucherID;
                                            session.Save(advancetemp);
                                            #endregion
                                        }
                                        if (dcblist.Count > 0)
                                        {
                                            if (objTransaction.Activities.ActivityId == 7)
                                            {
                                                dcblist.Select(p => { p.IsAdvanceCollection = false; p.IsSubsidyCollection = true; return p; }).ToList();
                                            }
                                            else
                                            {
                                                dcblist.Select(p => { p.IsAdvanceCollection = false; p.IsSubsidyCollection = false; return p; }).ToList();
                                            }
                                            actualcollectedamount = dcblist.Sum(i => i.CollectedPrincipal);
                                        }
                                        if (dcblist.Count != 0 && dcblist != null)
                                        {
                                            var othertransrolllist = GetOtherTransrollsDCBTempDetails(objTransactionDTDTO, usercredentials.PacsId, usercredentials.BranchId);
                                            if (othertransrolllist != null && othertransrolllist.Count > 0)
                                            {
                                                othertransrolllist.Select(k =>
                                                {
                                                    k.ApplicationNo = applicationno;
                                                    k.Loanno = objTransactionDTDTO.AccountNo;
                                                    k.ProductCode = objTransactionDTDTO.Product;
                                                    k.RepaymentType = repaymenttypeid;
                                                    k.SerialNumberOfPacs = usercredentials.PACSSerialNumber;
                                                    k.IDGeneratorForPacs = usercredentials.PacsId;
                                                    k.TransactiondDate = objvchrtemp.TransactionDate.Value;
                                                    k.DueDate = dcblist.Max(i => i.DueDate);
                                                    k.PacsId = usercredentials.PacsId;
                                                    k.BranchId = usercredentials.BranchId;
                                                    k.VoucherID = voucherId;
                                                    return k;
                                                }).ToList();

                                                dcblist.AddRange(othertransrolllist);
                                            }
                                            DateTime maxinstallmentdate = dcblist.Max(i => i.DueDate);
                                            foreach (var dcbtemp in dcblist)
                                            {
                                                //if (_outstandingResults != null)
                                                //{
                                                //    var systemdemand = _outstandingResults.Where(i => i.ApplicationNo == v.ApplicationNo && i.Loanproduct.Slno == v.ProductCode && i.LoanNumber == v.Loanno && i.Duedate == v.DueDate).ToList();
                                                //    if(systemdemand!=null && systemdemand.Count>0)
                                                //    { 
                                                //        v.SInterest = systemdemand.Sum(i => i.Interest);
                                                //        v.SPenalInterest = systemdemand.Sum(i => i.PenalInterest);
                                                //        v.SIOD = systemdemand.Sum(i => i.Ioa);
                                                //        v.SOthers = 0;
                                                //    }
                                                //}
                                                if (_outstandingResults != null && _outstandingResults.Count > 0)
                                                {
                                                    dcbtemp.SInterest = _outstandingResults.Where(i => i.ApplicationNo == dcbtemp.ApplicationNo && i.Duedate <= maxinstallmentdate).Sum(i => i.Interest);
                                                    dcbtemp.SPenalInterest = _outstandingResults.Where(i => i.ApplicationNo == dcbtemp.ApplicationNo && i.Duedate <= maxinstallmentdate).Sum(i => i.PenalInterest);
                                                    dcbtemp.SIOD = _outstandingResults.Where(i => i.ApplicationNo == dcbtemp.ApplicationNo && i.Duedate <= maxinstallmentdate).Sum(i => i.Ioa);

                                                    if (dcbtemp.OtherTransrollId != 0)
                                                    {
                                                        dcbtemp.SOthers = _outstandingResults.Where(i => i.OtherAmountTransroll != null && i.Duedate <= maxinstallmentdate && i.OtherAmountTransroll.TransrollID == dcbtemp.OtherTransrollId).Sum(i => i.OtherAmount);
                                                    }
                                                }
                                                dcbtemp.TransactiondDate = objTransactionDTDTO.ValueDate;
                                                dcbtemp.Daybookdate = usercredentials.Logindatetime;// usercredentials.Logindatetime;
                                                dcbtemp.VoucherID = voucherId;
                                                dcbtemp.RepaymentType = repaymenttypeid;
                                                dcbtemp.IDGeneratorForPacs = usercredentials.PacsId;
                                                dcbtemp.SerialNumberOfPacs = usercredentials.PACSSerialNumber;
                                                session.Save(dcbtemp);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        IList<DemandCollectionBalanceDetailsTemp> dcbtemplist = new List<DemandCollectionBalanceDetailsTemp>();
                                        if (isSecondVoucherExists)
                                        {
                                            dcbtemplist = GetDCBDetailsTempWithSecondVoucher(objTransactionDTDTO, usercredentials.PacsId, usercredentials.BranchId, IsForSubvention, objTransaction.Activities.ActivityId, _outstandingResults);
                                        }
                                        else
                                        {
                                            dcbtemplist = GetDCBDetailsTemp(objTransactionDTDTO, usercredentials.PacsId, usercredentials.BranchId, IsForSubvention, objTransaction.Activities.ActivityId, _outstandingResults);
                                        }
                                        if (dcbtemplist.Count > 0)
                                        {
                                            actualcollectedamount = dcbtemplist.Sum(i => i.CollectedPrincipal);
                                            decimal collectedinterest = dcbtemplist.Sum(k => k.CollectedInterest);

                                            decimal demandinterest = _outstandingResults != null && _outstandingResults.Count > 0 ? _outstandingResults.Sum(k => k.Interest) : 0;
                                            DateTime maxinstallmentdate = dcbtemplist.Max(i => i.DueDate);
                                            int rowcount = 1;
                                            foreach (var dcbtemp in dcbtemplist)
                                            {
                                                if (isSecondVoucherExists)
                                                {
                                                    if (dcbtemp.CollectedPrincipal > 0)
                                                    {
                                                        dcbtemp.VoucherID = voucherId;
                                                    }
                                                    else
                                                    {
                                                        dcbtemp.VoucherID = secondvoucherId;
                                                    }
                                                }
                                                else
                                                {
                                                    dcbtemp.VoucherID = voucherId;
                                                }
                                                dcbtemp.Loanno = objTransactionDTDTO.AccountNo;
                                                dcbtemp.ApplicationNo = applicationno;
                                                dcbtemp.TransactiondDate = objTransactionDTDTO.ValueDate;
                                                dcbtemp.Daybookdate = usercredentials.Logindatetime;// usercredentials.Logindatetime;
                                                if (_outstandingResults != null && _outstandingResults.Count > 0)
                                                {
                                                    if (repaymenttypeid == 1 || repaymenttypeid == 2)
                                                    {
                                                        dcbtemp.SInterest = _outstandingResults.Where(i => i.ApplicationNo == dcbtemp.ApplicationNo && i.Duedate <= maxinstallmentdate).Sum(i => i.Interest);
                                                        dcbtemp.SPenalInterest = _outstandingResults.Where(i => i.ApplicationNo == dcbtemp.ApplicationNo && i.Duedate <= maxinstallmentdate).Sum(i => i.PenalInterest);
                                                        dcbtemp.SIOD = _outstandingResults.Where(i => i.ApplicationNo == dcbtemp.ApplicationNo && i.Duedate <= maxinstallmentdate).Sum(i => i.Ioa);
                                                    }

                                                    if (dcbtemp.OtherTransrollId != 0)
                                                    {
                                                        dcbtemp.SOthers = _outstandingResults.Where(i => i.OtherAmountTransroll != null && i.OtherAmountTransroll.TransrollID == dcbtemp.OtherTransrollId && i.Duedate <= maxinstallmentdate).Sum(i => i.OtherAmount);
                                                    }
                                                }
                                                var duedate = GetMaxDueDate(applicationno, usercredentials.PacsId, usercredentials.BranchId);
                                                if (duedate != null && duedate != new DateTime(1, 1, 1))
                                                {
                                                    dcbtemp.DueDate = duedate.Value.Date;
                                                }
                                                else
                                                {
                                                    dcbtemp.DueDate = usercredentials.Logindatetime;
                                                }
                                                //RijndaelEnhanced _encryptHash = new RijndaelEnhanced();
                                                //string _plaintext = Convert.ToString(dcbtemp.TransactiondDate) + "|" + Convert.ToString(dcbtemp.CollectedPrincipal) + "|" + Convert.ToString(dcbtemp.CollectedInterest) + "|" + Convert.ToString(dcbtemp.CollectedIOD) + "|" + Convert.ToString(dcbtemp.CollectedPenalInterest) + "|" + Convert.ToString(dcbtemp.CollectedOthers) + "|" + Convert.ToString(objvchrtemp.VoucherNo);
                                                //string _EncryptText = _encryptHash.Encrypt(_plaintext);
                                                //dcbtemp.SaltValue = _EncryptText;
                                                dcbtemp.RepaymentType = repaymenttypeid;
                                                dcbtemp.IDGeneratorForPacs = usercredentials.PacsId;
                                                dcbtemp.SerialNumberOfPacs = usercredentials.PACSSerialNumber;
                                                session.Save(dcbtemp);
                                                rowcount += 1;
                                            }
                                        }
                                    }

                                    //need to prepare voucher for Excess amount - it is done for Raikal (even it is generic , request from Raikal-SOD loans)
                                    var details = objvchrtemp.VoucherDetailsTemp.Where(i => i.TransactionID == 40011 && i.PacsId == usercredentials.PacsId).ToList();
                                    if (details != null && details.Count > 0)
                                    {
                                        decimal actualdemand = _outstandingResults!=null && _outstandingResults.Count>0 ? _outstandingResults.Sum(i => i.Prinicipal) : 0;
                                        var principalvouchers = details.Where(i => i.TransrollID == 1).ToList();
                                        if (isAllowExcessAmount)
                                        {
                                            ExcessAmount = actualcollectedamount - actualdemand;
                                            if (ExcessAmount > 0)
                                            {
                                                VoucherDetailsTemp vouchertempforExcessamount = new VoucherDetailsTemp();
                                                ProductWiseActivities activityType = session.Load<ProductWiseActivities>(objTransactionDTDTO.ActivityType);


                                                vouchertempforExcessamount = FillVoucherDetailTempCashForOverDraft(objTransactionDTDTO, usercredentials, activityType, objvchrtemp.CashBookId, true, Convert.ToInt64(objTransactionDTDTO.AddmissionPkey), ExcessAmount, finyear);

                                                objvchrtemp.VoucherDetailsTemp.Add(vouchertempforExcessamount);
                                                if (principalvouchers != null && principalvouchers.Count > 0)
                                                {
                                                    principalvouchers.Where(i => i.AccountCode == vouchertempforExcessamount.AccountCode && i.TransrollID == 1).LastOrDefault().Credit = actualdemand;
                                                }

                                            }
                                        }
                                    }
                                    #endregion
                                    #endregion collection
                                }
                                else if (objTransaction.FinTransactionType.TransactionTypeId == 2)
                                {
                                    string moredisbursements = objTransactionDTDTO.MoreDisbursementDetailsXML;

                                    // MoreDisbursementDetails more = GetMoreDisbursementDetails(moredisbursements, voucherId);
                                    more.PacsId = usercredentials.PacsId;
                                    more.BranchID = usercredentials.BranchId;
                                    more.IDGeneratorForPacs = usercredentials.PacsId;
                                    more.SerialNumberOfPacs = usercredentials.PACSSerialNumber;
                                    more.DisbursmentAmount = objTransactionDTDTO.TotalAmount != null ? objTransactionDTDTO.TotalAmount.Value : 0;
                                    more.VoucherId = voucherId;
                                    if (more.IsVocuherWithShareAmount)
                                    {
                                        more.DisbursmentAmount -= 2 * more.ShareAmount;
                                    }
                                    if (isAllowExcessAmount)
                                    {
                                        var details = objvchrtemp.VoucherDetailsTemp.Where(i => i.TransactionID == 40012 && i.PacsId == usercredentials.PacsId).ToList();

                                        var principalvouchers = details.Where(i => i.TransrollID == 1 || i.TransrollID == 555).ToList();
                                        if (principalvouchers != null && principalvouchers.Count > 0)
                                        {
                                            VoucherDetailsTemp vouchertempforExcessamount = new VoucherDetailsTemp();
                                            ProductWiseActivities activityType = session.Load<ProductWiseActivities>(objTransactionDTDTO.ActivityType);
                                            #region log enter
                                            if (log.IsErrorEnabled == true)
                                            {
                                                if (usercredentials.IsDebugEnabled == true)
                                                {
                                                    log.Error("Entering GetExcessAmount in SaveTransactionDetails");
                                                }
                                            }
                                            else
                                            {
                                                if (usercredentials.IsDebugEnabled == true)
                                                {
                                                    log.Debug("Entering GetExcessAmount in SaveTransactionDetails");
                                                }
                                            }
                                            #endregion logend
                                            decimal excessamount = GetExcessAmount(more.ApplicationNo, usercredentials.PacsId, usercredentials.BranchId);

                                            #region log enter
                                            if (log.IsErrorEnabled == true)
                                            {
                                                if (usercredentials.IsDebugEnabled == true)
                                                {
                                                    log.Error("Leave GetExcessAmount in SaveTransactionDetails");
                                                }
                                            }
                                            else
                                            {
                                                if (usercredentials.IsDebugEnabled == true)
                                                {
                                                    log.Debug("Leave GetExcessAmount in SaveTransactionDetails");
                                                }
                                            }
                                            #endregion logend

                                            if (excessamount > 0)
                                            {
                                                decimal eamount = excessamount - more.DisbursmentAmount;
                                                if (eamount >= 0)
                                                {
                                                    #region log enter
                                                    if (log.IsErrorEnabled == true)
                                                    {
                                                        if (usercredentials.IsDebugEnabled == true)
                                                        {
                                                            log.Error("Entering FillVoucherDetailTempCashForOverDraft in SaveTransactionDetails");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (usercredentials.IsDebugEnabled == true)
                                                        {
                                                            log.Debug("Entering FillVoucherDetailTempCashForOverDraft in SaveTransactionDetails");
                                                        }
                                                    }
                                                    #endregion logend
                                                    vouchertempforExcessamount = FillVoucherDetailTempCashForOverDraft(objTransactionDTDTO, usercredentials, activityType, objvchrtemp.CashBookId, false, Convert.ToInt64(objTransactionDTDTO.AddmissionPkey), more.DisbursmentAmount, finyear);
                                                    #region log enter
                                                    if (log.IsErrorEnabled == true)
                                                    {
                                                        if (usercredentials.IsDebugEnabled == true)
                                                        {
                                                            log.Error("Leave FillVoucherDetailTempCashForOverDraft in SaveTransactionDetails");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (usercredentials.IsDebugEnabled == true)
                                                        {
                                                            log.Debug("Leave FillVoucherDetailTempCashForOverDraft in SaveTransactionDetails");
                                                        }
                                                    }
                                                    #endregion logend
                                                    objvchrtemp.VoucherDetailsTemp.Add(vouchertempforExcessamount);
                                                    objvchrtemp.VoucherDetailsTemp.Remove(principalvouchers.Where(i => i.AccountCode == vouchertempforExcessamount.AccountCode && i.TransrollID == 1).LastOrDefault());
                                                }
                                                else
                                                {
                                                    #region log enter
                                                    if (log.IsErrorEnabled == true)
                                                    {
                                                        if (usercredentials.IsDebugEnabled == true)
                                                        {
                                                            log.Error("Entering FillVoucherDetailTempCashForOverDraft in SaveTransactionDetails");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (usercredentials.IsDebugEnabled == true)
                                                        {
                                                            log.Debug("Entering FillVoucherDetailTempCashForOverDraft in SaveTransactionDetails");
                                                        }
                                                    }
                                                    #endregion logend
                                                    vouchertempforExcessamount = FillVoucherDetailTempCashForOverDraft(objTransactionDTDTO, usercredentials, activityType, objvchrtemp.CashBookId, false, Convert.ToInt64(objTransactionDTDTO.AddmissionPkey), Math.Abs(excessamount), finyear);
                                                    #region log enter
                                                    if (log.IsErrorEnabled == true)
                                                    {
                                                        if (usercredentials.IsDebugEnabled == true)
                                                        {
                                                            log.Error("Leave FillVoucherDetailTempCashForOverDraft in SaveTransactionDetails");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (usercredentials.IsDebugEnabled == true)
                                                        {
                                                            log.Debug("Leave FillVoucherDetailTempCashForOverDraft in SaveTransactionDetails");
                                                        }
                                                    }
                                                    #endregion logend
                                                    objvchrtemp.VoucherDetailsTemp.Add(vouchertempforExcessamount);
                                                    principalvouchers.Where(i => i.AccountCode == vouchertempforExcessamount.AccountCode && i.TransrollID == 1).LastOrDefault().Debit = Math.Abs(eamount);
                                                }
                                            }

                                        }

                                    }
                                    if (more.IsVocuherWithShareAmount)
                                    {
                                        //here need to prepare new voucher for share amount and disbursement
                                        //new transfer voucher from disbursment account to share account
                                        //debit from disbursement account of Share amount
                                        //credit to share account     


                                        MoreDisbursementDetails moredisforshare = new MoreDisbursementDetails();
                                        moredisforshare = CopyDisbursementDetails(more);

                                        ProductWiseActivities activityType = session.Load<ProductWiseActivities>(objTransactionDTDTO.ActivityType);
                                        #region log enter
                                        if (log.IsErrorEnabled == true)
                                        {
                                            if (usercredentials.IsDebugEnabled == true)
                                            {
                                                log.Error("Entering FillNewVoucherForDoubleEntry in SaveTransactionDetails");
                                            }
                                        }
                                        else
                                        {
                                            if (usercredentials.IsDebugEnabled == true)
                                            {
                                                log.Debug("Entering FillNewVoucherForDoubleEntry in SaveTransactionDetails");
                                            }
                                        }
                                        #endregion logend
                                        var vmaintemp = FillNewVoucherForDoubleEntry(objTransactionDTDTO, usercredentials, more.AdmissionNoPkey, activityType, finyear, more.ShareAmount, sharevoucherno);
                                        #region log enter
                                        if (log.IsErrorEnabled == true)
                                        {
                                            if (usercredentials.IsDebugEnabled == true)
                                            {
                                                log.Error("Leave FillNewVoucherForDoubleEntry in SaveTransactionDetails");
                                            }
                                        }
                                        else
                                        {
                                            if (usercredentials.IsDebugEnabled == true)
                                            {
                                                log.Debug("Leave FillNewVoucherForDoubleEntry in SaveTransactionDetails");
                                            }
                                        }
                                        #endregion logend
                                        session.Save(vmaintemp);

                                        moredisforshare.IDGeneratorForPacs = usercredentials.PacsId;
                                        moredisforshare.SerialNumberOfPacs = usercredentials.PACSSerialNumber;
                                        moredisforshare.VoucherId = vmaintemp.VoucherID;

                                        session.Save(moredisforshare);

                                    }

                                    if (more != null)
                                    {
                                        more.IDGeneratorForPacs = usercredentials.PacsId;
                                        more.SerialNumberOfPacs = usercredentials.PACSSerialNumber;
                                        session.Save(more);
                                    }

                                }
                                //add by venkat s -storage bond status updatetion 28/06/2017
                                if (objTransactionDTDTO.StorageCodePkeys != "" && objTransactionDTDTO.StorageCodePkeys != null)
                                {
                                    Loans.BL.LoanApplicationBl commonbllST = new Loans.BL.LoanApplicationBl(session);
                                    #region log enter
                                    if (log.IsErrorEnabled == true)
                                    {
                                        if (usercredentials.IsDebugEnabled == true)
                                        {
                                            log.Error("Entering commonbllST.UpdateLoanStorageDetails in SaveTransactionDetails");
                                        }
                                    }
                                    else
                                    {
                                        if (usercredentials.IsDebugEnabled == true)
                                        {
                                            log.Debug("Entering commonbllST.UpdateLoanStorageDetails in SaveTransactionDetails");
                                        }
                                    }
                                    #endregion logend
                                    IList<LoansOnStorage> Lstloanst = commonbllST.UpdateLoanStorageDetails(objTransactionDTDTO.StorageCodePkeys, usercredentials.PacsId, usercredentials.BranchId, voucherId, false);
                                    #region log enter
                                    if (log.IsErrorEnabled == true)
                                    {
                                        if (usercredentials.IsDebugEnabled == true)
                                        {
                                            log.Error("Leave commonbllST.UpdateLoanStorageDetails in SaveTransactionDetails");
                                        }
                                    }
                                    else
                                    {
                                        if (usercredentials.IsDebugEnabled == true)
                                        {
                                            log.Debug("Leave commonbllST.UpdateLoanStorageDetails in SaveTransactionDetails");
                                        }
                                    }
                                    #endregion logend
                                    if (Lstloanst.Count > 0)
                                    {
                                        foreach (LoansOnStorage lnst in Lstloanst)
                                        {
                                            lnst.PacsID = usercredentials.PacsId;
                                            lnst.BranchID = usercredentials.BranchId;
                                            lnst.IDGeneratorForPacs = usercredentials.PacsId;
                                            lnst.SerialNumberOfPacs = usercredentials.PACSSerialNumber;
                                            lnst.VoucherId = voucherId;
                                            lnst.Status = "R";
                                            lnst.IsPosted = false;
                                            lnst.IDGeneratorForPacs = usercredentials.PacsId;
                                            lnst.SerialNumberOfPacs = usercredentials.PACSSerialNumber;
                                            session.Save(lnst);
                                        }
                                    }
                                }
                                //Added for Daily Activity Log start by Nishanth
                                #endregion Loans
                            }
                            else if (temp.FirstOrDefault().ProductTypeID.ProductTypeID == 2)
                            {
                                #region SB
                                TransactionBL objTransactionBL = new TransactionBL(session);
                                #region log enter
                                if (log.IsErrorEnabled == true)
                                {
                                    if (usercredentials.IsDebugEnabled == true)
                                    {
                                        log.Error("Entering objTransactionBL.GetTransactionID in SaveTransactionDetails");
                                    }
                                }
                                else
                                {
                                    if (usercredentials.IsDebugEnabled == true)
                                    {
                                        log.Debug("Entering objTransactionBL.GetTransactionID in SaveTransactionDetails");
                                    }
                                }
                                #endregion logend
                                long transactionid = objTransactionBL.GetTransactionID(objTransactionDTDTO.ActivityType);
                                #region log enter
                                if (log.IsErrorEnabled == true)
                                {
                                    if (usercredentials.IsDebugEnabled == true)
                                    {
                                        log.Error("Leave objTransactionBL.GetTransactionID in SaveTransactionDetails");
                                    }
                                }
                                else
                                {
                                    if (usercredentials.IsDebugEnabled == true)
                                    {
                                        log.Debug("Leave objTransactionBL.GetTransactionID in SaveTransactionDetails");
                                    }
                                }
                                #endregion logend
                                if (transactionid == 30013)
                                {
                                    #region log enter
                                    if (log.IsErrorEnabled == true)
                                    {
                                        if (usercredentials.IsDebugEnabled == true)
                                        {
                                            log.Error("Entering FillChequeWithdrawalTemp in SaveTransactionDetails");
                                        }
                                    }
                                    else
                                    {
                                        if (usercredentials.IsDebugEnabled == true)
                                        {
                                            log.Debug("Entering FillChequeWithdrawalTemp in SaveTransactionDetails");
                                        }
                                    }
                                    #endregion logend
                                    ChequeWithdrawalsTemp objChequeTemp = FillChequeWithdrawalTemp(objTransactionDTDTO, usercredentials, objvchrtemp);
                                    #region log enter
                                    if (log.IsErrorEnabled == true)
                                    {
                                        if (usercredentials.IsDebugEnabled == true)
                                        {
                                            log.Error("Leave FillChequeWithdrawalTemp in SaveTransactionDetails");
                                        }
                                    }
                                    else
                                    {
                                        if (usercredentials.IsDebugEnabled == true)
                                        {
                                            log.Debug("Leave FillChequeWithdrawalTemp in SaveTransactionDetails");
                                        }
                                    }
                                    #endregion logend
                                    objChequeTemp.VoucherNumber = objvchrtemp.VoucherNo;
                                    objChequeTemp.IDGeneratorForPacs = usercredentials.PacsId;
                                    objChequeTemp.SerialNumberOfPacs = usercredentials.PACSSerialNumber;
                                    session.Save(objChequeTemp);
                                }
                                #endregion SB
                            }
                            if (objTransactionDTDTO.ProductTypeId == 11)
                            {
                                if (objTransactionDTDTO.formid ==90010)
                                {
                                    TermApplicationDetailsMain objmain = session.QueryOver<TermApplicationDetailsMain>().Where(i => i.AccountCode.AccountID == objTransactionDTDTO.AccountPkey && i.PacsIDFKey==usercredentials.PacsId && i.BranchIDFKey==usercredentials.BranchId).SingleOrDefault();
                                    if(objmain != null)
                                    {
                                        if (objmain.Status=="P")
                                        {
                                            objmain.Status="A";
                                            session.Merge(objmain);
                                        }
                                    }
                                }
                            }
                        }

                        if (usercredentials.IsEnableDailyActivityLog == true)
                        {
                            Mdm.Model.DailyActivityLog _dailyActivityLog = DailyActivityLog.CreateDailyActivityLog(usercredentials.UserName, usercredentials.Logindatetime, objTransactionDTDTO.formid, objTransactionDTDTO.ProductTypeId, 1, usercredentials.PacsId, usercredentials.BranchId, usercredentials.PACSSerialNumber);

                            session.Save(_dailyActivityLog);
                        }
                        //Added for Daily Activity Log End

                        if (objvchrtemp.VoucherNo != 0)
                        {
                            trans.Commit();
                        }
                        else
                        {
                            session.Transaction.Rollback();
                            bool Approvelimit = false;
                            long voucherid = 0;
                            string status = "Voucher Number not generated";
                            object[] objVoucherTemp = { voucherId, 0, 0, Approvelimit, status, 0 };
                            return objVoucherTemp;
                        }
                        if (voucherID.VoucherID > 0)
                        {
                            voucherId = voucherID.VoucherID;
                        }
                        else
                        {
                            voucherId = objvchrtemp.VoucherID;
                        }
                    }
                }
                else
                {
                    voucherId = 0;
                    message = "No Enough Cash Balance!";
                }
                log.Debug(" Leaving into Transactionpost Voucher number" + objvchrtemp.VoucherNo);

                decimal debit = objvchrtemp.VoucherDetailsTemp.Sum(i => i.Debit);
                decimal credit = objvchrtemp.VoucherDetailsTemp.Sum(i => i.Credit);
                long voucherNo = objvchrtemp.VoucherNo;
                bool isApprovelimit = false;

                string sqlquery = "";
                //select MaxAmount from fa_voucherapprovallimits where Role=1 and PacsId='91362103290001' and BranchId='2001' and MinAmount<=100 and MaxAmount>=100 and TransactionType=1
                sqlquery = string.Format(@"select MaxAmount from fa_voucherapprovallimits where Role=:Role and PacsId=:PacsId and BranchId=:BranchId and MinAmount<=:MinAmount and MaxAmount>=:MaxAmount and TransactionType=:TransactionType" );//;
                #region log enter
                if (log.IsErrorEnabled == true)
                {
                    if (usercredentials.IsDebugEnabled == true)
                    {
                        log.Error("Entering fa_voucherapprovallimits in SaveTransactionDetails  sqlquery:" + sqlquery);
                    }
                }
                else
                {
                    if (usercredentials.IsDebugEnabled == true)
                    {
                        log.Debug("Entering fa_voucherapprovallimits in SaveTransactionDetails  sqlquery:" + sqlquery);
                    }
                }
                #endregion logend
                decimal count = session.CreateSQLQuery(sqlquery)
                    .SetParameter("PacsId", usercredentials.PacsId)
                    .SetParameter("Role", usercredentials.RoleId)
                    .SetParameter("BranchId", usercredentials.BranchId)
                    .SetParameter("TransactionType", objvchrtemp.TransactionType.TransactionTypeID)
                    .SetParameter("MaxAmount", objvchrtemp.Amount)
                    .SetParameter("MinAmount", objvchrtemp.Amount)
                    .UniqueResult<decimal>();
                #region log enter
                if (log.IsErrorEnabled == true)
                {
                    if (usercredentials.IsDebugEnabled == true)
                    {
                        log.Error("Leave fa_voucherapprovallimits in SaveTransactionDetails  sqlquery:" + count);
                    }
                }
                else
                {
                    if (usercredentials.IsDebugEnabled == true)
                    {
                        log.Debug("Leave fa_voucherapprovallimits in SaveTransactionDetails  sqlquery:" + count);
                    }
                }
                #endregion logend
                if (count != 0)
                {
                    isApprovelimit = true;
                }
                if (voucherNo == 0 && message == "")
                {
                    message = "Assign Voucher sequence for daywise or yearwise";
                }
                object[] objVoucherId = { voucherId, debit, credit, isApprovelimit, message, voucherNo };
                return objVoucherId;
            }
            catch (Exception ex)
            {
                log.Error(ex);
                bool isApprovelimit = false;
                long voucherid = 0;
                string status = "Exception occured at:  SaveTransactionDetails";
                object[] objVoucherTemp = { voucherid, 0, 0, isApprovelimit, status, 0 };
                return objVoucherTemp;
            }

        }

        #endregion parallel run

        #region RTGSorNEFTTransctionsave
        public string saveRTGSOrNEFTDetails(NEFTorRTGSdetails objNEFTorRTGSdetails, UserCredentials users)
        {
            string status = "False";
            try
            {
                using (var transaction = session.BeginTransaction())
                {
                    objNEFTorRTGSdetails.TransactionStatus = 1;
                    objNEFTorRTGSdetails.PacsBranchId = users.BranchId;
                    objNEFTorRTGSdetails.PacsId = users.PacsId;
                    objNEFTorRTGSdetails.IDGeneratorForPacs = users.PacsId;
                    objNEFTorRTGSdetails.SerialNumberOfPacs = users.PACSSerialNumber;
                    objNEFTorRTGSdetails.TransactionDate = Convert.ToDateTime(users.Logindatetime.ToShortDateString() + " " + DateTime.Now.TimeOfDay);//users.Logindatetime;
                    objNEFTorRTGSdetails.UpdatedDateTime = objNEFTorRTGSdetails.TransactionDate;
                    if (objNEFTorRTGSdetails.BankTransactionID==null)
                    {
                        objNEFTorRTGSdetails.BankTransactionID = "0";
                    }
                    //objNEFTorRTGSdetails.BenificiaryBankId
                    if (objNEFTorRTGSdetails.PANNumber == null)
                    {
                        objNEFTorRTGSdetails.PANNumber = "0";
                    }
                    if (objNEFTorRTGSdetails.MemberPANNumber==null)
                    {
                        objNEFTorRTGSdetails.MemberPANNumber = "0";
                    }
                    if (objNEFTorRTGSdetails.SBMemberAccountNo == null)
                    {
                        objNEFTorRTGSdetails.SBMemberAccountNo = "0";
                    }
                    if (objNEFTorRTGSdetails.AmountInWords == null)
                    {
                        objNEFTorRTGSdetails.AmountInWords = "0";
                    }
                    if (objNEFTorRTGSdetails.MemberAdmissinoNo == null)
                    {
                        objNEFTorRTGSdetails.MemberAdmissinoNo = "0";
                    }
                    if (objNEFTorRTGSdetails.PACSAccountInDCCB == null)
                    {
                        objNEFTorRTGSdetails.PACSAccountInDCCB = "0";
                    }
                    session.Save(objNEFTorRTGSdetails);
                    session.Transaction.Commit();
                }


                //string query = string.Format(@"select TransactionID from FA_NEFTorRTGSdetails   where  TransactionDate = Convert(datetime,'{0}',103)   
                //and PacsId='{1}' and PacsBranchId='{2}' and SBMemberAccountID={3} and TransactionAmount={4} and 
                //TransactionStatus=1 ", objNEFTorRTGSdetails.TransactionDate, users.PacsId, users.BranchId, objNEFTorRTGSdetails.SBMemberAccountID, objNEFTorRTGSdetails.TransactionAmount);
                string query = UniteERPQuery.VoucherProcessing.saveRTGSOrNEFTDetailsQuery1( );
                long transactionId = session.CreateSQLQuery(query)
                    .SetParameter("TransactionDate", objNEFTorRTGSdetails.TransactionDate)
                    .SetParameter("pacsid", users.PacsId)
                    .SetParameter("branchid", users.BranchId)
                    .SetParameter("accountid", objNEFTorRTGSdetails.SBMemberAccountID)
                    .SetParameter("amount", objNEFTorRTGSdetails.TransactionAmount)
                   
                    //DateTime TransactionDate, long pacsid,int branchid,long accountid, decimal  amount
                    .UniqueResult<long>();
                if (transactionId != 0)
                {
                    string sqlquery = "";
                    
                    log.Debug(" Transaction date" + users.Logindatetime);
                    var startdate = objNEFTorRTGSdetails.TransactionDate.ToString("dd/MM/yyyy HH:mm:ss");
                    log.Debug(" startdate date" + startdate);
                    DateTime logindate = Convert.ToDateTime(startdate);
                    log.Debug(" logindate date" + logindate);
                    var startdate1 = objNEFTorRTGSdetails.TransactionDate.ToString("yyyy/MM/dd HH:mm:ss");
                    log.Debug(" startdate1 date" + startdate1);
                    sqlquery = string.Format(@"insert into FA_NEFTorRTGSdetails (TransactionID,DCCBBranchID,DCCBBrnchName,TransactionDate,SBMemberAccountNo,SBMemberName,
                    PANNumber,PACSCurrentAccountNo,PACSAccountName,BenificiaryAccountType,BenificiaryName,BenificiaryAddress,BenificiaryBankName,BenificiaryAccountNo,
                    BenificiaryBranchName,BenificiaryIFSCCode,BenificiaryMobileNo,BenificiaryEmailID,TransactionAmount,PacsId,PacsBranchId,TransactionStatus,DCCBBranchEmailID,
                    AmountInWords,MemberSbBalance,MemberAdmissinoNo,MemberPANNumber,SBMemberAccountID,UpdatedDateTime,BenificiaryBankId,NEFTChargeForPACS,NEFTChargeForDCCB,BenificiaryLedgerCode,PACSAccountInDCCB,PaymentMethod) 
                    values(" + transactionId + "," + objNEFTorRTGSdetails.DCCBBranchID + ",'" + objNEFTorRTGSdetails.DCCBBrnchName + "',Convert(datetime,'" + logindate + @"',103),
                      " + objNEFTorRTGSdetails.SBMemberAccountNo + ",'" + objNEFTorRTGSdetails.SBMemberName + "','" + objNEFTorRTGSdetails.PANNumber + "'," + objNEFTorRTGSdetails.PACSCurrentAccountNo + @",
                    '" + objNEFTorRTGSdetails.PACSAccountName + "'," + objNEFTorRTGSdetails.BenificiaryAccountType + ",'" + objNEFTorRTGSdetails.BenificiaryName + "','" + objNEFTorRTGSdetails.BenificiaryAddress + @"',
 '" + objNEFTorRTGSdetails.BenificiaryBankName + "','" + objNEFTorRTGSdetails.BenificiaryAccountNo + "','" + objNEFTorRTGSdetails.BenificiaryBranchName + "','" + objNEFTorRTGSdetails.BenificiaryIFSCCode + @"',
                    " + objNEFTorRTGSdetails.BenificiaryMobileNo + ",'" + objNEFTorRTGSdetails.BenificiaryEmailID + "'," + objNEFTorRTGSdetails.TransactionAmount + @",
                '" + objNEFTorRTGSdetails.PacsId + "','" + objNEFTorRTGSdetails.PacsBranchId + "'," + objNEFTorRTGSdetails.TransactionStatus + ",'" + objNEFTorRTGSdetails.DCCBBranchEmailID + @"',
                   '" + objNEFTorRTGSdetails.AmountInWords + "'," + objNEFTorRTGSdetails.MemberSbBalance + "," + objNEFTorRTGSdetails.MemberAdmissinoNo + ",'" + objNEFTorRTGSdetails.MemberPANNumber + "'," + objNEFTorRTGSdetails.SBMemberAccountID + @",
                       Convert(datetime,'" + logindate + "',103)," + objNEFTorRTGSdetails.BenificiaryBankId + "," + objNEFTorRTGSdetails.NEFTChargeForPACS + "," + objNEFTorRTGSdetails.NEFTChargeForDCCB + "," + objNEFTorRTGSdetails.BenificiaryLedgerCode + ",'" + objNEFTorRTGSdetails.PACSAccountInDCCB + "'," + objNEFTorRTGSdetails.PaymentMethod + ")");
                    log.Debug(" query date" + sqlquery);
                    UniteCommand commnd = new UniteCommand(sqlquery);
                    commnd.ExecuteNonQuery();
                    

                    string toMailIds = objNEFTorRTGSdetails.DCCBBranchEmailID;
                    if (objNEFTorRTGSdetails.BenificiaryEmailID != null)
                    {
                        toMailIds = objNEFTorRTGSdetails.DCCBBranchEmailID;
                        if (objNEFTorRTGSdetails.DCCBBranchEmailID != null && objNEFTorRTGSdetails.BenificiaryEmailID != null)
                        {
                            toMailIds = objNEFTorRTGSdetails.DCCBBranchEmailID + "," + objNEFTorRTGSdetails.BenificiaryEmailID;
                        }
                        else if (objNEFTorRTGSdetails.DCCBBranchEmailID == null && objNEFTorRTGSdetails.BenificiaryEmailID != null)
                        {
                            toMailIds = objNEFTorRTGSdetails.BenificiaryEmailID;
                        }
                        else if (objNEFTorRTGSdetails.DCCBBranchEmailID != null && objNEFTorRTGSdetails.BenificiaryEmailID == null)
                        {
                            toMailIds = objNEFTorRTGSdetails.DCCBBranchEmailID;
                        }
                        EmailPDF(users.PacsName, toMailIds, objNEFTorRTGSdetails.TransactionDate.ToShortDateString(), objNEFTorRTGSdetails.DCCBBrnchName);
                    }
                    string message = "Process the NEFT or RTGS Application form " + users.PacsName;
                    bool messagestatus = UntieSmsService.SendSmsToCustomer(objNEFTorRTGSdetails.MemberMobileNo.ToString(), message, false);
                    status = transactionId.ToString();;
                }
            }
            catch (Exception ex)
            {
                log.Error(ex);
                status = "False Exception occured at:  SaveTransactionDetails";
            }
            return status;
        }

        private void EmailPDF(string pacsname, string remitterMailId, string requistdate, string dccbBranch)
        {

            //PacsDetails objPacsEmailIds = session.QueryOver<PacsDetails>().Where(item => item.PacsId == pacsId).Select(item => item.PacsEmailId).SingleOrDefault(); ;

            if (pacsname != null && remitterMailId != null)
            {
                string htmlString = "";

                //pacsBranchName = "<p style='margin:0px;'>Pacs Branch Name :" + objEmailDetails.BranchName + ",</p><br> ";

                //pacsBranchName = "<p style='margin:0px;'>PACS Branch Name: " + pacsname + ", RTGS Requested Date " + requistdate + ",</p><br> ";
                string b1 = "<p style='margin:0px;'>Dear Sir/Madam,</p><br> ";


                string Title = "<p style='margin:0px;'>RTGS or NEFT Application form as on " + requistdate + ",</p><br> ";
                string pacsName = "<p style='margin:0px;'>PACS Name: " + pacsname + ",</p><br> ";
                //string pacsBranchName = "<p style='margin:0px;'>Pacs Branch Name :" + objEmailDetails.BranchName + ",</p><br> ";
                string DccbBranchName = "<p style='margin:0px;'>DCCB Branch Name: " + dccbBranch + ",</p><br> ";

                string b2 = "<p>This is system generated email from UNITE ERP " + DateTime.Now.ToString("dd/MM/yyy HH:mm:ss tt") + "</p><br><p style='margin:0px;'></p><p style='margin:0px;'>Regards,</p><p style='margin:0px;'>Support Team, </p><p style='margin:0px;'>Intellect Informatics Pvt Ltd.</p><br><br>";

                string b3 = string.Format(@"<p style='font-family: montserrat, sans-serif; margin: 0px; color: #12126f; font-size: 11px; '></p>
                <p style='font-family: montserrat, sans-serif; margin: 0px; color: #12126f; font-size: 11px; '></p>");



                htmlString = b1 + " " + Title + " " + pacsName + " " + DccbBranchName + "" + "<p style='margin:0px;'>Please process the RTGS or NEFT Application form.</p><p style='margin:0px;'></p><br>" + b2 + " " + b3;

                string username = "";// ConfigurationSettings.AppSettings["NetworkCredUserName"].ToString();
                string password = "";// ConfigurationSettings.AppSettings["NetworkCredPassword"].ToString(); 
                System.Net.Mail.MailMessage mm = new System.Net.Mail.MailMessage(username, remitterMailId);

                mm.Subject = "RTGS or NEFT Application form " + pacsname;
                //mm.Headers = "Dear Sir,"; "rajesh@intellectinfo.com";

                mm.Body = htmlString;// "Please process the RTGS or NEFT Application form, from " + pacsname;
                // mm.Attachments.Add(new Attachment(new MemoryStream(bytes), "DayBookEntry.pdf"));
                mm.IsBodyHtml = true;
                string host = "";// ConfigurationSettings.AppSettings["smtpHost"].ToString(); 
                string port = "";// ConfigurationSettings.AppSettings["smtpPort"].ToString(); 

               
                SmtpClient smtp = new SmtpClient();
                if (host != null)
                {
                    smtp.Host = host;
                }
                else
                {
                    smtp.Host = "smtp.gmail.com";
                }
                smtp.EnableSsl = true;
                if (port != null)
                {
                    smtp.Port = Convert.ToInt32(port);
                }
                else
                {
                    smtp.Port = 587;
                }
               
                
                
                NetworkCredential NetworkCred = new NetworkCredential();
                if (username != null)
                {
                    NetworkCred.UserName = username;
                }
                else
                {
                    NetworkCred.UserName = "adminsupport@intellectinfo.com";
                }
                if (password != null)
                {
                    NetworkCred.Password = password;
                }
                else
                {
                    NetworkCred.Password = "Intellectsupport";
                }
                smtp.UseDefaultCredentials = false;
                smtp.Credentials = NetworkCred;

                try
                {
                    smtp.Send(mm);
                }
                catch (Exception e)
                {
                    log.Error(e.Message);
                    log.Debug(e);//TransactionErrorLogBL.TrackErrorLog(e.Message);
                }
            }
        }

        //public void SaveorUpdateNEFTImages(NEFTImages neftImages)
        //{
        //    try
        //    {
        //        log.DebugFormat("Entering into SaveorUpdateMemberImages");
        //        using (var transaction = session.BeginTransaction())
        //        {
        //            NEFTImages objmemberimages = session.QueryOver<NEFTImages>().Where(i => i.TransactionId == neftImages.TransactionId && i.PacsId == neftImages.PacsId && i.BranchId == neftImages.BranchId).SingleOrDefault();
        //            //VoucherImages objmemberimages = session.Get<VoucherImages>(voucherimages.TempVoucherPkey);
        //            if (objmemberimages != null)
        //            {
        //                objmemberimages.CaptureDate = (DateTime)DateTime.Now;
        //                session.Update(objmemberimages);
        //                session.Transaction.Commit();
        //            }
        //            else
        //            {
        //                objmemberimages = new NEFTImages();

        //                objmemberimages.TransactionId = neftImages.TransactionId;
        //                objmemberimages.BenificiaryAccountNo = neftImages.BenificiaryAccountNo;
        //                objmemberimages.PACSCurrentAccountNo = neftImages.PACSCurrentAccountNo;
        //                objmemberimages.TransactionDate = neftImages.TransactionDate;
        //                objmemberimages.ValueDate = neftImages.ValueDate;
        //                objmemberimages.PacsId = neftImages.PacsId;
        //                objmemberimages.BranchId = neftImages.BranchId;
        //                objmemberimages.VoucherDocuments = neftImages.VoucherDocuments;
        //                objmemberimages.VoucherPhoto = neftImages.VoucherDocuments;
        //                objmemberimages.CaptureDate = (DateTime)DateTime.Now;
        //                session.Save(objmemberimages);
        //                session.Transaction.Commit();
        //            }
        //            log.Debug("Leaving from SaveorUpdateMemberImages");
        //        }
        //        log.DebugFormat("Leaving from SaveorUpdateMemberImages");
        //    }
        //    catch (Exception ex)
        //    {
        //        log.DebugFormat("Leaving from SaveorUpdateMemberImages --'{0}'", ex.Message);
        //    }
        //}

        //public IList<NEFTImages> GetNEFTDoucumentsByTransactionDate(DateTime fromdate, DateTime todate, long pacsid, int branchid, long voucherid, bool isTempVoucher)
        //{
        //    IList<NEFTImages> documentlist = new List<NEFTImages>();
        //    try
        //    {
        //        IList<NEFTImages> listVoucherImages = new List<NEFTImages>();
        //        if (isTempVoucher == true)
        //        {
        //            if (voucherid == 0)
        //            {
        //                listVoucherImages = session.QueryOver<NEFTImages>().Where(i => i.TransactionDate >= fromdate && i.TransactionId == i.TransactionId && i.TransactionDate <= todate && i.PacsId == pacsid && i.BranchId == branchid).List<NEFTImages>();
        //            }
        //            else
        //            {
        //                listVoucherImages = session.QueryOver<NEFTImages>().Where(i => i.TransactionId == voucherid && i.PacsId == pacsid && i.BranchId == branchid).List<NEFTImages>();
        //            }
        //        }
        //        else
        //        {
        //            if (voucherid == 0)
        //            {
        //                listVoucherImages = session.QueryOver<NEFTImages>().Where(i => i.TransactionDate >= fromdate && i.TransactionId != i.TransactionId && i.TransactionDate <= todate && i.PacsId == pacsid && i.BranchId == branchid).List<NEFTImages>();
        //            }
        //            else
        //            {
        //                listVoucherImages = session.QueryOver<NEFTImages>().Where(i => (i.TransactionId == voucherid) && i.PacsId == pacsid && i.BranchId == branchid).List<NEFTImages>();
        //            }
        //        }
        //        if (listVoucherImages.Count != 0)
        //        {
        //            documentlist = listVoucherImages;
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        log.DebugFormat("Leaving from GetVoucherDoucumentsByTransactionDate --'{0}'", ex.Message);
        //    }
        //    return documentlist;
        //}
       

        #endregion RTGSorNEFTTransctionsave

        #region Seperate voucher for pigmy penalty

        public void fillPigmyPenaltyVouchers(UserCredentials usercredentials, TransactionDTO objTransactionDTDTO)
        {
            log.Debug("Into fillPigmyPenaltyVouchers");
            VoucherMainTemp ObjVchrMain = new VoucherMainTemp();

            try
            {
                ObjVchrMain.IDGeneratorForPacs = usercredentials.PacsId;
                ObjVchrMain.SerialNumberOfPacs = usercredentials.PACSSerialNumber;
                ObjVchrMain.VoucherDetailsTemp = new List<VoucherDetailsTemp>();

                VoucherDetailsTemp ObjVchrDtls1 = new VoucherDetailsTemp();
                VoucherDetailsTemp ObjVchrDtls2 = new VoucherDetailsTemp();

                //ObjVchrDtls1 = GetVoucherDetailsTempforDeposit(ObjVchrDtls3, objPigmyTransactionsDetails.AgentNoPkey, objPigmyTransactionsDetails.TotalCollectedAmount, false, productCode, usercredentials.PacsId, usercredentials.BranchId, Convert.ToDateTime(objPigmyTransactionsDetails.ValueDate), usercredentials.Logindatetime, usercredentials, 2);
                //ObjVchrDtls2 = GetVoucherDetailsTempforMonthlyPostingsForIndividual(ObjVchrDtls4, item.AccountCode, item.CollectedAmount, true, productCode, usercredentials.PacsId, usercredentials.BranchId, Convert.ToDateTime(objPigmyTransactionsDetails.ValueDate), usercredentials.Logindatetime, usercredentials);

                FinancialYearMaster finyear = GetFinancialYearCode(objTransactionDTDTO.TransactionDate);

                long VoucherNo = GetMaxVoucherNumber(Convert.ToDateTime(objTransactionDTDTO.TransactionDate), usercredentials.UserName, usercredentials.PacsId, usercredentials.BranchId, usercredentials.PACSSerialNumber, objTransactionDTDTO.FinancialTransactionType, finyear.YearCode);
                              

                ObjVchrMain.VoucherNo = VoucherNo;

                if (objTransactionDTDTO == null || objTransactionDTDTO.VoucherNo == 0)
                {
                    log.Debug(" Unable to Create PigmyPenalty Voucher,As VoucherNo not generated");
                    // message = "Could Not Generate Voucher No";
                    //  voucherId = 0;

                }
                int VoucherTypeID = 2; //DefaultTransfer
                ObjVchrMain = GetVoucherMainTempDetails(ObjVchrMain, objTransactionDTDTO.NonCumulativePenalty, usercredentials.PacsId, usercredentials.BranchId, usercredentials.Logindatetime, objTransactionDTDTO.ValueDate, VoucherTypeID, usercredentials);
                //(ObjVchrMain, objTransactionDTDTO.NonCumulativePenalty, usercredentials.PacsId, usercredentials.BranchId, usercredentials.Logindatetime ,usercredentials., int VoucheTypeid, UserCredentials usercredentials);

                ObjVchrDtls1 = GetVoucherDetailsTempforDeposit(ObjVchrDtls1, objTransactionDTDTO, objTransactionDTDTO.NonCumulativePenalty, false, objTransactionDTDTO.Product, usercredentials.PacsId, usercredentials.BranchId, Convert.ToDateTime(objTransactionDTDTO.ValueDate), usercredentials.Logindatetime, usercredentials, 1);
                ObjVchrDtls2 = GetVoucherDetailsTempforDeposit(ObjVchrDtls2, objTransactionDTDTO, objTransactionDTDTO.NonCumulativePenalty, true, objTransactionDTDTO.Product, usercredentials.PacsId, usercredentials.BranchId, Convert.ToDateTime(objTransactionDTDTO.ValueDate), usercredentials.Logindatetime, usercredentials, 1);

                ObjVchrMain.VoucherDetailsTemp.Add(ObjVchrDtls1);
                ObjVchrMain.VoucherDetailsTemp.Add(ObjVchrDtls2);

                using (var trans = session.BeginTransaction())
                {

                    log.Debug("Preparing Pigmy Penalty Transactions");

                    try
                    {
                        decimal debit = ObjVchrMain.VoucherDetailsTemp.Sum(i => i.Debit);
                        decimal credit = ObjVchrMain.VoucherDetailsTemp.Sum(i => i.Credit);
                        ObjVchrMain.Amount = debit;
                        ObjVchrMain.VoucherTypeFlat = VoucherTypeID;
                        VoucherTypeMaster objVoucherType = new VoucherTypeMaster();
                        objVoucherType.VoucherTypeID = VoucherTypeID;
                        ObjVchrMain.VoucherType = objVoucherType;

                        session.Save(ObjVchrMain);
                        trans.Commit();
                    }
                    catch (Exception ex)
                    {
                        log.ErrorFormat("Error Saving PigmyPenaltyTransactions, Excepton - {0}", ex.ToString());
                        session.Transaction.Rollback();
                    }
                    log.Debug("Saving Pigmy Penalty Transaction successfully");
                }
            }
            catch(Exception ex)
            {
                log.ErrorFormat("Error Saving PigmyPenaltyTransactions, Excepton - {0}", ex.ToString());
            }

        }
        public VoucherMainTemp GetVoucherMainTempDetails(VoucherMainTemp ObjVchrMain, decimal Amount, long PacsID, int BranchId, DateTime LoginDateTime, DateTime ValueDate, int VoucheTypeid, UserCredentials usercredentials)
        {
            log.Debug("Enter into GetVoucherMainTempDetails");
            try
            {

                CommonFasBL commonFASBL = new CommonFasBL();
                long CashBookId = 0;
                CashBookId = commonFASBL.Getcashcounterid(usercredentials.UserName, usercredentials.PacsId, usercredentials.BranchId);


                ObjVchrMain.BranchId = BranchId;
                ObjVchrMain.Narration = "Penalty For Pigmy Foreclosure Transaction";
                ObjVchrMain.VoucherTypeDescription = VoucheTypeid.ToString();
                ObjVchrMain.BranchId = BranchId;
                ObjVchrMain.PacsId = PacsID;
                ObjVchrMain.PassStatus = false;
                ObjVchrMain.VoucherDeleted = false;
                ObjVchrMain.TransactionDate = LoginDateTime.Date;
                ObjVchrMain.ValueDate = ValueDate;
                ObjVchrMain.VoucherID = 0;
                ObjVchrMain.CashBookId = CashBookId;
                ObjVchrMain.Amount = Convert.ToDecimal(Amount);
                
                ObjVchrMain.VoucherType = session.Load<VoucherTypeMaster>(VoucheTypeid);
                ObjVchrMain.TransactionType = session.Load<FATransactionMaster>(1);
                ObjVchrMain.IDGeneratorForPacs = usercredentials.PacsId;
                ObjVchrMain.SerialNumberOfPacs = usercredentials.PACSSerialNumber;
                FinancialYearMaster year = commonFASBL.GetFinancialYearCode(LoginDateTime, PacsID, BranchId);
                ObjVchrMain.YearCode = year;

                log.Debug("Leaving into GetVoucherMainTempDetails");

                return ObjVchrMain;
            }

            catch (Exception ex)
            {
                TransactionErrorLogBL.TrackErrorLog(ex.Message);
                return null;
                throw ex;


            }
        }

       // public VoucherDetailsTemp GetVoucherDetailsTempforMonthlyPostingsForIndividual(VoucherDetailsTemp ObjVchrDtls, long AccountCode, decimal CollectedAmount, bool contraentry, int ProductCode, long PacsID, int BranchID, DateTime ValueDate, DateTime LoginDateTime, UserCredentials usercredentials)\
        public VoucherDetailsTemp GetVoucherDetailsTempforMonthlyPostingsForIndividual(VoucherDetailsTemp ObjVchrDtls, TransactionDTO objTransactionDTDTO,long AccountCode, decimal CollectedAmount, bool contraentry, int ProductCode, long PacsID, int BranchID, DateTime ValueDate, DateTime LoginDateTime, UserCredentials usercredentials)
        {
            try
            {
                log.Debug("Entering the GetVoucherDetailsTempforMonthlyPostingsForIndividual");
                ObjVchrDtls = new VoucherDetailsTemp();
                //PigmyApplication ObjPigmyApplicationDetails = new PigmyApplication();
                CommonFasBL commonFASBL = new CommonFasBL();
                //if (AccountCode != 0)
                //{
                //    ObjPigmyApplicationDetails = GetPigmyApplicationDetailsByProductAndAccountCode(AccountCode, ProductCode, PacsID, BranchID);
                //    ProductCode = ObjPigmyApplicationDetails.ProductCodeFKey.Slno;
                //}
                AccountDetails accountDetails = new AccountDetails();
                //accountDetails = AccountCode;
                //accountDetails = ObjVchrDtls.AccountCode;
                //objTransactionDTDTO.AccountPkey
                accountDetails =GetAccountDetails(ProductCode, objTransactionDTDTO.AccountNo, PacsID, BranchID, objTransactionDTDTO.AddmissionPkey);
                //accountDetails = AccountCode;
                FinancialYearMaster year = commonFASBL.GetFinancialYearCode(LoginDateTime, PacsID, BranchID);
                ObjVchrDtls.YearCode = year;
                if (accountDetails != null)
                {
                    ObjVchrDtls.AccountCode = accountDetails;
                }
                int TransRollID = 0;
                if (contraentry == true)
                {
                    TransRollID = 7; 
                    ObjVchrDtls.TransrollID = TransRollID;
                    ObjVchrDtls.Credit = CollectedAmount;
                    ObjVchrDtls.Debit = 0;
                    Ledger objLedger = new Ledger();
                    //objLedger = GetLedgerByProductSlNoAndTransrollIDForIndividual(ProductCode, TransRollID, PacsID, BranchID);
                    objLedger = GetLedgerByProductSlNoAndTransrollIDForIndividual(ProductCode, TransRollID, PacsID, BranchID);
                    ObjVchrDtls.LedgerCode = objLedger;
                    ObjVchrDtls.Narration = "Pigmy Penalty for Foreclosure Entry Postings";
                }
                ObjVchrDtls.ProductId = session.Load<ProductMaster>(Convert.ToInt32(ProductCode));
                ObjVchrDtls.ProductTypeID = ObjVchrDtls.ProductId.ProductTypeID;
                ObjVchrDtls.PacsId = PacsID;

                // CommonFasBL commonFASBL = new CommonFasBL();
                long CashBookId = 0;
                CashBookId = commonFASBL.Getcashcounterid(usercredentials.UserName, usercredentials.PacsId, usercredentials.BranchId);

                ObjVchrDtls.BranchId = BranchID;

                ObjVchrDtls.TransactionDate = LoginDateTime.Date;
              //  var transactionobject = GetTransactionActivitiesDetails(40113);
                //ObjVchrDtls.TransactionID = transactionobject.VoucherProcessingId;
                ObjVchrDtls.TransactionID = 40116; //For PigmyTransaction 
                ObjVchrDtls.CashBookId = CashBookId;
                ObjVchrDtls.PacsId = PacsID;
                ObjVchrDtls.ValueDate = ValueDate;
                ObjVchrDtls.VoucherDetailID = 0;
                log.Debug("Leaving the GetVoucherDetailsTempforMonthlyPostingsForIndividual");
                return ObjVchrDtls;

            }
            catch (Exception ex)
            {
                TransactionErrorLogBL.TrackErrorLog(ex.Message);
                return null;
                throw ex;

            }
        }

        public VoucherDetailsTemp GetVoucherDetailsTempforDeposit(VoucherDetailsTemp ObjVchrDtls, TransactionDTO objTransactionDTDTO, decimal TotalAmount, bool contraentry, int ProductCode, long PacsID, int BranchID, DateTime ValueDate, DateTime LoginDateTime, UserCredentials usercredentials, int TransactionType)
        {
            try
            {
                log.Debug("Enter into GetVoucherDetailsTempforDeposit");
                //AgentRegistrationDetails ObjAgentRegistrationDetailsApp = new AgentRegistrationDetails();
                CommonFasBL commonFASBL = new CommonFasBL();

                long CashBookId = 0;
                CashBookId = commonFASBL.Getcashcounterid(usercredentials.UserName, usercredentials.PacsId, usercredentials.BranchId);

              
                AccountDetails accountDetails = new AccountDetails();
                
                //accountDetails = AccountCode;
                //accountDetails = ObjVchrDtls.AccountCode;
                //objTransactionDTDTO.AccountPkey
                accountDetails = GetAccountDetails(ProductCode, objTransactionDTDTO.AccountNo, PacsID, BranchID, objTransactionDTDTO.AddmissionPkey);

                FinancialYearMaster year = commonFASBL.GetFinancialYearCode(LoginDateTime, PacsID, BranchID);
                ObjVchrDtls.YearCode = year;


                if (accountDetails != null) //updated condition checking with null value
                {
                    ObjVchrDtls.AccountCode = accountDetails;
                }
                int TransRollID = 0;
                if (contraentry == false)
                {
                    TransRollID = 182;
                    ObjVchrDtls.TransrollID = TransRollID;

                    //Added condition to adjust amount based on TransactionType
                    if (TransactionType == 1) //Receipt 
                    {
                        ObjVchrDtls.Credit = 0;
                        ObjVchrDtls.Debit = TotalAmount;
                    }
                    else if (TransactionType == 2) //Payment 
                    {
                        ObjVchrDtls.Credit = TotalAmount;
                        ObjVchrDtls.Debit = 0;
                    }
                    Ledger objLedger = new Ledger();
                   // objLedger = GetLedgerByProductSlNoAndTransrollID(ProductCode, TransRollID, PacsID, BranchID);
                    objLedger = accountDetails.LedgerPKey;
                    ObjVchrDtls.LedgerCode = objLedger;
                    ObjVchrDtls.OpeningAmount = 0;
                    ObjVchrDtls.BalanceAmount = 0;
                    ObjVchrDtls.Narration = "Penalty Charges on Pigmy Foreclosure Transaction";

                    ObjVchrDtls.ProductId = session.Load<ProductMaster>(Convert.ToInt32(ProductCode));
                    ObjVchrDtls.ProductTypeID = ObjVchrDtls.ProductId.ProductTypeID;


                }

                else
                {
                    TransRollID = 0;
                    ObjVchrDtls.TransrollID = TransRollID;

                    //Added condition to adjust amount based on TransactionType
                    if (TransactionType == 1) //Receipt 
                    {
                        ObjVchrDtls.Credit = TotalAmount;
                        ObjVchrDtls.Debit = 0;
                    }
                    else if (TransactionType == 2) //Payment 
                    {
                        ObjVchrDtls.Credit = 0;
                        ObjVchrDtls.Debit = TotalAmount;
                    }

                    Ledger objLedger = new Ledger();
                    objLedger = session.Load<Ledger>(Convert.ToInt64(457)); //Penalty On Pigmy
                    ObjVchrDtls.LedgerCode = objLedger;
                    decimal val1 = commonFASBL.GetLedgerBalanceByLedgercodeAndAccountID(ObjVchrDtls.LedgerCode.LedgerId, PacsID, BranchID, ObjVchrDtls.YearCode.YearCode, LoginDateTime, ObjVchrDtls.LedgerCode.LedgerType.LedgerTypeId);
                    ObjVchrDtls.OpeningAmount = val1;
                    ObjVchrDtls.BalanceAmount = TotalAmount + val1;
                    ObjVchrDtls.Narration = "Penalty On Pigmy";

                    ObjVchrDtls.AccountCode = null;
                    ObjVchrDtls.ProductId = session.Load<ProductMaster>(Convert.ToInt32(27));
                    ObjVchrDtls.ProductTypeID = ObjVchrDtls.ProductId.ProductTypeID;
                }
                //ObjVchrDtls.ProductId = session.Load<ProductMaster>(Convert.ToInt32(ProductCode));
                //ObjVchrDtls.ProductTypeID = ObjVchrDtls.ProductId.ProductTypeID;
                ObjVchrDtls.PacsId = PacsID;

                ObjVchrDtls.IDGeneratorForPacs = usercredentials.PacsId;
                ObjVchrDtls.SerialNumberOfPacs = usercredentials.PACSSerialNumber;
                ObjVchrDtls.BranchId = BranchID;


                ObjVchrDtls.TransactionDate = LoginDateTime.Date;
               // var transactionobject = GetTransactionActivitiesDetails(40112);
                //ObjVchrDtls.TransactionID = transactionobject.VoucherProcessingId;
                ObjVchrDtls.TransactionID = 40116; //TODO:

                ObjVchrDtls.CashBookId = CashBookId;
                ObjVchrDtls.PacsId = PacsID;
                ObjVchrDtls.ValueDate = ValueDate;
                ObjVchrDtls.VoucherDetailID = 0;
                log.Debug("Leaving into GetVoucherDetailsTempforDeposit");
                return ObjVchrDtls;

            }
            catch (Exception ex)
            {
                TransactionErrorLogBL.TrackErrorLog(ex.Message);
                return null;
                throw ex;

            }
        }

        public Ledger GetLedgerByProductSlNoAndTransrollIDForIndividual(int ProductCode, int TransRoll, long PacsID, int BranchID)
        {
            try
            {
                log.DebugFormat("Entering the GetLedgerByProductSlNoAndTransrollIDForIndividual");
                CommonFasBL cmnFasBl = new CommonFasBL();
                log.Debug("Leaving the GetLedgerByProductSlNoAndTransrollIDForIndividual");
                return cmnFasBl.GetLedgerByProductSlNoAndTransrollID(ProductCode, TransRoll, 1, PacsID, BranchID);
                //return cmnFasBl.GetLedgerByProductWiseAcitivityPkeyandTransrollID(76, TransRoll, PacsID, BranchID);
            }
            catch (Exception ex)
            {

                TransactionErrorLogBL.TrackErrorLog(ex.Message);
                return null;
            }

        }
        #endregion
    }
}
